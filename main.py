import logging
import random
from datetime import datetime
from telegram import Update, User
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

TOKEN = "8215387975:AAHS_mMHzXBGtDVevEBiSwsLcLPChs7Yq7k"
CHAT_ID = -1001849339863

logging.basicConfig(level=logging.INFO)

users = {}
pipisa_records = {}
last_predictions = {}
last_tarot = {}
lesbi_pair = None
last_lesbi = None
divorce_confirmations = {}

predictions = [
    "–¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏, –Ω–µ —Å–¥–∞–≤–∞–π—Å—è! üí™",
    "–ö—Ä–∞—Å–æ—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–∏–Ω—è—Ç–∏—è —Å–µ–±—è üòç",
    "–î–µ–π—Å—Ç–≤—É–π, –¥–∞–∂–µ –µ—Å–ª–∏ —Å—Ç—Ä–∞—à–Ω–æ üöÄ",
]

tarot_cards = [
    ("üåû –°–æ–ª–Ω—Ü–µ", "–£—Å–ø–µ—Ö, —Ä–∞–¥–æ—Å—Ç—å, —Å–≤–µ—Ç–ª—ã–π –ø—É—Ç—å", "–ó–∞–¥–µ—Ä–∂–∫–∏, —É–ø–∞–¥–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏"),
    ("üåô –õ—É–Ω–∞", "–ò–Ω—Ç—É–∏—Ü–∏—è, —Ç–∞–π–Ω—ã, —Å–Ω—ã", "–û–±–º–∞–Ω, –ø—É—Ç–∞–Ω–∏—Ü–∞, —Å—Ç—Ä–∞—Ö–∏"),
    ("üßô‚Äç‚ôÇÔ∏è –ú–∞–≥", "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, —ç–Ω–µ—Ä–≥–∏—è, –∫–æ–Ω—Ç—Ä–æ–ª—å", "–ú–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏, –æ–±–º–∞–Ω, –ø–æ—Ç–µ—Ä—è –∫–æ–Ω—Ç—Ä–æ–ª—è"),
]

def get_profile(uid):
    return users.get(uid, {
        "name": "",
        "nickname": "",
        "uid": "",
        "bday": "",
        "city": "",
        "social": "",
        "joined_date": "",
        "pipisa_height": 0.0,
        "quote": "",
        "married_to": None,
    })

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = (f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.mention_html()}‚ù£Ô∏è\n"
            "–û–∑–Ω–∞–∫–æ–º—å—Å—è –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∫–ª–∞–Ω–∞ https://telegra.ph/Pravila-klana-‡¶êOnlyGirls‡¶ê-05-29 ü´∂\n"
            "–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Å–µ–≥–¥–∞ –≤ –∑–∞–∫—Ä–µ–ø–µ‚ùóÔ∏è –ö–ª–∞–Ω–æ–≤–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞: ‡¶î")
    await context.bot.send_message(chat_id=CHAT_ID, text=text, parse_mode='HTML')

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    uid = user.id
    data = get_profile(uid)
    married_info = f"üíç –í –±—Ä–∞–∫–µ —Å {data['married_to']}\n" if data["married_to"] else ""
    text = (
        f"üôã‚Äç‚ôÄÔ∏è –ò–º—è: {data['name']}\n"
        f"üéÆ –ù–∏–∫ –≤ –∏–≥—Ä–µ: `{data['nickname']}`\n"
        f"üî¢ UID: `{data['uid']}`\n"
        f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['bday']}\n"
        f"üèô –ì–æ—Ä–æ–¥: {data['city']}\n"
        f"üì≤ –¢–¢ –∏–ª–∏ inst: {data['social']}\n"
        f"üìÖ –î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: {data['joined_date']}\n"
        f"üçÜ –ü–∏–ø–∏—Å–∞: {round(data['pipisa_height'], 1)} —Å–º\n"
        f"{married_info}üìù –î–µ–≤–∏–∑: {data['quote']}"
    )
    await update.message.reply_text(text, parse_mode='Markdown')

async def editprofile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    uid = user.id
    args = context.args
    if len(args) < 8:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /editprofile –∏–º—è –Ω–∏–∫ uid –¥—Ä –≥–æ—Ä–æ–¥ —Å–æ—Ü—Å–µ—Ç—å –¥–∞—Ç–∞ —Ü–∏—Ç–∞—Ç–∞")
        return
    users[uid] = {
        "name": user.first_name,
        "nickname": args[1],
        "uid": args[2],
        "bday": args[3],
        "city": args[4],
        "social": args[5],
        "joined_date": args[6],
        "quote": " ".join(args[7:]),
        "pipisa_height": users.get(uid, {}).get("pipisa_height", 0.0),
        "married_to": users.get(uid, {}).get("married_to")
    }
    await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!")

async def grow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    now = datetime.now()
    data = get_profile(uid)
    key = f"pipisa_time_{uid}"
    if context.chat_data.get(key) and context.chat_data[key].date() == now.date():
        await update.message.reply_text("–ü–∏–ø–∏—Å—É –º–æ–∂–Ω–æ —Ä–∞—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å!")
        return
    change = round(random.uniform(-10, 10), 1)
    if -0.1 < change < 0.1:
        change = 0.1 if random.random() > 0.5 else -0.1
    data["pipisa_height"] += change
    context.chat_data[key] = now
    msg = (f"–ü–∏–ø–∏—Å–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ +{change} —Å–º! üí¶" if change > 0 else
           f"–û–π... –ü–∏–ø–∏—Å–∞ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å –Ω–∞ {abs(change)} —Å–º ü•≤")
    users[uid] = data
    await update.message.reply_text(msg)

async def hugs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        target = context.args[0]
        await update.message.reply_text(f"ü§ó {update.effective_user.mention_html()} –æ–±–Ω—è–ª–∞ {target}!", parse_mode='HTML')
    else:
        text = random.choice([
            "ü§ó –û–±–Ω–∏–º–∞—à–∫–∏ –¥–ª—è –≤—Å–µ—Ö!",
            "ü´Ç –ö—Ç–æ –Ω–µ –æ–±–Ω–∏–º–µ—Ç—Å—è ‚Äî —Ç–æ—Ç –Ω–µ –∏–≥—Ä–∞–µ—Ç –≤ –∫–∞—Å—Ç–æ–º–∫–µ!",
            "ü´Ç –¢–æ–∫—Å–∏–∫–æ–≤ —Ç–æ–∂–µ –∏–Ω–æ–≥–¥–∞ –æ–±–Ω–∏–º–∞—é—Ç‚Ä¶ –ø–æ –≥–æ–ª–æ–≤–µ‚Ä¶ —Ç–∞–±—É—Ä–µ—Ç–∫–æ–π üôÉ",
            "üíñ –¢–µ–ø–ª–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤—Å–µ—Ö –¥–µ–≤–æ—á–µ–∫ —á–∞—Ç–∞!",
            "üåà –ü—É—Å—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å –±—É–¥–µ—Ç –º—è–≥–∫–∏–º –∫–∞–∫ –ø–ª–µ–¥–∏–∫ üß∏"
        ])
        await update.message.reply_text(text)

async def predskaz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    today = datetime.now().date()
    if last_predictions.get(uid) == today:
        await update.message.reply_text("üîÆ –£–∂–µ –ø–æ–ª—É—á–∞–ª–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è!")
    else:
        last_predictions[uid] = today
        await update.message.reply_text(f"üîÆ {random.choice(predictions)}")

async def tarot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    today = datetime.now().date()
    if last_tarot.get(uid) == today:
        await update.message.reply_text("üÉè –†–∞—Å–∫–ª–∞–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å!")
        return
    card, normal, reverse = random.choice(tarot_cards)
    meaning = random.choice([normal, reverse])
    last_tarot[uid] = today
    await update.message.reply_text(f"**{card}** ‚Äî {meaning}", parse_mode='Markdown')

async def lesbi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global last_lesbi, lesbi_pair
    today = datetime.now().date()
    if last_lesbi == today:
        await update.message.reply_text("üë≠ –ü–∞—Ä–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ —Å–µ–≥–æ–¥–Ω—è!")
        return
    members = list(users.values())
    if len(members) < 2:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏—Ü –¥–ª—è –ø–∞—Ä—ã")
        return
    pair = random.sample(members, 2)
    lesbi_pair = (pair[0]["name"], pair[1]["name"])
    last_lesbi = today
    text = f"üíò –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –ø–∞—Ä–æ—á–∫–∞: {lesbi_pair[0]} –∏ {lesbi_pair[1]} ‚Äî –æ–±–Ω–∏–º–∞–π—Ç–µ—Å—å –∫—Ä–µ–ø–∫–æ!"
    await context.bot.send_message(chat_id=CHAT_ID, text=text)

async def love(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏, –∫–æ–≥–æ —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å: /love @username")
        return
    uid = update.effective_user.id
    partner_username = context.args[0].replace("@", "")
    for pid, pdata in users.items():
        if pdata["nickname"] == partner_username:
            users[uid]["married_to"] = pdata["name"]
            pdata["married_to"] = users[uid]["name"]
            await context.bot.send_message(chat_id=CHAT_ID, text=f"üíç –°–≤–∞–¥—å–±–∞! {pdata['name']} —Ç–µ–ø–µ—Ä—å –≤ –±—Ä–∞–∫–µ —Å {users[uid]['name']} üíû")
            return
    await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

async def divorce(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    partner = users.get(uid, {}).get("married_to")
    if not partner:
        await update.message.reply_text("–¢—ã –Ω–µ –≤ –±—Ä–∞–∫–µ!")
        return
    divorce_confirmations[uid] = partner
    await update.message.reply_text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —Ä–∞–∑–≤–æ–¥: /confirmdivorce")

async def confirmdivorce(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    partner_name = divorce_confirmations.pop(uid, None)
    if not partner_name:
        await update.message.reply_text("–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–≥–æ —Ä–∞–∑–≤–æ–¥–∞")
        return
    users[uid]["married_to"] = None
    for pid, pdata in users.items():
        if pdata["name"] == partner_name:
            pdata["married_to"] = None
            await context.bot.send_message(chat_id=CHAT_ID, text=f"üíî –†–∞–∑–≤–æ–¥! {users[uid]['name']} –∏ {partner_name} —Ä–∞—Å—Å—Ç–∞–ª–∏—Å—å.")
            return

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n"
        "/profile ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/editprofile ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/grow ‚Äî —Ä–∞—Å—Ç–∏—Ç—å –ø–∏–ø–∏—Å—É\n"
        "/top5 ‚Äî —Ç–æ–ø –ø–∏–ø–∏—Å\n"
        "/predskaz ‚Äî –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ\n"
        "/tarot ‚Äî –∫–∞—Ä—Ç–∞ –¢–∞—Ä–æ\n"
        "/lesbi ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è –ø–∞—Ä–æ—á–∫–∞\n"
        "/hugs ‚Äî –æ–±–Ω–∏–º–∞—à–∫–∏\n"
        "/love @—é–∑–µ—Ä ‚Äî —Å–≤–∞–¥—å–±–∞\n"
        "/divorce ‚Äî —Ä–∞–∑–≤–æ–¥\n"
        "/confirmdivorce ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞–∑–≤–æ–¥\n"
        "/about ‚Äî —ç—Ç–æ –º–µ–Ω—é"
    )

app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("profile", profile))
app.add_handler(CommandHandler("editprofile", editprofile))
app.add_handler(CommandHandler("grow", grow))
app.add_handler(CommandHandler("predskaz", predskaz))
app.add_handler(CommandHandler("tarot", tarot))
app.add_handler(CommandHandler("lesbi", lesbi))
app.add_handler(CommandHandler("hugs", hugs))
app.add_handler(CommandHandler("love", love))
app.add_handler(CommandHandler("divorce", divorce))
app.add_handler(CommandHandler("confirmdivorce", confirmdivorce))
app.add_handler(CommandHandler("about", about))
app.run_polling()
