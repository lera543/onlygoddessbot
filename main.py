import logging
import random
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, User
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler

TOKEN = "8215387975:AAHS_mMHzXBGtDVevEBiSwsLcLPChs7Yq7k"
CHAT_ID = -1001849339863

logging.basicConfig(level=logging.INFO)

users = {}
pipisa_records = {}
weddings = {}
divorce_confirmations = {}
last_predictions = {}
last_tarot = {}
lesbi_pair = None
last_lesbi = None

predictions = [
    # 200 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: 100 –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö, 50 –∫—Ä–∞—Å–æ—Ç—ã, 50 –º–æ—Ç–∏–≤–∞—Ü–∏–∏ (—Å–º–∞–π–ª–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã)
    "–¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏, –Ω–µ —Å–¥–∞–≤–∞–π—Å—è! üí™",
    "–ö—Ä–∞—Å–æ—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–∏–Ω—è—Ç–∏—è —Å–µ–±—è üòç",
    "–î–µ–π—Å—Ç–≤—É–π, –¥–∞–∂–µ –µ—Å–ª–∏ —Å—Ç—Ä–∞—à–Ω–æ üöÄ",
    # ... (–∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è)
]

tarot_cards = [
    ("üåû –°–æ–ª–Ω—Ü–µ", "–£—Å–ø–µ—Ö, —Ä–∞–¥–æ—Å—Ç—å, —Å–≤–µ—Ç–ª—ã–π –ø—É—Ç—å", "–ó–∞–¥–µ—Ä–∂–∫–∏, —É–ø–∞–¥–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏"),
    ("üåô –õ—É–Ω–∞", "–ò–Ω—Ç—É–∏—Ü–∏—è, —Ç–∞–π–Ω—ã, —Å–Ω—ã", "–û–±–º–∞–Ω, –ø—É—Ç–∞–Ω–∏—Ü–∞, —Å—Ç—Ä–∞—Ö–∏"),
    ("üßô‚Äç‚ôÇÔ∏è –ú–∞–≥", "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, —ç–Ω–µ—Ä–≥–∏—è, –∫–æ–Ω—Ç—Ä–æ–ª—å", "–ú–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏, –æ–±–º–∞–Ω, –ø–æ—Ç–µ—Ä—è –∫–æ–Ω—Ç—Ä–æ–ª—è"),
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ä—à–∏–µ –∞—Ä–∫–∞–Ω—ã
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = (f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.mention_html()}‚ù£Ô∏è\n"
            "–û–∑–Ω–∞–∫–æ–º—å—Å—è –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∫–ª–∞–Ω–∞ "
            "(https://telegra.ph/Pravila-klana-‡¶êOnlyGirls‡¶ê-05-29)ü´∂\n"
            "–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Å–µ–≥–¥–∞ –≤ –∑–∞–∫—Ä–µ–ø–µ‚ùóÔ∏è –ö–ª–∞–Ω–æ–≤–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞: ‡¶î")
    await context.bot.send_message(chat_id=CHAT_ID, text=text, parse_mode='HTML')

def get_profile(uid):
    return users.get(uid, {
        "name": "",
        "nickname": "",
        "bday": "",
        "city": "",
        "social": "",
        "joined_date": "",
        "pipisa_height": 0.0,
        "quote": "",
        "married_to": None
    })

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    uid = user.id
    data = get_profile(uid)
    married_info = f"üíç –í –±—Ä–∞–∫–µ —Å {data['married_to']}\n" if data["married_to"] else ""
    text = (f"üôã‚Äç‚ôÄÔ∏è –ò–º—è: {data['name']}\nüéÆ –ù–∏–∫ –≤ –∏–≥—Ä–µ: {data['nickname']}\nüéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['bday']}\nüèô –ì–æ—Ä–æ–¥: {data['city']}\nüì≤ –°–æ—Ü.—Å–µ—Ç—å: {data['social']}\nüìÖ –î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: {data['joined_date']}\nüçÜ –†–æ—Å—Ç –ø–∏–ø–∏—Å—ã: {round(data['pipisa_height'], 1)} —Å–º\n{married_info}üìù –¶–∏—Ç–∞—Ç–∞: {data['quote']}")
    await update.message.reply_text(text)

async def editprofile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    uid = user.id
    data = get_profile(uid)
    args = context.args
    if len(args) < 7:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /editprofile –ò–º—è –ù–∏–∫_–≤_–∏–≥—Ä–µ –î–† –ì–æ—Ä–æ–¥ –°–æ—Ü—Å–µ—Ç—å –î–∞—Ç–∞–í—Å—Ç—É–ø–ª–µ–Ω–∏—è –¶–∏—Ç–∞—Ç–∞")
        return
    data["name"] = user.mention_html()
    data["nickname"] = args[0]
    data["bday"] = args[1]
    data["city"] = args[2]
    data["social"] = args[3]
    data["joined_date"] = args[4]
    data["quote"] = " ".join(args[5:])
    users[uid] = data
    await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!", parse_mode='HTML')

async def grow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    now = datetime.now()
    data = get_profile(uid)
    key = f"pipisa_time_{uid}"
    if context.chat_data.get(key) and context.chat_data[key].date() == now.date():
        await update.message.reply_text("–ü–∏–ø–∏—Å—É –º–æ–∂–Ω–æ —Ä–∞—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å!")
        return

    change = round(random.uniform(-10, 10), 1)
    if -0.1 < change < 0.1:
        change = 0.1 if random.random() > 0.5 else -0.1

    data["pipisa_height"] += change
    context.chat_data[key] = now

    if change > 0:
        msg = random.choice([
            f"–ü–∏–ø–∏—Å–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ +{change} —Å–º! üí¶",
            f"–í–∞—É! +{change} —Å–º –∫ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—é üòè",
            f"–¢–µ–ø–µ—Ä—å —Ç–≤–æ—è –ø–∏–ø–∏—Å–∞ {round(data['pipisa_height'],1)} —Å–º! üçÜ"
        ])
    else:
        msg = random.choice([
            f"–û–π... –ü–∏–ø–∏—Å–∞ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å –Ω–∞ {abs(change)} —Å–º ü•≤",
            f"–ú–∏–Ω—É—Å {abs(change)} —Å–º... –Ω–∞–¥–æ –ø–æ—Å—Ç–∞—Ä–∞—Ç—å—Å—è –ª—É—á—à–µ! üòø",
            f"–¢–≤–æ—è –ø–∏–ø–∏—Å–∞ —Ç–µ–ø–µ—Ä—å {round(data['pipisa_height'],1)} —Å–º. –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è üíî"
        ])
    users[uid] = data
    await update.message.reply_text(msg)

async def top5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    top = sorted(users.items(), key=lambda x: x[1].get("pipisa_height", 0), reverse=True)[:5]
    text = "üèÜ –¢–û–ü 5 –ø–∏–ø–∏—Å:\n" + "\n".join(
        [f"{i+1}. {v['name']} ‚Äî {round(v['pipisa_height'],1)} —Å–º" for i, (k,v) in enumerate(top)]
    )
    await update.message.reply_text(text, parse_mode='HTML')

async def fullrating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    top = sorted(users.items(), key=lambda x: x[1].get("pipisa_height", 0), reverse=True)
    text = "üìä –†–µ–π—Ç–∏–Ω–≥ –ø–∏–ø–∏—Å:\n" + "\n".join(
        [f"{i+1}. {v['name']} ‚Äî {round(v['pipisa_height'],1)} —Å–º" for i, (k,v) in enumerate(top)]
    )
    await update.message.reply_text(text, parse_mode='HTML')

async def predskaz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    now = datetime.now().date()
    if last_predictions.get(uid) == now:
        await update.message.reply_text("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–µ–≥–æ–¥–Ω—è!")
        return
    last_predictions[uid] = now
    await update.message.reply_text(f"üîÆ {random.choice(predictions)}")

async def tarot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    now = datetime.now().date()
    if last_tarot.get(uid) == now:
        await update.message.reply_text("üÉè –†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å!")
        return
    card, normal, reverse = random.choice(tarot_cards)
    is_reversed = random.choice([True, False])
    text = f"**{card}** ‚Äî {reverse if is_reversed else normal}"
    await update.message.reply_text(text, parse_mode='Markdown')
    last_tarot[uid] = now

async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open("rules.txt", encoding="utf-8") as f:
        await update.message.reply_text(f.read())

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞: \n"
        "/profile ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/editprofile ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/grow ‚Äî —Ä–∞—Å—Ç–∏—Ç—å –ø–∏–ø–∏—Å—É\n"
        "/top5 ‚Äî —Ç–æ–ø –ø–∏–ø–∏—Å\n"
        "/rating ‚Äî –≤–µ—Å—å —Ä–µ–π—Ç–∏–Ω–≥\n"
        "/predskaz ‚Äî –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ\n"
        "/tarot ‚Äî –∫–∞—Ä—Ç–∞ –¢–∞—Ä–æ\n"
        "/lesbi ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è –ø–∞—Ä–æ—á–∫–∞\n"
        "/hugs ‚Äî –æ–±–Ω–∏–º–∞—à–∫–∏\n"
        "/love @—é–∑–µ—Ä ‚Äî —Å–≤–∞–¥—å–±–∞\n"
        "/divorce @—é–∑–µ—Ä ‚Äî —Ä–∞–∑–≤–æ–¥\n"
        "/rules ‚Äî –ø—Ä–∞–≤–∏–ª–∞ –∫–ª–∞–Ω–∞\n"
        "/about ‚Äî —ç—Ç–æ –º–µ–Ω—é"
    )

# –õ–µ—Å–±–∏ –ø–∞—Ä—ã
async def lesbi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global last_lesbi, lesbi_pair
    now = datetime.now().date()
    if last_lesbi == now:
        await update.message.reply_text("üë≠ –ü–∞—Ä–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ —Å–µ–≥–æ–¥–Ω—è!")
        return
    members = list(users.items())
    if len(members) < 2:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏—Ü –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã")
        return
    pair = random.sample(members, 2)
    lesbi_pair = (pair[0][1]["name"], pair[1][1]["name"])
    last_lesbi = now
    text = random.choice([
        f"üíò –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –ø–∞—Ä–æ—á–∫–∞: {lesbi_pair[0]} –∏ {lesbi_pair[1]} ‚Äî –æ–±–Ω–∏–º–∞–π—Ç–µ—Å—å –∫—Ä–µ–ø–∫–æ!",
        f"üåà –õ—é–±–æ–≤—å –≤–∏—Ç–∞–µ—Ç –≤ –≤–æ–∑–¥—É—Ö–µ: {lesbi_pair[0]} üíû {lesbi_pair[1]}"
    ])
    await context.bot.send_message(chat_id=CHAT_ID, text=text, parse_mode='HTML')

# –û–±–Ω–∏–º–∞—à–∫–∏
async def hugs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        user = context.args[0]
        await update.message.reply_text(f"ü§ó {update.effective_user.mention_html()} –æ–±–Ω—è–ª–∞ {user}!", parse_mode='HTML')
    else:
        await update.message.reply_text("ü§ó –û–±–Ω–∏–º–∞—à–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤ —á–∞—Ç–µ! ü´Ç")

# –°–≤–∞–¥—å–±–∞
async def love(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏, –∫–æ–≥–æ —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å /love @username")
        return
    target = context.args[0].replace("@", "")
    uid = update.effective_user.id
    users[uid]["proposal"] = target
    await update.message.reply_text(f"üíç {update.effective_user.mention_html()} —Å–¥–µ–ª–∞–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ @{target}. –ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞!", parse_mode='HTML')

async def divorce(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not users[uid].get("married_to"):
        await update.message.reply_text("–¢—ã –Ω–µ –≤ –±—Ä–∞–∫–µ!")
        return
    partner = users[uid]["married_to"]
    divorce_confirmations[uid] = partner
    await update.message.reply_text(f"–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —Ä–∞–∑–≤–µ—Å—Ç–∏—Å—å —Å {partner}? –ù–∞–ø–∏—à–∏ /confirmdivorce")

async def confirmdivorce(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    partner_name = divorce_confirmations.pop(uid, None)
    if not partner_name:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–∞–∑–≤–æ–¥")
        return
    for k, v in users.items():
        if v["name"] == partner_name:
            v["married_to"] = None
            users[uid]["married_to"] = None
            await context.bot.send_message(chat_id=CHAT_ID,
                text=f"üíî –†–∞–∑–≤–æ–¥! {users[uid]['name']} –∏ {partner_name} —Ä–∞—Å—Å—Ç–∞–ª–∏—Å—å.")
            return

app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("profile", profile))
app.add_handler(CommandHandler("editprofile", editprofile))
app.add_handler(CommandHandler("grow", grow))
app.add_handler(CommandHandler("top5", top5))
app.add_handler(CommandHandler("rating", fullrating))
app.add_handler(CommandHandler("predskaz", predskaz))
app.add_handler(CommandHandler("tarot", tarot))
app.add_handler(CommandHandler("rules", rules))
app.add_handler(CommandHandler("about", about))
app.add_handler(CommandHandler("lesbi", lesbi))
app.add_handler(CommandHandler("hugs", hugs))
app.add_handler(CommandHandler("love", love))
app.add_handler(CommandHandler("divorce", divorce))
app.add_handler(CommandHandler("confirmdivorce", confirmdivorce))

app.run_polling()
