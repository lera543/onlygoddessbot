import logging
import random
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (ApplicationBuilder, CommandHandler, ContextTypes,
                          MessageHandler, filters, CallbackQueryHandler, ConversationHandler)

TOKEN = "8215387975:AAHS_mMHzXBGtDVevEBiSwsLcLPChs7Yq7k"
CHAT_ID = -1001849339863

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

users_data = {}
married = set()
lesbi_couples = {}
last_prediction_date = {}
last_lesbi_date = None

PROFILE_QUESTIONS = [
    "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–∏–º—è)",
    "–ö–∞–∫–æ–π —É —Ç–µ–±—è –Ω–∏–∫ –≤ –∏–≥—Ä–µ?",
    "–ö–∞–∫–æ–π —É —Ç–µ–±—è UID?",
    "–ö–æ–≥–¥–∞ —É —Ç–µ–±—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2000)",
    "–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?",
    "–û—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π TikTok –∏–ª–∏ Instagram:",
    "–ö–æ–≥–¥–∞ —Ç—ã –≤—Å—Ç—É–ø–∏–ª–∞ –≤ —á–∞—Ç? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.08.2025)",
    "–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –¥–µ–≤–∏–∑–æ–º –∏–ª–∏ –ª—é–±–∏–º–æ–π —Ü–∏—Ç–∞—Ç–æ–π:"
]

PREDICTIONS = [f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ {i}" for i in range(1, 201)]

TAROT_CARDS = [
    ("–®—É—Ç ü§°", "–Ω–æ–≤–æ–µ –Ω–∞—á–∞–ª–æ, —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å, –Ω–∞–∏–≤–Ω–æ—Å—Ç—å", "–±–µ–∑—Ä–∞—Å—Å—É–¥—Å—Ç–≤–æ, –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å"),
    ("–ú–∞–≥ üßô", "–≤–æ–ª—è, –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ, —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è", "–º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏, –æ–±–º–∞–Ω, –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"),
    ("–ñ—Ä–∏—Ü–∞ üîÆ", "–∏–Ω—Ç—É–∏—Ü–∏—è, —Ç–∞–π–Ω–∞, –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –º—É–¥—Ä–æ—Å—Ç—å", "—Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å, –æ—Ç—Å—Ç—Ä–∞–Ω—ë–Ω–Ω–æ—Å—Ç—å")
    # –î–æ–±–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
]

HUGS_MESSAGES = [
    "–û–±–Ω–∏–º–∞—é —Ç–µ–±—è –∫—Ä–µ–ø–∫–æ-–∫—Ä–µ–ø–∫–æ ü´Ç –í—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ!",
    "–¢–µ–±—è –∫—Ç–æ-—Ç–æ –æ–±–Ω–∏–º–∞–µ—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ü§ó –ù–∞–¥–µ—é—Å—å, —Ç–µ–±–µ —Å—Ç–∞–ª–æ —Ç–µ–ø–ª–µ–µ!",
    "–ú—è–≥–∫–∏–µ –æ–±–Ω–∏–º–∞—à–∫–∏ –Ω–∞ —Ç–≤–æ–π –¥–µ–Ω—å! üß∏ –¢—ã —Å—É–ø–µ—Ä!",
    "–í–æ—Ç —Ç–∞–∫ –Ω–µ–∂–Ω–æ –∏ –∑–∞–±–æ—Ç–ª–∏–≤–æ ‚Äî –æ–±–Ω–∏–º–∞—é üíû",
    "–ö—Ç–æ –Ω–µ –æ–±–Ω–∏–º–µ—Ç—Å—è ‚Äî —Ç–æ—Ç –Ω–µ –∏–≥—Ä–∞–µ—Ç –≤ –∫–∞—Å—Ç–æ–º–∫–µ!",
    "ü´Ç –¢–æ–∫—Å–∏–∫–æ–≤ —Ç–æ–∂–µ –∏–Ω–æ–≥–¥–∞ –æ–±–Ω–∏–º–∞—é—Ç‚Ä¶ –ø–æ –≥–æ–ª–æ–≤–µ‚Ä¶ —Ç–∞–±—É—Ä–µ—Ç–∫–æ–π üôÉ"
]

PIPISA_UP_REACTIONS = [
    "–ü–∏–ø–∏—Å–∞ –≤—ã—Ä–æ—Å–ª–∞ –∫–∞–∫ –Ω–∞ –¥—Ä–æ–∂–∂–∞—Ö! üçÜ‚ú®",
    "–û–≥–æ! –¢–∞–∫–∞—è –ø—Ä–∏–±–∞–≤–∫–∞, –∞–∂ –≤ —á–∞—Ç–µ —Ç–µ–ø–ª–æ —Å—Ç–∞–ª–æ üò≥",
    "–ü–∏–ø–∏—Å–∞ —Ç—è–Ω–µ—Ç—Å—è –∫ —Å–æ–ª–Ω—Ü—É! ‚òÄÔ∏è",
    "–°–µ–≥–æ–¥–Ω—è —É–¥–∞—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —Ä–æ—Å—Ç–∞! üìà"
]

PIPISA_DOWN_REACTIONS = [
    "–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò¨",
    "–ü–∏–ø–∏—Å–∞ —Å–∂–∞–ª–∞—Å—å –æ—Ç —Ö–æ–ª–æ–¥–∞ ü•∂",
    "–ì—Ä—É—Å—Ç–Ω—ã–π –¥–µ–Ω—å, –¥–∞–∂–µ –ø–∏–ø–∏—Å–∞ –ø–æ–Ω–∏–∫–ª–∞ üò¢",
    "–ù–∏—á–µ–≥–æ, –∑–∞–≤—Ç—Ä–∞ –≤—ã—Ä–∞—Å—Ç–µ—Ç —Å–Ω–æ–≤–∞! üí™"
]

LOVE_MESSAGES = [
    "üíç {a} –∏ {b} —Ç–µ–ø–µ—Ä—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∂–µ–Ω–∞ –∏ –∂–µ–Ω–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ",
    "üë∞‚Äç‚ôÄÔ∏èüë∞‚Äç‚ôÄÔ∏è –°—ã–≥—Ä–∞–ª–∏ —Å–≤–∞–¥—å–±—É: {a} + {b} = üíí –õ—é–±–æ–≤—å!",
    "ü•Ç –ü–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è —Å–µ–º–µ–π–Ω–∞—è –ø–∞—Ä–∞: {a} & {b}! –ü—É—Å—Ç—å –±—É–¥–µ—Ç —Å—á–∞—Å—Ç—å–µ! ü´∂",
    "üéä {a} –∏ {b} —Ç–µ–ø–µ—Ä—å —Å—É–ø—Ä—É–≥–∏ –≤ –Ω–∞—à–µ–º –∫–ª–∞–Ω–µ! –ù–µ–∂–Ω–æ—Å—Ç–∏ –∏ –æ–±–Ω–∏–º–∞—à–µ–∫! ü•∞"
]

LESBI_MESSAGES = [
    "üåà –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –ª–µ—Å–±–∏-–ø–∞—Ä–∞: {a} –∏ {b} üíã",
    "ü´∂ –ö—Ç–æ –±—ã –º–æ–≥ –ø–æ–¥—É–º–∞—Ç—å! {a} –∏ {b} ‚Äî –ø–∞—Ä–∞ –¥–Ω—è!",
    "üíò –ê–º—É—Ä –ø–æ–ø–∞–ª —Ç–æ—á–Ω–æ –≤ —Ü–µ–ª—å! {a} –∏ {b} —Ç–µ–ø–µ—Ä—å –≤–º–µ—Å—Ç–µ üòç",
    "üíû –õ—é–±–æ–≤—å –≤–∏—Ç–∞–µ—Ç –≤ –≤–æ–∑–¥—É—Ö–µ: {a} + {b} = ‚ù§Ô∏è"
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –∫–ª–∞–Ω–æ–≤—ã–π –±–æ—Ç –¥–ª—è OnlyGirls. –ù–∞–ø–∏—à–∏ /about —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é ‚ú®")

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "‚ú® <b>–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:</b>\n"
        "/editprofile ‚Äî –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/profile ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/pipisa ‚Äî –≤—ã—Ä–∞—Å—Ç–∏—Ç—å –ø–∏–ø–∏—Å—É üçÜ\n"
        "/predskaz ‚Äî –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ\n"
        "/tarot ‚Äî —Ä–∞—Å–∫–ª–∞–¥ —Ç–∞—Ä–æ\n"
        "/lesbi ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è –ª–µ—Å–±–∏-–ø–∞—Ä–∞ –¥–Ω—è üåà\n"
        "/hugs ‚Äî –æ–±–Ω–∏–º–∞—à–∫–∏ ü§ó\n"
        "/love @user ‚Äî —Å—ã–≥—Ä–∞—Ç—å —Å–≤–∞–¥—å–±—É\n"
        "/divorce @user ‚Äî —Ä–∞–∑–≤–æ–¥\n"
        "/sovmestimost @user ‚Äî —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –∑–Ω–∞–∫–∞–º\n"
        "/rules ‚Äî –ø—Ä–∞–≤–∏–ª–∞ –∫–ª–∞–Ω–∞ üìú"
    )
    await update.message.reply_text(text, parse_mode="HTML")

# –•–µ–Ω–¥–ª–µ—Ä –∞–Ω–∫–µ—Ç—ã
PROFILE, = range(1)

async def editprofile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile_step"] = 0
    context.user_data["profile_answers"] = []
    await update.message.reply_text(PROFILE_QUESTIONS[0])
    return PROFILE

async def profile_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data["profile_step"]
    context.user_data["profile_answers"].append(update.message.text)
    step += 1
    if step >= len(PROFILE_QUESTIONS):
        users_data[update.effective_user.id] = {
            "first_name": context.user_data["profile_answers"][0],
            "nickname": context.user_data["profile_answers"][1],
            "uid": context.user_data["profile_answers"][2],
            "bday": context.user_data["profile_answers"][3],
            "city": context.user_data["profile_answers"][4],
            "social": context.user_data["profile_answers"][5],
            "joined_date": context.user_data["profile_answers"][6],
            "quote": context.user_data["profile_answers"][7],
            "pipisa_height": 0.0
        }
        await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ")
        return ConversationHandler.END
    else:
        context.user_data["profile_step"] = step
        await update.message.reply_text(PROFILE_QUESTIONS[step])
        return PROFILE

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = users_data.get(update.effective_user.id)
    if not user:
        await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /editprofile")
        return
    text = (
        f"üôã‚Äç‚ôÄÔ∏è –ò–º—è: {user['first_name']}\n"
        f"üéÆ –ù–∏–∫ –≤ –∏–≥—Ä–µ: <code>{user['nickname']}</code>\n"
        f"üî¢ UID: <code>{user['uid']}</code>\n"
        f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user['bday']}\n"
        f"üèô –ì–æ—Ä–æ–¥: {user['city']}\n"
        f"üì≤ –¢–¢ –∏–ª–∏ inst: {user['social']}\n"
        f"üìÖ –î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: {user['joined_date']}\n"
        f"üçÜ –ü–∏–ø–∏—Å–∞: {user['pipisa_height']} —Å–º\n"
        f"üìù –î–µ–≤–∏–∑: {user['quote']}"
    )
    await update.message.reply_text(text, parse_mode="HTML")

async def pipisa(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    now = datetime.datetime.now().date()
    user = users_data.get(user_id)
    if not user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /editprofile")
        return
    if user.get("last_pipisa_date") == now:
        await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è —Ç—ã —É–∂–µ —Ä–∞—Å—Ç–∏–ª–∞ –ø–∏–ø–∏—Å—É! –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞.")
        return
    delta = round(random.uniform(-10, 10), 1)
    user["pipisa_height"] += delta
    user["pipisa_height"] = round(max(user["pipisa_height"], 0.0), 1)
    user["last_pipisa_date"] = now
    reaction = random.choice(PIPISA_UP_REACTIONS if delta > 0 else PIPISA_DOWN_REACTIONS)
    await update.message.reply_text(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {delta:+} —Å–º\n{reaction}")

async def predskaz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    now = datetime.datetime.now().date()
    if last_prediction_date.get(uid) == now:
        await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è —Ç—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ‚ú®")
        return
    last_prediction_date[uid] = now
    await update.message.reply_text(random.choice(PREDICTIONS))

async def tarot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    card, meaning, reversed_meaning = random.choice(TAROT_CARDS)
    is_reversed = random.choice([True, False])
    meaning_text = reversed_meaning if is_reversed else meaning
    await update.message.reply_text(f"<b>{card}</b> ({'–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è' if is_reversed else '–ø—Ä—è–º–∞—è'}):\n{meaning_text}", parse_mode="HTML")

async def hugs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(HUGS_MESSAGES))

async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìú <b>–ü—Ä–∞–≤–∏–ª–∞ –∫–ª–∞–Ω–∞:</b>\n"
        "1. –£–≤–∞–∂–∞–π –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏—Ü.\n"
        "2. –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –≤–æ–π–Ω—É.\n"
        "3. –°—Ç–∞–≤—å –∫–ª–∞–Ω–æ–≤—É—é –ø—Ä–∏—Å—Ç–∞–≤–∫—É ‡¶î –≤ –Ω–∏–∫.\n"
        "4. –°–æ–±–ª—é–¥–∞–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.\n"
        "5. –ù–∞—Ä—É—à–µ–Ω–∏—è –∫–∞—Ä–∞—é—Ç—Å—è —É–¥–∞–ª–µ–Ω–∏–µ–º –∏–∑ –∫–ª–∞–Ω–∞.\n\n"
        "–ü–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç—É—Ç: https://telegra.ph/Pravila-klana-‡ßêOnlyGirls‡ßê-05-29"
    )
    await update.message.reply_text(text, parse_mode="HTML")

app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("about", about))
app.add_handler(CommandHandler("profile", profile))
app.add_handler(CommandHandler("pipisa", pipisa))
app.add_handler(CommandHandler("predskaz", predskaz))
app.add_handler(CommandHandler("tarot", tarot))
app.add_handler(CommandHandler("hugs", hugs))
app.add_handler(CommandHandler("rules", rules))

app.add_handler(ConversationHandler(
    entry_points=[CommandHandler("editprofile", editprofile)],
    states={PROFILE: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_input)]},
    fallbacks=[]
))

app.run_polling()
