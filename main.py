# -*- coding: utf-8 -*-
import json
import logging
import random
from datetime import datetime, date, time, timedelta
from pathlib import Path

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ChatMemberHandler,
    ConversationHandler, ContextTypes, filters
)

# ===================== –ù–ê–°–¢–†–û–ô–ö–ò =====================
TOKEN = "8215387975:AAHS_mMHzXBGtDVevEBiSwsLcLPChs7Yq7k"
CHAT_ID = -1001849339863  # –æ–±—â–∏–π —á–∞—Ç
DATA_FILE = Path("data.json")

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO
)
logger = logging.getLogger("OnlyGirlsBot")

# ===================== –•–†–ê–ù–ò–õ–ò–©–ï =====================
# state:
# users: {
#   user_id(str): {
#     "name", "nickname", "uid", "bday", "city",
#     "tiktok", "joined_date", "quote",
#     "pipisa", "last_pipisa", "last_prediction", "last_tarot",
#     "married_to"
#   }
# }
# known_users: [int, ...]  # –≤—Å–µ, –∫–æ–≥–æ –∑–Ω–∞–µ–º (–≤—Å—Ç—É–ø–∏–ª–∏ –≤ —á–∞—Ç/–ø–∏—Å–∞–ª–∏ –±–æ—Ç—É)
# proposals: { target_id(str): proposer_id(int) }
# divorce_requests: { partner_id(str): requester_id(int) }
# last_lesbi_date: "YYYY-MM-DD"
# last_lesbi_pair: [user_id_a(int), user_id_b(int)]
state = {
    "users": {},
    "known_users": [],
    "proposals": {},
    "divorce_requests": {},
    "last_lesbi_date": None,
    "last_lesbi_pair": None
}

def load_state():
    if DATA_FILE.exists():
        try:
            data = json.loads(DATA_FILE.read_text(encoding="utf-8"))
            state.update(data)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å data.json: {e}")

def save_state():
    try:
        DATA_FILE.write_text(json.dumps(state, ensure_ascii=False, indent=2), encoding="utf-8")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è data.json: {e}")

load_state()

# ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï =====================
def today_str() -> str:
    return date.today().isoformat()

def ensure_user(user_id: int):
    suid = str(user_id)
    if suid not in state["users"]:
        state["users"][suid] = {
            "name": "",
            "nickname": "",
            "uid": "",
            "bday": "",
            "city": "",
            "tiktok": "",
            "joined_date": "",  # —É—Å—Ç–∞–Ω–æ–≤–∏–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
            "quote": "",
            "pipisa": 0.0,
            "last_pipisa": None,
            "last_prediction": None,
            "last_tarot": None,
            "married_to": None,
        }
    if user_id not in state.get("known_users", []):
        state["known_users"].append(user_id)

def tg_link_from_id(user_id: int, text: str = "—É—á–∞—Å—Ç–Ω–∏—Ü–∞") -> str:
    return f'<a href="tg://user?id={user_id}">{text}</a>'

def display_user(user_id: int) -> str:
    u = state["users"].get(str(user_id))
    if u and u.get("name"):
        return u["name"]  # –∑–¥–µ—Å—å —É–∂–µ mention_html
    # –∏–Ω–∞—á–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø–æ id
    return tg_link_from_id(user_id, "–¥–µ–≤–æ—á–∫–∞")

def is_url(s: str) -> bool:
    return s.startswith("http://") or s.startswith("https://")

# ===================== –ü–†–ò–í–ï–¢–°–¢–í–ò–ï –ù–û–í–´–• =====================
async def greet_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cmu = update.chat_member
    if not cmu:
        return
    old = cmu.old_chat_member.status
    new = cmu.new_chat_member.status
    if (old in ("left", "kicked")) and (new in ("member", "administrator", "creator")):
        user = cmu.new_chat_member.user
        ensure_user(user.id)
        save_state()
        text = (
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.mention_html()}‚ù£Ô∏è "
            f'–û–∑–Ω–∞–∫–æ–º—å—Å—è –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∫–ª–∞–Ω–∞ '
            f'(<a href="https://telegra.ph/Pravila-klana-%E0%A6%90OnlyGirls%E0%A6%90-05-29">–∑–¥–µ—Å—å</a>)ü´∂ '
            f"–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Å–µ–≥–¥–∞ –≤ –∑–∞–∫—Ä–µ–ø–µ‚ùóÔ∏è –ö–ª–∞–Ω–æ–≤–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞: ‡¶î"
        )
        await context.bot.send_message(chat_id=cmu.chat.id, text=text, parse_mode="HTML")

# ===================== /START –∏ /ABOUT =====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ensure_user(update.effective_user.id)
    save_state()
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ú–∞—Ç—å –ë–æ–≥–∏–Ω—å –¥–ª—è –∫–ª–∞–Ω–∞ OnlyGirls üíñ\n"
        "–ù–∞–ø–∏—à–∏ /about —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã."
    )

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ú® –ö–æ–º–∞–Ω–¥—ã:\n"
        "/editprofile ‚Äî –∑–∞–ø–æ–ª–Ω–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–ø–æ—à–∞–≥–æ–≤–æ)\n"
        "/profile ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/pipisa ‚Äî –≤—ã—Ä–∞—Å—Ç–∏—Ç—å/—É–º–µ–Ω—å—à–∏—Ç—å –ø–∏–ø–∏—Å—É (1 —Ä–∞–∑ –≤ –¥–µ–Ω—å)\n"
        "/top5 ‚Äî —Ç–æ–ø-5 –ø–æ –ø–∏–ø–∏—Å–µ\n"
        "/rating ‚Äî –ø–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–∏–ø–∏—Å\n"
        "/predskaz ‚Äî –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–Ω—è (1 —Ä–∞–∑ –≤ –¥–µ–Ω—å)\n"
        "/tarot ‚Äî –∫–∞—Ä—Ç–∞ –¢–∞—Ä–æ (1 —Ä–∞–∑ –≤ –¥–µ–Ω—å)\n"
        "/hugs [@—é–∑–µ—Ä] ‚Äî –æ–±–Ω–∏–º–∞—à–∫–∏ (–¥–ª—è –≤—Å–µ—Ö –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ)\n"
        "/lesbi ‚Äî –ª–µ—Å–±–∏-–ø–∞—Ä–∞ –¥–Ω—è (1 —Ä–∞–∑ –≤ –¥–µ–Ω—å)\n"
        "/love @—é–∑–µ—Ä ‚Äî —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
        "/acceptlove ‚Äî –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
        "/declinelove ‚Äî –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
        "/divorce ‚Äî –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–≤–æ–¥\n"
        "/acceptdivorce ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞–∑–≤–æ–¥\n"
        "/rules ‚Äî –ø—Ä–∞–≤–∏–ª–∞ –∫–ª–∞–Ω–∞ (—Å—Å—ã–ª–∫–∞)"
    )

# ===================== /RULES (—Å—Å—ã–ª–∫–∞) =====================
async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ö–æ—Ç–∏–∫, –ø—Ä–∞–≤–∏–ª–∞ –∫–ª–∞–Ω–∞ <a href="https://telegra.ph/Pravila-klana-%E0%A6%90OnlyGirls%E0%A6%90-05-29">–∑–¥–µ—Å—å</a> ü´∂',
        parse_mode="HTML"
    )

# ===================== –ü–†–û–§–ò–õ–¨ =====================
(
    STEP_NAME,
    STEP_NICK,
    STEP_UID,
    STEP_BDAY,
    STEP_CITY,
    STEP_TIKTOK,
    STEP_QUOTE
) = range(7)

def render_profile(u: dict) -> str:
    name = u.get("name") or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    nickname = u.get("nickname") or ""
    uid = u.get("uid") or ""
    bday = u.get("bday") or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    city = u.get("city") or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    tiktok = u.get("tiktok") or ""
    joined = u.get("joined_date") or ""
    quote = u.get("quote") or "‚Äî"
    pipisa = float(u.get("pipisa") or 0.0)

    # –í —á–∞—Ç–µ N –¥–Ω–µ–π
    days_line = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    if joined:
        try:
            d0 = datetime.strptime(joined, "%Y-%m-%d").date()
            days_line = f"{(date.today() - d0).days} –¥–Ω–µ–π"
        except Exception:
            days_line = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"

    # TikTok —Å—Ç—Ä–æ–∫–∞
    if tiktok:
        if is_url(tiktok):
            tt_line = f'üì≤ TikTok: <a href="{tiktok}">TikTok</a>'
        else:
            at = tiktok if tiktok.startswith("@") else f"@{tiktok}"
            tt_line = f"üì≤ TikTok: {at}"
    else:
        tt_line = "üì≤ TikTok: –Ω–µ —É–∫–∞–∑–∞–Ω"

    married_to = u.get("married_to")
    married_line = f"üíç –í –±—Ä–∞–∫–µ —Å {married_to}\n" if married_to else ""

    text = (
        f"üôã‚Äç‚ôÄÔ∏è –ò–º—è: {name}\n"
        f"üéÆ –ù–∏–∫ –≤ –∏–≥—Ä–µ: <code>{nickname}</code>\n"
        f"üî¢ UID: <code>{uid}</code>\n"
        f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {bday}\n"
        f"üèô –ì–æ—Ä–æ–¥: {city}\n"
        f"{tt_line}\n"
        f"üìÜ –í —á–∞—Ç–µ: {days_line}\n"
        f"üçÜ –ü–∏–ø–∏—Å–∞: {pipisa:.1f} —Å–º\n"
        f"{married_line}"
        f"üìù –î–µ–≤–∏–∑: {quote}"
    )
    return text

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    ensure_user(update.effective_user.id)
    u = state["users"].get(uid)
    await update.message.reply_text(render_profile(u), parse_mode="HTML")

async def editprofile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ensure_user(update.effective_user.id)
    context.user_data["profile_answers"] = {}
    await update.message.reply_text("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–∏–º—è)")
    return STEP_NAME

async def step_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile_answers"]["name"] = update.effective_user.mention_html()
    await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è –Ω–∏–∫ –≤ –∏–≥—Ä–µ?")
    return STEP_NICK

async def step_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile_answers"]["nickname"] = update.message.text.strip()
    await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è UID?")
    return STEP_UID

async def step_uid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile_answers"]["uid"] = update.message.text.strip()
    await update.message.reply_text("–ö–æ–≥–¥–∞ —É —Ç–µ–±—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2000 –∏–ª–∏ 01.01)")
    return STEP_BDAY

async def step_bday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile_answers"]["bday"] = update.message.text.strip()
    await update.message.reply_text("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")
    return STEP_CITY

async def step_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile_answers"]["city"] = update.message.text.strip()
    await update.message.reply_text("–û—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ TikTok –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–≤–æ–π –Ω–∏–∫ (@username):")
    return STEP_TIKTOK

async def step_tiktok(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile_answers"]["tiktok"] = update.message.text.strip()
    await update.message.reply_text("–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –¥–µ–≤–∏–∑–æ–º –∏–ª–∏ –ª—é–±–∏–º–æ–π —Ü–∏—Ç–∞—Ç–æ–π:")
    return STEP_QUOTE

async def step_quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile_answers"]["quote"] = update.message.text.strip()
    uid = str(update.effective_user.id)
    ensure_user(update.effective_user.id)

    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –æ—Ç–≤–µ—Ç—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    stored = state["users"][uid]
    for k, v in context.user_data["profile_answers"].items():
        stored[k] = v

    # –ï—Å–ª–∏ –Ω–µ—Ç joined_date ‚Äî –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è
    if not stored.get("joined_date"):
        stored["joined_date"] = today_str()

    save_state()
    await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ")
    return ConversationHandler.END

# ===================== /pipisa (1 —Ä–∞–∑ –≤ –¥–µ–Ω—å) =====================
PIPISA_UP_REACTIONS = [
    "–û–Ω–∞ —Å—Ç—Ä–µ–º–∏—Ç—Å—è –∫ –≤–µ—Ä—à–∏–Ω–∞–º! üìà",
    "–í–ø–µ—Ä–µ–¥ –∏ –≤—ã—à–µ ‚Äî –≥–æ—Ä–¥–∏–º—Å—è! ü•≥",
    "–¢–∞–∫ —Ä–∞—Å—Ç—ë—Ç —Ç–æ–ª—å–∫–æ –ª–µ–≥–µ–Ω–¥–∞! üåü",
    "–°–∏—è–µ—Ç –∏ —Ä–∞–¥—É–µ—Ç —Ö–æ–∑—è–π–∫—É! ‚ú®",
]
PIPISA_DOWN_REACTIONS = [
    "–ù–∏—á–µ–≥–æ, –∑–∞–≤—Ç—Ä–∞ –≤–µ—Ä–Ω—ë–º –ø–æ–∑–∏—Ü–∏–∏ üí™",
    "–ò–Ω–æ–≥–¥–∞ –∏ –≥–µ—Ä–æ—è–º –Ω—É–∂–µ–Ω –æ—Ç–¥—ã—Ö üåßÔ∏è",
    "–û–±–Ω–∏–º–µ–º ‚Äî –∏ –≤—Å—ë –ø—Ä–æ–π–¥—ë—Ç ü´Ç",
    "–°–º–µ–Ω–∏–º –≤–∞–π–± ‚Äî –ø–æ–π–¥—ë—Ç –≤–≤–µ—Ä—Ö üåà",
]

def _rand_delta():
    d = round(random.uniform(-10.0, 10.0), 1)
    if d == 0.0:
        d = 0.1 if random.random() > 0.5 else -0.1
    return d

async def pipisa(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    ensure_user(update.effective_user.id)
    u = state["users"][uid]

    if u.get("last_pipisa") == today_str():
        await update.message.reply_text("–ü–∏–ø–∏—Å—É –º–æ–∂–Ω–æ —Ä–∞—Å—Ç–∏—Ç—å/–º–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å! üå±")
        return

    delta = _rand_delta()
    new_val = round(float(u.get("pipisa", 0.0)) + delta, 1)
    if new_val < 0:
        new_val = 0.0

    u["pipisa"] = new_val
    u["last_pipisa"] = today_str()
    save_state()

    if delta > 0:
        phrase = random.choice([
            f"üçÜ –¢–≤–æ—è –ø–∏–ø–∏—Å–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ {delta:.1f} —Å–º! {random.choice(PIPISA_UP_REACTIONS)} –¢–µ–ø–µ—Ä—å: {new_val:.1f} —Å–º.",
            f"üçÜ –û–≥–æ! +{delta:.1f} —Å–º ‚Äî –≤–æ—Ç —ç—Ç–æ —Ä–æ—Å—Ç! {random.choice(PIPISA_UP_REACTIONS)} –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {new_val:.1f} —Å–º.",
        ])
    else:
        phrase = random.choice([
            f"üçÜ –û—É‚Ä¶ –ø–∏–ø–∏—Å–∞ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å –Ω–∞ {abs(delta):.1f} —Å–º. {random.choice(PIPISA_DOWN_REACTIONS)} –°–µ–π—á–∞—Å: {new_val:.1f} —Å–º.",
            f"üçÜ –ù–µ–º–Ω–æ–≥–æ –ø—Ä–æ—Å–µ–ª–∞ ({abs(delta):.1f} —Å–º). {random.choice(PIPISA_DOWN_REACTIONS)} –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {new_val:.1f} —Å–º.",
        ])
    await update.message.reply_text(phrase)

# ===================== –†–ï–ô–¢–ò–ù–ì–ò =====================
async def top5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = sorted(state["users"].items(), key=lambda kv: kv[1].get("pipisa", 0.0), reverse=True)[:5]
    if not rows:
        await update.message.reply_text("–†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç. –ü–æ–ª–∏–≤–∞–π –ø–∏–ø–∏—Å—É —á–∞—â–µ üå±")
        return
    text = "üèÜ –¢–û–ü-5 –ø–∏–ø–∏—Å –∫–ª–∞–Ω–∞:\n"
    for i, (uid, u) in enumerate(rows, 1):
        text += f"{i}. {u.get('name') or tg_link_from_id(int(uid), uid)}: {u.get('pipisa', 0.0):.1f} —Å–º\n"
    await update.message.reply_text(text, parse_mode="HTML")

async def rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = sorted(state["users"].items(), key=lambda kv: kv[1].get("pipisa", 0.0), reverse=True)
    if not rows:
        await update.message.reply_text("–†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç. –ü–æ–ª–∏–≤–∞–π –ø–∏–ø–∏—Å—É —á–∞—â–µ üå±")
        return
    text = "üìä –ü–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–∏–ø–∏—Å:\n"
    for i, (uid, u) in enumerate(rows, 1):
        text += f"{i}. {u.get('name') or tg_link_from_id(int(uid), uid)}: {u.get('pipisa', 0.0):.1f} —Å–º\n"
    await update.message.reply_text(text, parse_mode="HTML")

# ===================== –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø =====================
PREDICTIONS = [
    "–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –¥–µ–Ω—å ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ –æ–±–ª–∞—á–Ω–æ ‚òÅÔ∏è",
    "–£–ª—ã–±–∫–∞ —Ä–µ—à–∏—Ç –±–æ–ª—å—à–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—è üòä",
    "–î–µ–ª–∞–π –ø–æ –ª—é–±–≤–∏ ‚Äî –∏ –±—É–¥–µ—Ç –∫–∞–π—Ñ üíñ",
    "–í—Å–µ–ª–µ–Ω–Ω–∞—è —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ ‚ú®",
    "–¢—ã –≤–∏–¥–∏—à—å –±–æ–ª—å—à–µ, —á–µ–º –¥—Ä—É–≥–∏–µ ‚Äî –¥–æ–≤–µ—Ä—å—Å—è —Å–µ–±–µ üëÅÔ∏è",
    "–ú–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ —Ç–æ–∂–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥ üë£",
    "–°–ª—É—Ö–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Å–ª—É—Ö–∞–º–∏ ‚Äî –±—É–¥—å –≤—ã—à–µ üïäÔ∏è",
    "–ü—É—Å—Ç—å –¥—É—à–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ—Ç–∞–Ω—Ü—É–µ—Ç üíÉ",
    "–¢—ã ‚Äî —á—å—ë-—Ç–æ ¬´–ø–æ–≤–µ–∑–ª–æ¬ª üçÄ",
    "–°–∫–∞–∂–∏ —Å–µ–±–µ ¬´–º–æ–ª–æ–¥–µ—Ü¬ª ‚Äî —Ç—ã —ç—Ç–æ —É—Å–ª—ã—à–∏—à—å ü•∞",
    # ... –º–æ–∂–µ—à—å —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ –∂–µ–ª–∞–Ω–∏—é
]

async def predskaz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    ensure_user(update.effective_user.id)
    u = state["users"][uid]
    if u.get("last_prediction") == today_str():
        await update.message.reply_text("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–µ–≥–æ–¥–Ω—è!")
        return
    u["last_prediction"] = today_str()
    save_state()
    await update.message.reply_text(f"üîÆ {random.choice(PREDICTIONS)}")

# ===================== –¢–ê–†–û =====================
TAROT = [
    {
        "name": "–°–∏–ª–∞ ü¶Å",
        "upright_meaning": "—Å–º–µ–ª–æ—Å—Ç—å, —Ç–µ—Ä–ø–µ–Ω–∏–µ, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
        "reversed_meaning": "—Å–æ–º–Ω–µ–Ω–∏–µ, —Å—Ç—Ä–∞—Ö, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ",
        "upright_motto": "–Ø –º—è–≥–∫–æ —Å–∏–ª—å–Ω–∞.",
        "reversed_motto": "–Ø –ø—Ä–∏–∑–Ω–∞—é —Å—Ç—Ä–∞—Ö ‚Äî –∏ –∏–¥—É –¥–∞–ª—å—à–µ.",
        "upright_advice": "–°–µ–≥–æ–¥–Ω—è –¥–µ–π—Å—Ç–≤—É–π –∏–∑ —Å–ø–æ–∫–æ–π–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏. –¢–≤–æ—è —Å–∏–ª–∞ –≤ –º—è–≥–∫–æ—Å—Ç–∏ –∏ –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–µ.",
        "reversed_advice": "–í—Ä–µ–º—è –ø—Ä–∏–∑–Ω–∞—Ç—å —É—Å—Ç–∞–ª–æ—Å—Ç—å –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—è–¥–æ–º ‚Äî –ø–æ–ø—Ä–æ—Å–∏ –æ –ø–æ–º–æ—â–∏.",
    },
    {
        "name": "–ó–≤–µ–∑–¥–∞ üåü",
        "upright_meaning": "–Ω–∞–¥–µ–∂–¥–∞, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, –∏—Å—Ü–µ–ª–µ–Ω–∏–µ",
        "reversed_meaning": "–ø–µ—Å—Å–∏–º–∏–∑–º, –∏—Å—Ç–æ—â–µ–Ω–∏–µ, —Å–æ–º–Ω–µ–Ω–∏–µ",
        "upright_motto": "–í–æ –º–Ω–µ —Å–≤–µ—Ç.",
        "reversed_motto": "–Ø –∑–∞–∂–∏–≥–∞—é —Å–≤–æ–π —Å–≤–µ—Ç –∑–∞–Ω–æ–≤–æ.",
        "upright_advice": "–ù–∞–¥–µ–∂–¥–∞ ‚Äî —Ç–≤–æ–π –∫–æ–º–ø–∞—Å. –î–µ–ª–∞–π –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –∏ –≤–µ—Ä—å –≤ –ª—É—á—à–µ–µ.",
        "reversed_advice": "–ü–æ—Ä–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å —Å–µ–±–µ, —á—Ç–æ —Ç—ã –Ω–µ –æ–¥–Ω–∞. –ù–∞–π–¥–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –∏ –∑–∞–±–æ—Ç—ã.",
    },
    {
        "name": "–°–æ–ª–Ω—Ü–µ ‚òÄÔ∏è",
        "upright_meaning": "—Ä–∞–¥–æ—Å—Ç—å, —É—Å–ø–µ—Ö, –ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ",
        "reversed_meaning": "—Å–∞–º–æ–∫—Ä–∏—Ç–∏–∫–∞, —É–ø—Ä—è–º—Å—Ç–≤–æ, –∑–∞–¥–µ—Ä–∂–∫–∏",
        "upright_motto": "–Ø –≤—ã–±–∏—Ä–∞—é —Ä–∞–¥–æ—Å—Ç—å.",
        "reversed_motto": "–Ø –ø–æ–∑–≤–æ–ª—è—é —Å–µ–±–µ —Ç–µ–ø–ª–æ—Ç—É.",
        "upright_advice": "–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º —Å–≤–µ—Ç–æ–º. –î–µ–Ω—å –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç–∏.",
        "reversed_advice": "–£–º–µ–Ω—å—à–∏ –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ–±—è. –†–∞–¥–æ—Å—Ç—å –ø—Ä–∏–¥—ë—Ç, –µ—Å–ª–∏ –¥–∞—Ç—å –µ–π –º–µ—Å—Ç–æ.",
    },
    # ... –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –¥–æ–±–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞—Ä–∫–∞–Ω—ã –≤ —Ç–∞–∫–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ
]

async def tarot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    ensure_user(update.effective_user.id)
    u = state["users"][uid]
    if u.get("last_tarot") == today_str():
        await update.message.reply_text("üÉè –†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å!")
        return

    card = random.choice(TAROT)
    reversed_flag = random.choice([True, False])

    if reversed_flag:
        position = "–≤ –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏"
        meaning = card["reversed_meaning"]
        motto = card["reversed_motto"]
        advice = card["reversed_advice"]
    else:
        position = "–≤ –ø—Ä—è–º–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏"
        meaning = card["upright_meaning"]
        motto = card["upright_motto"]
        advice = card["upright_advice"]

    u["last_tarot"] = today_str()
    save_state()

    text = (
        f"üÉè –¢–µ–±–µ –≤—ã–ø–∞–ª–∞ –∫–∞—Ä—Ç–∞: <b>{card['name']}</b> ({position})\n"
        f"–ó–Ω–∞—á–µ–Ω–∏–µ: {meaning}\n"
        f"–î–µ–≤–∏–∑ –Ω–∞ –¥–µ–Ω—å: ¬´{motto}¬ª\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {advice}"
    )
    await update.message.reply_text(text, parse_mode="HTML")

# ===================== HUGS =====================
HUGS_POOL = [
    "ü§ó {a} –∫—Ä–µ–ø–∫–æ –æ–±–Ω—è–ª–∞ {b} ‚Äî —Ç–µ–ø–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É üß∏",
    "üíû {a} –Ω–µ–∂–Ω–æ –ø—Ä–∏–∂–∞–ª–∞—Å—å –∫ {b} ‚Äî –ø—É—Å—Ç—å —Ç—Ä–µ–≤–æ–≥–∏ —Ç–∞—é—Ç üå∑",
    "ü•∞ {a} —Å–æ–≥—Ä–µ–ª–∞ {b} —Å–≤–æ–∏–º–∏ –æ–±–Ω–∏–º–∞—à–∫–∞–º–∏ ‚Äî –∑–∞—Ä—è–¥–∏–ª–∞—Å—å –ª—é–±–æ–≤—å—é!",
    "ü´∂ {a} –∏ {b} ‚Äî —Å–µ–≥–æ–¥–Ω—è —Å–∞–º—ã–π –º–∏–ª—ã–π –¥—É—ç—Ç!",
    "–ö—Ç–æ –Ω–µ –æ–±–Ω–∏–º–µ—Ç—Å—è ‚Äî —Ç–æ—Ç –Ω–µ –∏–≥—Ä–∞–µ—Ç –≤ –∫–∞—Å—Ç–æ–º–∫–µ!",
    "ü´Ç –¢–æ–∫—Å–∏–∫–æ–≤ —Ç–æ–∂–µ –∏–Ω–æ–≥–¥–∞ –æ–±–Ω–∏–º–∞—é—Ç‚Ä¶ –ø–æ –≥–æ–ª–æ–≤–µ‚Ä¶ —Ç–∞–±—É—Ä–µ—Ç–∫–æ–π üôÉ",
    "–ü–µ—Ä–µ–¥–∞—é –º—è–≥–∫–æ—Å—Ç—å, –∑–∞–±–æ—Ç—É –∏ –ø–µ—á–µ–Ω—å–∫—É üç™ ‚Äî {a} ‚Üí {b}",
    "–ö—Ä–µ–ø–∫–æ-–∫—Ä–µ–ø–∫–æ –∏ –æ—á–µ–Ω—å –Ω–µ–∂–Ω–æ ‚Äî —Ç—Ä–µ–ø–µ—â–∏, –≥—Ä—É—Å—Ç—å! ü´Ç  {a} –æ–±–Ω—è–ª–∞ {b}",
    "–ü—É—Å—Ç—å —Ç—Ä–µ–≤–æ–≥–∏ —É–º–µ–Ω—å—à–∞—é—Ç—Å—è –Ω–∞ 50% –ø–æ—Å–ª–µ —ç—Ç–∏—Ö –æ–±—ä—è—Ç–∏–π üå∏  {a} –¥–ª—è {b}",
]

async def hugs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ensure_user(update.effective_user.id)
    me = update.effective_user
    if context.args:
        # –û–±–Ω–∏–º–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ @—é–∑–µ—Ä–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç
        target = context.args[0]
        msg = random.choice([
            f"ü§ó {me.mention_html()} –æ–±–Ω—è–ª–∞ {target}! –¢–µ–ø–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ üß∏",
            f"üíû {me.mention_html()} –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –æ–±—ä—è—Ç–∏—è {target}. –í—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ üå∑",
        ])
        await update.message.reply_text(msg, parse_mode="HTML")
        return

    # –†–∞–Ω–¥–æ–º–Ω–∞—è —Ü–µ–ª—å –∏–∑ known_users (–∫—Ä–æ–º–µ —Å–µ–±—è)
    pool = [uid for uid in state.get("known_users", []) if uid != me.id]
    if not pool:
        await update.message.reply_text("–û–±–Ω–∏–º–∞—à–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤ —á–∞—Ç–µ! ü´Ç")
        return
    target_id = random.choice(pool)
    a = me.mention_html()
    b = display_user(target_id)
    tpl = random.choice(HUGS_POOL)
    # –®–∞–±–ª–æ–Ω –º–æ–∂–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å {a}/{b} (–¥–≤–µ ¬´—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ¬ª —Ñ—Ä–∞–∑—ã –≤—ã—à–µ)
    if "{a}" in tpl or "{b}" in tpl:
        text = tpl.format(a=a, b=b)
    else:
        text = f"{a} –æ–±–Ω—è–ª–∞ {b} ‚Äî {tpl}"
    await update.message.reply_text(text, parse_mode="HTML")

# ===================== –õ–ï–°–ë–ò-–ü–ê–†–ê (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø—Ä–æ—Ñ–∏–ª—è) =====================
async def lesbi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ë–µ—Ä—ë–º –≤—Å–µ—Ö, –∫–æ–≥–æ –∑–Ω–∞–µ–º
    pool = list(set(state.get("known_users", [])))
    # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º –¥–≤–æ–µ
    if len(pool) < 2:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏—Ü –¥–ª—è –ø–∞—Ä—ã")
        return

    if state["last_lesbi_date"] == today_str() and state.get("last_lesbi_pair"):
        a, b = state["last_lesbi_pair"]
        await update.message.reply_text(
            f"üë≠ –ü–∞—Ä–∞ –¥–Ω—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞: {display_user(a)} + {display_user(b)} üíû",
            parse_mode="HTML"
        )
        return

    a, b = random.sample(pool, 2)
    state["last_lesbi_date"] = today_str()
    state["last_lesbi_pair"] = [a, b]
    save_state()

    lines = [
        "üåà –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –ª–µ—Å–±–∏-–ø–∞—Ä–∞: {a} –∏ {b} üíã",
        "ü´∂ –ö—Ç–æ –±—ã –º–æ–≥ –ø–æ–¥—É–º–∞—Ç—å! {a} –∏ {b} ‚Äî –ø–∞—Ä–∞ –¥–Ω—è!",
        "üíò –ê–º—É—Ä –ø–æ–ø–∞–ª —Ç–æ—á–Ω–æ –≤ —Ü–µ–ª—å! {a} –∏ {b} —Ç–µ–ø–µ—Ä—å –≤–º–µ—Å—Ç–µ üòç",
        "üíû –õ—é–±–æ–≤—å –≤–∏—Ç–∞–µ—Ç –≤ –≤–æ–∑–¥—É—Ö–µ: {a} + {b} = ‚ù§Ô∏è",
    ]
    msg = random.choice(lines).format(a=display_user(a), b=display_user(b))
    await context.bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode="HTML")

# ===================== –°–í–ê–î–¨–ë–´ / –†–ê–ó–í–û–î–´ =====================
async def love(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏, –∫–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: /love @username")
        return
    target_username = context.args[0].lstrip("@")
    proposer = update.effective_user.id
    ensure_user(proposer)

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ target –ø–æ username –≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö name (mention_html) ‚Äî —Ö–∞–∫: –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
    target_id = None
    for suid, u in state["users"].items():
        if u.get("name") and target_username in u["name"]:
            target_id = int(suid)
            break

    if not target_id:
        await update.message.reply_text("–ù–µ –Ω–∞—à–ª–∞ —É—á–∞—Å—Ç–Ω–∏—Ü—É —Å —Ç–∞–∫–∏–º username –≤ –ø—Ä–æ—Ñ–∏–ª—è—Ö. –ü–æ–ø—Ä–æ—Å–∏ –µ—ë —Å–¥–µ–ª–∞—Ç—å /editprofile.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞–∫–æ–≤
    if state["users"][str(proposer)].get("married_to"):
        await update.message.reply_text("–¢—ã —É–∂–µ –≤ –±—Ä–∞–∫–µ üíç")
        return
    if state["users"][str(target_id)].get("married_to"):
        await update.message.reply_text("–£—á–∞—Å—Ç–Ω–∏—Ü–∞ —É–∂–µ –≤ –±—Ä–∞–∫–µ üíç")
        return

    state["proposals"][str(target_id)] = proposer
    save_state()
    await context.bot.send_message(
        chat_id=CHAT_ID,
        text=f"üíç {update.effective_user.mention_html()} —Å–¥–µ–ª–∞–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ @{target_username}! "
             f"–û—Ç–≤–µ—Ç ‚Äî /acceptlove –∏–ª–∏ /declinelove",
        parse_mode="HTML"
    )

async def acceptlove(update: Update, context: ContextTypes.DEFAULT_TYPE):
    me = str(update.effective_user.id)
    if me not in state["proposals"]:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–±—è.")
        return
    proposer = state["proposals"].pop(me)
    ensure_user(proposer)
    ensure_user(int(me))
    # –°—Ç–∞–≤–∏–º –±—Ä–∞—á–Ω—ã–µ —Å–≤—è–∑–∏ (–ø–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–º—É –∏–º–µ–Ω–∏)
    state["users"][str(proposer)]["married_to"] = display_user(int(me))
    state["users"][me]["married_to"] = display_user(proposer)
    save_state()

    lines = [
        "üíç {a} –∏ {b} —Ç–µ–ø–µ—Ä—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∂–µ–Ω–∞ –∏ –∂–µ–Ω–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ",
        "üë∞‚Äç‚ôÄÔ∏èüë∞‚Äç‚ôÄÔ∏è –°—ã–≥—Ä–∞–ª–∏ —Å–≤–∞–¥—å–±—É: {a} + {b} = üíí –õ—é–±–æ–≤—å!",
        "ü•Ç –ü–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è —Å–µ–º–µ–π–Ω–∞—è –ø–∞—Ä–∞: {a} & {b}! –ü—É—Å—Ç—å –±—É–¥–µ—Ç —Å—á–∞—Å—Ç—å–µ! ü´∂",
        "üéä {a} –∏ {b} —Ç–µ–ø–µ—Ä—å —Å—É–ø—Ä—É–≥–∏ –≤ –Ω–∞—à–µ–º –∫–ª–∞–Ω–µ! –ù–µ–∂–Ω–æ—Å—Ç–∏ –∏ –æ–±–Ω–∏–º–∞—à–µ–∫! ü•∞",
    ]
    msg = random.choice(lines).format(a=display_user(proposer), b=display_user(int(me)))
    await context.bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode="HTML")

async def declinelove(update: Update, context: ContextTypes.DEFAULT_TYPE):
    me = str(update.effective_user.id)
    if me not in state["proposals"]:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–±—è.")
        return
    state["proposals"].pop(me)
    save_state()
    await update.message.reply_text("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")

async def divorce(update: Update, context: ContextTypes.DEFAULT_TYPE):
    me = str(update.effective_user.id)
    ensure_user(int(me))
    my = state["users"][me]
    if not my.get("married_to"):
        await update.message.reply_text("–¢—ã –Ω–µ –≤ –±—Ä–∞–∫–µ.")
        return

    # –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä—Ç–Ω—ë—Ä–∫—É –ø–æ name (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫)
    partner_id = None
    for suid, u in state["users"].items():
        if u.get("name") and u["name"] == my["married_to"]:
            partner_id = int(suid)
            break
    if not partner_id:
        await update.message.reply_text("–ù–µ –Ω–∞—à–ª–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∫—É –≤ –±–∞–∑–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∞–º.")
        return

    state["divorce_requests"][str(partner_id)] = int(me)
    save_state()
    await update.message.reply_text("–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–∞—Ä—Ç–Ω—ë—Ä–∫–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å /acceptdivorce.")

async def acceptdivorce(update: Update, context: ContextTypes.DEFAULT_TYPE):
    me = str(update.effective_user.id)
    if me not in state["divorce_requests"]:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–∞–∑–≤–æ–¥.")
        return
    other = state["divorce_requests"].pop(me)
    if str(other) in state["users"]:
        state["users"][str(other)]["married_to"] = None
    if me in state["users"]:
        state["users"][me]["married_to"] = None
    save_state()
    await context.bot.send_message(
        chat_id=CHAT_ID,
        text=f"üíî –†–∞–∑–≤–æ–¥! {display_user(other)} –∏ {display_user(int(me))} —Ä–∞—Å—Å—Ç–∞–ª–∏—Å—å.",
        parse_mode="HTML"
    )

# ===================== –î–ï–ù–¨ –†–û–ñ–î–ï–ù–ò–Ø (–µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞) =====================
def _parse_day_month(bday: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (day, month) –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å, –∏–Ω–∞—á–µ None."""
    if not bday:
        return None
    bday = bday.strip()
    for fmt in ("%d.%m.%Y", "%d.%m"):
        try:
            dt = datetime.strptime(bday, fmt)
            return dt.day, dt.month
        except Exception:
            pass
    return None

async def birthday_job(context: ContextTypes.DEFAULT_TYPE):
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –ø—Ä–æ–±–µ–≥–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤
    today = date.today()
    for suid, u in state["users"].items():
        dm = _parse_day_month(u.get("bday", ""))
        if not dm:
            continue
        d, m = dm
        if d == today.day and m == today.month:
            # –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —á–∞—Ç
            name = u.get("name") or tg_link_from_id(int(suid), "–¥–µ–≤–æ—á–∫–∞")
            text = f"üéÇ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {name}! –ü–æ–∂–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è, –ª—é–±–≤–∏ –∏ –ø–æ–±–µ–¥! ü•≥"
            try:
                await context.bot.send_message(chat_id=CHAT_ID, text=text, parse_mode="HTML")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ: {e}")

# ===================== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò –ó–ê–ü–£–°–ö =====================
def build_application():
    app = ApplicationBuilder().token(TOKEN).build()

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤—ã—Ö
    app.add_handler(ChatMemberHandler(greet_new_member, ChatMemberHandler.CHAT_MEMBER))

    # –ü—Ä–æ—Ñ–∏–ª—å (–ø–æ—à–∞–≥–æ–≤–æ)
    edit_conv = ConversationHandler(
        entry_points=[CommandHandler("editprofile", editprofile)],
        states={
            STEP_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_name)],
            STEP_NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_nick)],
            STEP_UID:  [MessageHandler(filters.TEXT & ~filters.COMMAND, step_uid)],
            STEP_BDAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_bday)],
            STEP_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_city)],
            STEP_TIKTOK: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_tiktok)],
            STEP_QUOTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_quote)],
        },
        fallbacks=[],
    )
    app.add_handler(edit_conv)
    app.add_handler(CommandHandler("profile", profile))

    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("about", about))
    app.add_handler(CommandHandler("rules", rules))

    # –§–∞–Ω
    app.add_handler(CommandHandler("pipisa", pipisa))
    app.add_handler(CommandHandler("top5", top5))
    app.add_handler(CommandHandler("rating", rating))
    app.add_handler(CommandHandler("hugs", hugs))
    app.add_handler(CommandHandler("lesbi", lesbi))

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ —Ç–∞—Ä–æ
    app.add_handler(CommandHandler("predskaz", predskaz))
    app.add_handler(CommandHandler("tarot", tarot))

    # –°–≤–∞–¥—å–±—ã/—Ä–∞–∑–≤–æ–¥—ã
    app.add_handler(CommandHandler("love", love))
    app.add_handler(CommandHandler("acceptlove", acceptlove))
    app.add_handler(CommandHandler("declinelove", declinelove))
    app.add_handler(CommandHandler("divorce", divorce))
    app.add_handler(CommandHandler("acceptdivorce", acceptdivorce))

    # JobQueue ‚Äî –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –î–† (–∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 09:00 –ø–æ —Å–µ—Ä–≤–µ—Ä—É)
    app.job_queue.run_daily(birthday_job, time(hour=9, minute=0))

    return app

if __name__ == "__main__":
    application = build_application()
    print("OnlyGirls bot –∑–∞–ø—É—â–µ–Ω‚Ä¶")
    application.run_polling(close_loop=False)
