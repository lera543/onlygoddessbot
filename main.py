# -*- coding: utf-8 -*-
import json
import logging
import random
from datetime import datetime, date, time
from pathlib import Path

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ChatMemberHandler,
    ConversationHandler, ContextTypes, filters
)

# ===================== –ù–ê–°–¢–†–û–ô–ö–ò =====================
TOKEN = "8215387975:AAHS_mMHzXBGtDVevEBiSwsLcLPChs7Yq7k"
CHAT_ID = -1001849339863
DATA_FILE = Path("data.json")

INFO_URL = "https://telegra.ph/Aktualnaya-informaciya-08-21"
RULES_URL = "https://telegra.ph/Pravila-klana-%E0%A6%90OnlyGirls%E0%A6%90-05-29"

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO
)
logger = logging.getLogger("OnlyGirlsBot")

# ===================== –•–†–ê–ù–ò–õ–ò–©–ï =====================
# users: {
#   user_id(str): {
#     "name"(mention_html), "username"(str),
#     "nickname","uid","bday","city","tiktok","quote",
#     "pipisa"(float), "pipisa_power"(int), "last_pipisa"(YYYY-MM-DD),
#     "last_prediction"(YYYY-MM-DD),
#     "duel_used_on"(YYYY-MM-DD), "duel_uses"(int)
#   }
# }
# known_users: [int, ...]
# last_lesbi_date: "YYYY-MM-DD"
# last_lesbi_pair: [user_id_a(int), user_id_b(int)]
state = {
    "users": {},
    "known_users": [],
    "last_lesbi_date": None,
    "last_lesbi_pair": None
}

def load_state():
    if DATA_FILE.exists():
        try:
            data = json.loads(DATA_FILE.read_text(encoding="utf-8"))
            state.update(data)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å data.json: {e}")

def save_state():
    try:
        DATA_FILE.write_text(json.dumps(state, ensure_ascii=False, indent=2), encoding="utf-8")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è data.json: {e}")

load_state()

def today_str() -> str:
    return date.today().isoformat()

def ensure_user(user_id: int, username: str = None, mention_html: str = None):
    suid = str(user_id)
    if suid not in state["users"]:
        state["users"][suid] = {
            "name": mention_html or "",
            "username": username or "",
            "nickname": "",
            "uid": "",
            "bday": "",
            "city": "",
            "tiktok": "",
            "quote": "",
            "pipisa": 0.0,
            "pipisa_power": 0,
            "last_pipisa": None,
            "last_prediction": None,
            "duel_used_on": None,
            "duel_uses": 0
        }
    else:
        if mention_html and not state["users"][suid].get("name"):
            state["users"][suid]["name"] = mention_html
        if username and not state["users"][suid].get("username"):
            state["users"][suid]["username"] = username
    if user_id not in state.get("known_users", []):
        state["known_users"].append(user_id)

def mention_from_id(user_id: int, fallback_text: str = "–¥–µ–≤–æ—á–∫–∞") -> str:
    suid = str(user_id)
    u = state["users"].get(suid)
    if u and u.get("name"):
        return u["name"]
    return f'<a href="tg://user?id={user_id}">{fallback_text}</a>'

def display_user(user_id: int) -> str:
    suid = str(user_id)
    u = state["users"].get(suid)
    if u and u.get("name"):
        return u["name"]
    if u and u.get("username"):
        return f'<a href="tg://user?id={user_id}">@{u["username"]}</a>'
    return f'<a href="tg://user?id={user_id}">–¥–µ–≤–æ—á–∫–∞</a>'

def is_url(s: str) -> bool:
    return s.startswith("http://") or s.startswith("https://")

# ===================== –¢–†–ï–ö–ï–† –õ–Æ–ë–´–• –°–û–û–ë–©–ï–ù–ò–ô =====================
async def track_seen_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user:
        return
    ensure_user(user.id, user.username, user.mention_html())
    save_state()

# ===================== –ü–†–ò–í–ï–¢–°–¢–í–ò–ï / –ü–†–û–©–ê–ù–ò–ï =====================
async def greet_or_bye(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cmu = update.chat_member
    if not cmu:
        return
    old = cmu.old_chat_member.status
    new = cmu.new_chat_member.status
    user = cmu.new_chat_member.user
    ensure_user(user.id, user.username, user.mention_html())
    if (old in ("left", "kicked")) and (new in ("member", "administrator", "creator")):
        text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.mention_html()}‚ù£Ô∏è –û–∑–Ω–∞–∫–æ–º—å—Å—è –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∫–ª–∞–Ω–∞ (<a href=\"{RULES_URL}\">–∑–¥–µ—Å—å</a>)ü´∂ –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Å–µ–≥–¥–∞ –≤ –∑–∞–∫—Ä–µ–ø–µ‚ùóÔ∏è –ö–ª–∞–Ω–æ–≤–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞: ‡¶î"
        await context.bot.send_message(chat_id=cmu.chat.id, text=text, parse_mode="HTML")
    elif (old in ("member", "administrator", "creator")) and (new in ("left", "kicked")):
        await context.bot.send_message(chat_id=cmu.chat.id, text=f"–ü–æ–∫–∞-–ø–æ–∫–∞, {user.mention_html()}üíó –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å–∫–æ—Ä–µ–µ!", parse_mode="HTML")
    save_state()

# ===================== /START /ABOUT /INFO /RULES =====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ensure_user(user.id, user.username, user.mention_html())
    save_state()
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ú–∞—Ç—å –ë–æ–≥–∏–Ω—å –¥–ª—è –∫–ª–∞–Ω–∞ OnlyGirlsüíñ –ù–∞–ø–∏—à–∏ /about —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã.")

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ú® –ö–æ–º–∞–Ω–¥—ã: /editprofile ‚Äî –∑–∞–ø–æ–ª–Ω–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–ø–æ—à–∞–≥–æ–≤–æ); /profile ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å; /pipisa ‚Äî –≤—ã—Ä–∞—Å—Ç–∏—Ç—å/—É–º–µ–Ω—å—à–∏—Ç—å –ø–∏–ø–∏—Å—É (1 —Ä–∞–∑ –≤ –¥–µ–Ω—å); /duel [@—é–∑–µ—Ä –∏–ª–∏ reply] ‚Äî –ø–∏–ø–∏—Å–æ–≤–∞—è –¥—É—ç–ª—å (–¥–æ 3 —Ä–∞–∑/–¥–µ–Ω—å); /top5 ‚Äî —Ç–æ–ø-5 –ø–æ –ø–∏–ø–∏—Å–µ; /rating ‚Äî –ø–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–∏–ø–∏—Å; /predskaz ‚Äî –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–Ω—è (1 —Ä–∞–∑ –≤ –¥–µ–Ω—å); /compliment [@—é–∑–µ—Ä] ‚Äî –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç; /hugs [@—é–∑–µ—Ä] ‚Äî –æ–±–Ω–∏–º–∞—à–∫–∏; /lesbi ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è –ø–∞—Ä–æ—á–∫–∞ –¥–Ω—è; /role [@—é–∑–µ—Ä] ‚Äî –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è —Å–∞–º–∞—è‚Ä¶; /info ‚Äî –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è; /rules ‚Äî –ø—Ä–∞–≤–∏–ª–∞ –∫–ª–∞–Ω–∞.")

async def info_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f'–ê–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–ª–∞–Ω—É, –∫–∞—Å—Ç–æ–º–∫–∞–º –∏ —Ç.–¥ —Å–º–æ—Ç—Ä–∏ <a href="{INFO_URL}">–∑–¥–µ—Å—åüñ§</a>', parse_mode="HTML")

async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f'–ö–æ—Ç–∏–∫, –ø—Ä–∞–≤–∏–ª–∞ –∫–ª–∞–Ω–∞ <a href="{RULES_URL}">–∑–¥–µ—Å—å</a>ü´∂', parse_mode="HTML")

# ===================== –ü–†–û–§–ò–õ–¨ =====================
(
    STEP_NAME,
    STEP_NICK,
    STEP_UID,
    STEP_BDAY,
    STEP_CITY,
    STEP_TIKTOK,
    STEP_QUOTE
) = range(7)

def render_profile(u: dict) -> str:
    name = u.get("name") or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    nickname = u.get("nickname") or ""
    uid = u.get("uid") or ""
    bday = u.get("bday") or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    city = u.get("city") or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    tiktok = u.get("tiktok") or ""
    quote = u.get("quote") or "‚Äî"
    pipisa = float(u.get("pipisa") or 0.0)

    if tiktok:
        if is_url(tiktok):
            tt_line = f'üì≤TikTok: <a href="{tiktok}">TikTok</a>'
        else:
            at = tiktok if tiktok.startswith("@") else f"@{tiktok}"
            tt_line = f"üì≤TikTok: {at}"
    else:
        tt_line = "üì≤TikTok: –Ω–µ —É–∫–∞–∑–∞–Ω"

    text = (
        f"üôã‚Äç‚ôÄÔ∏è–ò–º—è: {name}\n"
        f"üéÆ–ù–∏–∫ –≤ –∏–≥—Ä–µ: <code>{nickname}</code>\n"
        f"üî¢UID: <code>{uid}</code>\n"
        f"üéÇ–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {bday}\n"
        f"üèô–ì–æ—Ä–æ–¥: {city}\n"
        f"{tt_line}\n"
        f"üçÜ–ü–∏–ø–∏—Å–∞: {pipisa:.1f} —Å–º\n"
        f"üìù–î–µ–≤–∏–∑: {quote}"
    )
    return text

async def profile_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    ensure_user(update.effective_user.id, update.effective_user.username, update.effective_user.mention_html())
    u = state["users"].get(uid)
    await update.message.reply_text(render_profile(u), parse_mode="HTML")

async def editprofile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ensure_user(update.effective_user.id, update.effective_user.username, update.effective_user.mention_html())
    context.user_data["profile_answers"] = {}
    await update.message.reply_text("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–∏–º—è)")
    return STEP_NAME

async def step_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile_answers"]["name"] = update.effective_user.mention_html()
    await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è –Ω–∏–∫ –≤ –∏–≥—Ä–µ?")
    return STEP_NICK

async def step_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile_answers"]["nickname"] = update.message.text.strip()
    await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è UID?")
    return STEP_UID

async def step_uid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile_answers"]["uid"] = update.message.text.strip()
    await update.message.reply_text("–ö–æ–≥–¥–∞ —É —Ç–µ–±—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2000 –∏–ª–∏ 01.01)")
    return STEP_BDAY

async def step_bday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile_answers"]["bday"] = update.message.text.strip()
    await update.message.reply_text("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")
    return STEP_CITY

async def step_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile_answers"]["city"] = update.message.text.strip()
    await update.message.reply_text("–û—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ TikTok –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–≤–æ–π –Ω–∏–∫ (@username):")
    return STEP_TIKTOK

async def step_tiktok(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile_answers"]["tiktok"] = update.message.text.strip()
    await update.message.reply_text("–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –¥–µ–≤–∏–∑–æ–º –∏–ª–∏ –ª—é–±–∏–º–æ–π —Ü–∏—Ç–∞—Ç–æ–π:")
    return STEP_QUOTE

async def step_quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile_answers"]["quote"] = update.message.text.strip()
    suid = str(update.effective_user.id)
    ensure_user(update.effective_user.id, update.effective_user.username, update.effective_user.mention_html())
    stored = state["users"][suid]
    for k, v in context.user_data["profile_answers"].items():
        stored[k] = v
    save_state()
    await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω‚úÖ")
    return ConversationHandler.END

# ===================== –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø (200 —Å—Ç—Ä–æ–∫) =====================
PREDICTIONS = [
    "–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –¥–µ–Ω—å ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ –æ–±–ª–∞—á–Ω–æ‚òÅÔ∏è",
    "–£–ª—ã–±–∫–∞ —Ä–µ—à–∏—Ç –±–æ–ª—å—à–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—èüòä",
    "–î–µ–ª–∞–π –ø–æ –ª—é–±–≤–∏ –∏ –±—É–¥–µ—Ç –∫–∞–π—Ñüíñ",
    "–í—Å–µ–ª–µ–Ω–Ω–∞—è —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ‚ú®",
    "–¢—ã –≤–∏–¥–∏—à—å –±–æ–ª—å—à–µ, —á–µ–º –¥—Ä—É–≥–∏–µ ‚Äî –¥–æ–≤–µ—Ä—å—Å—è —Å–µ–±–µüëÅÔ∏è",
    "–ú–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ —Ç–æ–∂–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥üë£",
    "–°–ª—É—Ö–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Å–ª—É—Ö–∞–º–∏ ‚Äî –±—É–¥—å –≤—ã—à–µüïäÔ∏è",
    "–ü—É—Å—Ç—å –¥—É—à–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ—Ç–∞–Ω—Ü—É–µ—ÇüíÉ",
    "–¢—ã ‚Äî —á—å—ë-—Ç–æ ¬´–ø–æ–≤–µ–∑–ª–æ¬ªüçÄ",
    "–°–º–µ–ª–æ—Å—Ç—å –±—É–¥–µ—Ç –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∞üî•",
    "–¢—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞ —É–∂–µ —Å–µ–π—á–∞—Å, –Ω–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π –∂–∏–∑–Ω—å –Ω–∞ –ø–æ—Ç–æ–ºüå∏",
    "–¢–≤–æ—è –º—è–≥–∫–æ—Å—Ç—å ‚Äî —Ç–≤–æ—è —Å–∏–ª–∞ü™∑",
    "–°–¥–µ–ª–∞–π –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ –∏ –ø–æ–ª—É—á–∏—à—å –±–æ–ª—å—à–µüí´",
    "–°–º–æ—Ç—Ä–∏ —à–∏—Ä–µ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä—è–¥–æ–ºüî≠",
    "–¢–µ–±–µ –ø–æ–≤–µ–∑—ë—Ç –≤ —Ç–æ–º, —á—Ç–æ –≤–∞–∂–Ω–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µüéØ",
    "–°–µ–≥–æ–¥–Ω—è —Ç—ã ‚Äî –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –¥–ª—è –∫–æ–≥–æ-—Ç–æüåü",
    "–ü—É—Å—Ç—å –º–∏—Ä —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –∫ —Ç–µ–±–µ –¥–æ–±—Ä–µ–µü§ç",
    "–ù–∞–π–¥–∏ 10 –º–∏–Ω—É—Ç —Ç–∏—à–∏–Ω—ã, —ç—Ç–æ –∏–∑–º–µ–Ω–∏—Ç –¥–µ–Ω—åüïØÔ∏è",
    "–¢–≤–æ—è –∏–Ω—Ç—É–∏—Ü–∏—è –ø–æ–¥—Å–∫–∞–∂–µ—Ç –≤–µ—Ä–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Çüß≠",
    "–¢—ã —É–º–µ–µ—à—å –±–æ–ª—å—à–µ, —á–µ–º –¥—É–º–∞–µ—à—åüöÄ",
    "–°–µ–≥–æ–¥–Ω—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è –ª—É—á—à–µ, —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—åüåà",
    "–°—á–∞—Å—Ç—å–µ —É–∂–µ –ø–æ–¥ –±–æ–∫–æ–º ‚Äî –∑–∞–º–µ—Ç—å –µ–≥–æüîé",
    "–ü–æ–±–∞–ª—É–π —Å–µ–±—è –º–∞–ª–µ–Ω—å–∫–æ–π —Ä–∞–¥–æ—Å—Ç—å—éüç∞",
    "–í–¥–æ—Ö–Ω–∏ –≥–ª—É–±–∂–µ –∏ —Å—Ç–∞–Ω–µ—Ç –ª–µ–≥—á–µüå¨Ô∏è",
    "–¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π –∏–¥—Ç–∏üõ§Ô∏è",
    "–ü–æ–ø—Ä–æ—Å–∏ –æ –ø–æ–º–æ—â–∏ –∏ –µ—ë –¥–∞–¥—É—Çü§ù",
    "–°–∫–∞–∂–∏ ¬´–¥–∞¬ª –Ω–æ–≤–æ–º—É —à–∞–Ω—Å—ÉüéÅ",
    "–¢—ã —Å–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ –∫—Ä–∞—Å–∏–≤–∞—è ‚Äî —Å–∏—è–µ—à—å –∏–∑–Ω—É—Ç—Ä–∏‚ú®",
    "–¢–≤–æ—è —É–ª—ã–±–∫–∞ ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ª—É—á —Å–æ–ª–Ω—Ü–∞‚òÄÔ∏è",
    "–í —Ç–≤–æ—ë–º –≤–∑–≥–ª—è–¥–µ –∫–æ—Å–º–æ—Å ‚Äî –µ–≥–æ —Ö–æ—á–µ—Ç—Å—è –∏–∑—É—á–∞—Ç—åüåå",
    "–¢–µ–±–µ –æ—á–µ–Ω—å –∏–¥—ë—Ç —Ç–≤–æ—è –º—è–≥–∫–æ—Å—Ç—å –∏ –Ω–µ–∂–Ω–æ—Å—Ç—åü™∑",
    "–¢—ã –∏–¥—ë—à—å –∏ –º–∏—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —ç—Å—Ç–µ—Ç–∏—á–Ω–µ–µüé®",
    "–¢–≤–æ—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å ‚Äî –ª—É—á—à–∏–π –º–∞–∫–∏—è–∂üíÑ",
    "–¢—ã –≤—ã–≥–ª—è–¥–∏—à—å —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ –ª—é–±–∏—à—å —Å–µ–±—è –∏ —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æüíñ",
    "–¢–≤–æ—ë —á—É–≤—Å—Ç–≤–æ —Å—Ç–∏–ª—è —Å–µ–≥–æ–¥–Ω—è –Ω–∞ –≤—ã—Å–æ—Ç–µüëó",
    "–£ —Ç–µ–±—è —Ä–µ–¥–∫–∞—è –∫—Ä–∞—Å–æ—Ç–∞ ‚Äî —Ç—ë–ø–ª–∞—è –∏ —á–µ—Å—Ç–Ω–∞—èü§ç",
    "–° —Ç–æ–±–æ–π —Ä—è–¥–æ–º —Ö–æ—á–µ—Ç—Å—è —Å—Ç–∞—Ç—å –ª—É—á—à–µ‚ú®",
    "–£ —Ç–µ–±—è –∫—Ä–∞—Å–∏–≤—ã–µ –º—ã—Å–ª–∏ ‚Äî –æ–Ω–∏ –æ—Ç—Ä–∞–∂–∞—é—Ç—Å—è –≤ –≥–ª–∞–∑–∞—ÖüëÅÔ∏è",
    "–¢—ã –≤—ã–≥–ª—è–¥–∏—à—å —Ç–∞–∫, –±—É–¥—Ç–æ —Ç–µ–±–µ –≤—Å—ë –ø–æ —Å–∏–ª–∞–ºüî•",
    "–¢—ã –∫–∞–∫ —ç—Å—Ç–µ—Ç–∏—á–Ω—ã–π —Ñ–∏–ª—å–º ‚Äî –Ω–∞ —Ç–µ–±—è —Ö–æ—á–µ—Ç—Å—è —Å–º–æ—Ç—Ä–µ—Ç—åüéûÔ∏è",
    "–¢—ã —Å–≤–µ—Ç–∏—à—å—Å—è –∏ —ç—Ç–æ –Ω–µ —Ö–∞–π–ª–∞–π—Ç–µ—Ä‚ú®",
    "–¢–≤–æ—è –º–∏–º–∏–∫–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π –≤–∏–¥ –∏—Å–∫—É—Å—Å—Ç–≤–∞üé≠",
    "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å –±—ã—Ç—å –±–µ—Ä–µ–∂–Ω–µ–µ –∫ —Å–µ–±–µüåø",
    "–¢–≤–æ—è –∫—Ä–∞—Å–æ—Ç–∞ ‚Äî —ç—Ç–æ –ø—Ä–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ –∏ —Ç–µ–ø–ª–æüè°",
    "–¢—ã –∫–∞–∫ —É—Ç—Ä–æ –≤ –≤—ã—Ö–æ–¥–Ω–æ–π: —Å–ø–æ–∫–æ–π–Ω–æ –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ‚òïÔ∏è",
    "–° —Ç–æ–±–æ–π —Ä—è–¥–æ–º –¥–∞–∂–µ –∑–µ—Ä–∫–∞–ª–∞ —É–ª—ã–±–∞—é—Ç—Å—èü™û",
    "–¢—ã –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ ‚Äî –∏ —ç—Ç–æ –∑–∞–º–µ—Ç–Ω–æüåà",
    "–í—ã–±–µ—Ä–∏ –º–∞–ª–µ–Ω—å–∫—É—é —Ü–µ–ª—å ‚Äî –∏ –ø–æ—Ä–∞–¥—É–π —Å–µ–±—è –ø–æ–±–µ–¥–æ–πüèÅ",
    "–ï—Å–ª–∏ —Å—Ç—Ä–∞—à–Ω–æ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–¥–µ–ª–∞–π –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥üêæ",
    "–°–¥–µ–ª–∞–π —Å–µ–≥–æ–¥–Ω—è —Ç–æ, –∑–∞ —á—Ç–æ –∑–∞–≤—Ç—Ä–∞ —Å–∫–∞–∂–µ—à—å —Å–µ–±–µ —Å–ø–∞—Å–∏–±–æüíå",
    "–°–æ—Ö—Ä–∞–Ω–∏ —ç–Ω–µ—Ä–≥–∏—é –¥–ª—è –≤–∞–∂–Ω–æ–≥–æ ‚Äî –æ—Å—Ç–∞–ª—å–Ω–æ–µ –º–æ–∂–Ω–æ –æ—Ç–ª–æ–∂–∏—Ç—åüß∫",
    "–¢—ã –º–æ–∂–µ—à—å –º—è–≥–∫–æ, –Ω–æ —É–≤–µ—Ä–µ–Ω–Ω–æ ‚Äî –∏ —ç—Ç–æ —Å–∏–ª–∞üßò",
    "–¢–≤–æ—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –ª—ë–≥–∫–æ–π –∏ –¥–æ–±—Ä–æ–πüçÉ",
    "–°–æ–º–Ω–µ–Ω–∏—è ‚Äî —ç—Ç–æ —à—É–º. –¢–≤–æ–π –≥–æ–ª–æ—Å ‚Äî –≤–∞–∂–Ω–µ–µüîä",
    "–û—Ç–ø—É—Å—Ç–∏ –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º ‚Äî –Ω–∞—á–Ω–∏ –∫–∞–∫ –ø–æ–ª—É—á–∞–µ—Ç—Å—èü™Ñ",
    "–°–¥–µ–ª–∞–π –ø–∞—É–∑—É ‚Äî –∏ –ø–æ–π–º—ë—à—å, –∫—É–¥–∞ –∏–¥—Ç–∏ –¥–∞–ª—å—à–µüõë",
    "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∫ –∫–æ—Ç–æ—Ä—ã–º –∏–¥—ë—à—åüåü",
    "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –Ω–∞ –æ–¥–Ω–æ–º ‚Äî –∏ —É–≤–∏–¥–∏—à—å –ø—Ä–æ–≥—Ä–µ—Å—ÅüéØ",
    "–ü–æ–∑–≤–æ–ª—å —Å–µ–±–µ –æ—à–∏–±–∞—Ç—å—Å—è ‚Äî —ç—Ç–æ —á–∞—Å—Ç—å –ø—É—Ç–∏üß©",
    "–°–æ—Ö—Ä–∞–Ω—è–π —Ç–µ–º–ø, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π –¥—ã—à–∞—Ç—åüå¨Ô∏è",
    "–°—Ä–∞–≤–Ω–∏–≤–∞–π —Å–µ–±—è —Ç–æ–ª—å–∫–æ —Å —Å–æ–±–æ–π –≤—á–µ—Ä–∞üîÅ",
    "–¢—ã —É–∂–µ –º–Ω–æ–≥–æ–µ –ø—Ä–æ—à–ª–∞ ‚Äî —ç—Ç–æ —Ç–≤–æ–π —Ä–µ—Å—É—Ä—Åüß±",
    "–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π 15 –º–∏–Ω—É—Ç –¥–ª—è –º–µ—á—Ç—ã ‚Äî —ç—Ç–æ –≤–∞–∂–Ω–æüí≠",
    "–ó–∞–º–µ—Ç—å, —Å–∫–æ–ª—å–∫–æ —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ ‚Äî —ç—Ç–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Çüìà",
    "–¢—ã –Ω–µ –æ–±—è–∑–∞–Ω–∞ –±—ã—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–π ‚Äî –ø—Ä–æ—Å—Ç–æ –±—É–¥—å —Å–æ–±–æ–πü§ç",
    "–î–æ–≤–µ—Ä—å—Å—è –ø—Ä–æ—Ü–µ—Å—Å—É ‚Äî –æ–Ω –≤–µ–¥—ë—Ç –∫—É–¥–∞ –Ω—É–∂–Ω–æüó∫Ô∏è",
    "–°–µ–≥–æ–¥–Ω—è —Ö–æ—Ä–æ—à–∏–π –¥–µ–Ω—å –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –Ω–æ–≤–æ–≥–æ —à–∞–≥–∞üöÄ",
    "–¢—ã ‚Äî —á—å—ë-—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—èüåü",
    "–ö—Ä–∞—Å–æ—Ç–∞ —Ç–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤–∞–∂–Ω–µ–µ –º–Ω–µ–Ω–∏–π –¥—Ä—É–≥–∏—Öüí´",
    "–ü–æ–¥–∞—Ä–∏ —Å–µ–±–µ —Å–ø–æ–∫–æ–π–Ω—ã–π –≤–µ—á–µ—Ä ‚Äî —Ç—ã –∑–∞—Å–ª—É–∂–∏–ª–∞üïØÔ∏è",
    "–ú–∏—Ä –¥—Ä—É–∂–µ–ª—é–±–Ω–µ–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—è ‚Äî –ø–æ—Å–º–æ—Ç—Ä–∏ –≤–æ–∫—Ä—É–≥üëÄ",
    "–¢–≤–æ—ë —Å–µ—Ä–¥—Ü–µ –∑–Ω–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã ‚Äî –ø—Ä–∏—Å–ª—É—à–∞–π—Å—èüíì",
    "–¢–µ–ø–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –¥–∞—ë—à—å, –≤–µ—Ä–Ω—ë—Ç—Å—è —Å–∏–ª—å–Ω–µ–µüî•",
    "–£ —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è –ª—É—á—à–µ, —á–µ–º —Ç—ã –¥—É–º–∞–µ—à—å‚úÖ",
    "–õ–∞—Å–∫–æ–≤–æ—Å—Ç—å –∫ —Å–µ–±–µ ‚Äî –Ω–µ –∫–∞–ø—Ä–∏–∑, –∞ –æ–ø–æ—Ä–∞ü´∂",
    "–°–¥–µ–ª–∞–π –ø–æ –ª—é–±–≤–∏ ‚Äî –∏ –≤—Å—ë —Å–ª–æ–∂–∏—Ç—Å—èüå∏",
    "–û—Å—Ç–∞–≤—å –º–µ—Å—Ç–æ –¥–ª—è —á—É–¥–∞ ‚Äî –æ–Ω–æ –ª—é–±–∏—Ç —Ç–∏—à–∏–Ω—É‚ú®",
    "–¢—ã ‚Äî —Ü–µ–Ω–Ω–æ—Å—Ç—å –±–µ–∑ —É—Å–ª–æ–≤–∏–πüíé",
    "–ù–∏–∫—Ç–æ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –≥–∞—Å–∏—Ç—å —Ç–≤–æ–π —Å–≤–µ—ÇüïØÔ∏è",
    "–¢–æ, —á—Ç–æ —Ç–≤–æ—ë, –Ω–∞–π–¥—ë—Ç —Ç–µ–±—èüîí",
    "–ë—É–¥—å –±–µ—Ä–µ–∂–Ω–∞ –∫ —Å–µ–±–µ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∫ –ª—É—á—à–µ–π –ø–æ–¥—Ä—É–≥–µü§ç",
    "–¢—ã ‚Äî —Ö–æ—Ä–æ—à–∏–π —á–µ–ª–æ–≤–µ–∫, —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æü´∂",
    "–ú–∞–ª–µ–Ω—å–∫–∞—è –∑–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ ‚Äî –±–æ–ª—å—à–∞—è –ø–æ–±–µ–¥–∞üèÜ",
    "–°–ª—É—à–∞–π —Ç–µ–ª–æ ‚Äî –æ–Ω–æ –º—É–¥—Ä–æüßò‚Äç‚ôÄÔ∏è",
    "–¢—ã —É–º–µ–µ—à—å –∑–∞–º–µ—á–∞—Ç—å –∫—Ä–∞—Å–æ—Ç—É ‚Äî —ç—Ç–æ –¥–∞—Äüé®",
    "–°–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –ø–æ–≤–æ–¥ –∏—Å–∫—Ä–µ–Ω–Ω–µ —É–ª—ã–±–Ω—É—Ç—å—Å—èüôÇ",
    "–í—ã–±–∏—Ä–∞–π –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±–∏—Ä–∞—é—Ç —Ç–µ–±—èü§ù",
    "–ù–µ –±–æ–π—Å—è –ø—Ä–æ—Å–∏—Ç—å ‚Äî —Ç—ã –¥–æ—Å—Ç–æ–π–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏üíå",
    "–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è —É–∂–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞, –∞ –±—É–¥–µ—Ç –µ—â—ë –ª—É—á—à–µüìñ",
    "–û—Ç–ø—É—Å—Ç–∏ —á—É–∂–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ‚Äî —Ç–µ–±–µ —Å—Ç–∞–Ω–µ—Ç –ª–µ–≥—á–µüéà",
    "–ì–æ–≤–æ—Ä–∏ ¬´–Ω–µ—Ç¬ª —Å–ø–æ–∫–æ–π–Ω–æ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ‚õîÔ∏è",
    "–¢—ã –Ω–µ –æ–±—è–∑–∞–Ω–∞ –±—ã—Ç—å —É–¥–æ–±–Ω–æ–π ‚Äî –±—É–¥—å –Ω–∞—Å—Ç–æ—è—â–µ–πüåπ",
    "–° –∫–∞–∂–¥—ã–º —à–∞–≥–æ–º —Ç—ã –±–ª–∏–∂–µ –∫ –∂–µ–ª–∞–µ–º–æ–º—Éüß≠",
    "–†–∞–∑—Ä–µ—à–∏ —Å–µ–±–µ –æ—Ç–¥—ã—Ö –±–µ–∑ —á—É–≤—Å—Ç–≤–∞ –≤–∏–Ω—ãüõå",
    "–°–µ–≥–æ–¥–Ω—è —Ç–µ–±–µ –ø–æ–≤–µ–∑—ë—Ç —Ç–∞–º, –≥–¥–µ —Ç—ã —Å–º–µ–ª–µ–µ –≤—Å–µ–≥–æüî•",
    "–¢—ã ‚Äî –º—è–≥–∫–∞—è —Å–∏–ª–∞, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è–µ—Ç –º–∏—ÄüïäÔ∏è",
    "–¢–≤–æ—è –¥–æ–±—Ä–æ—Ç–∞ ‚Äî –æ–≥—Ä–æ–º–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—åü§ç",
    "–¢—ã —É–º–µ–µ—à—å —Å–ª—É—à–∞—Ç—å —Å–µ–±—è ‚Äî —ç—Ç–æ —Å—É–ø–µ—Ä—Å–∏–ª–∞ü¶∏‚Äç‚ôÄÔ∏è",
    "–ù–µ–±–æ —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ‚òÄÔ∏è",
    "–¢—ã –∫—Ä–∞—Å–∏–≤–∞—è, —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤–∞—è –∏ –¥–æ—Å—Ç–æ–π–Ω–∞—è –≤—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æüíñ",
    "–ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –º–Ω–æ–≥–æ —Ç—ë–ø–ª—ã—Ö —Å–ª–æ–≤ –∏ –º–∞–ª–µ–Ω—å–∫–∏—Ö —á—É–¥–µ—Å‚ú®",
    "–£ —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–∞–≤–æ –∑–∞–º–µ–¥–ª–∏—Ç—å—Å—è‚è∏Ô∏è",
    "–¢—ã ‚Äî —Ç–∞, –∫—Ç–æ —Å–ø—Ä–∞–≤–∏—Ç—Å—è. –í—Å–µ–≥–¥–∞üí™",
    "–°—Ç–∞–Ω—å —Å–µ–±–µ –ª—É—á—à–µ–π –ø–æ–¥—Ä—É–≥–æ–π ‚Äî —ç—Ç–æ –∏–∑–º–µ–Ω–∏—Ç –≤—Å—ëüíû",
    "–î–æ–≤–µ—Ä—å—Å—è –ø—Ä–æ—Ü–µ—Å—Å—É ‚Äî –æ–Ω —Ç–µ–±—è –Ω–µ –ø–æ–¥–≤–µ–¥—ë—Çüß≠",
    "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –º—è–≥–∫–æ—Å—Ç–∏ –∏ —É–≤–∞–∂–µ–Ω–∏—èü§ç",
    "–°–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞–π —á—Ç–æ-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–±—èüéÅ",
    "–¢—ã ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ä—è–¥–æ–ºüåü",
    "–°–º–µ—Ö —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–¥–ª–∏—Ç –¥–µ–Ω—å ‚Äî –Ω–∞–π–¥–∏ –ø–æ–≤–æ–¥üòÇ",
    "–¢—ã —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –Ω–µ –Ω—É–∂–Ω–æ –¥–æ–∫–∞–∑—ã–≤–∞—Ç—å‚öñÔ∏è",
    "–ú–∏—Ä —Å—Ç–∞–Ω–µ—Ç –¥–æ–±—Ä–µ–µ –æ—Ç —Ç–≤–æ–µ–π –¥–æ–±—Ä–æ—Ç—ãü´∞",
    "–ü—É—Å—Ç—å —Ç–≤–æ—ë —Å–µ—Ä–¥—Ü–µ —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç —Å–ø–æ–∫–æ–π–Ω–æüíó",
    "–°–¥–µ–ª–∞–π –ø–∞—É–∑—É, –ø–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ —Ä—è–¥–æ–ºüå§Ô∏è",
    "–¢—ã —É–º–µ–µ—à—å –ª—é–±–∏—Ç—å ‚Äî –Ω–∞—á–Ω–∏ —Å —Å–µ–±—èüíò",
    "–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ —É—Å–ø–µ—Ç—å –≤—Å—ëüï∞Ô∏è",
    "–¢—ã ‚Äî –Ω–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ. –¢—ã ‚Äî —Ç—ãüí´",
    "–°–µ–≥–æ–¥–Ω—è –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ –≤—Å—ë —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–∞üß©",
    "–°–∞–º–∞—è —Å–∏–ª—å–Ω–∞—è ‚Äî —ç—Ç–æ —Ç—ã, –∫–æ–≥–¥–∞ –¥–æ–±—Ä–∞ –∫ —Å–µ–±–µü§ç",
    "–£–ª—ã–±–Ω–∏—Å—å —Å–µ–±–µ –≤ –∑–µ—Ä–∫–∞–ª–µ ‚Äî —Ç—ã –∫–ª–∞—Å—Å–Ω–∞—èü™û",
    "–¢–≤–æ—è —á–µ—Å—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ª—é–¥–µ–πüß≤",
    "–ü—É—Å—Ç—å –¥–µ–Ω—å –±—É–¥–µ—Ç –ª—ë–≥–∫–∏–º –∏ —Ç—ë–ø–ª—ã–ºü´ß",
    "–õ–∞—Å–∫–æ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–µ–±–µ —Å–µ–≥–æ–¥–Ω—è ‚Äî –º–∞—Å—Ç—Ö—ç–≤üíå",
    "–¢—ã –≤—Å—ë –¥–µ–ª–∞–µ—à—å –≤–æ–≤—Ä–µ–º—è ‚Äî –≤ —Å–≤–æ—ë–º —Ä–∏—Ç–º–µ‚è≥",
    "–°–¥–µ–ª–∞–π –≤—ã–±–æ—Ä –≤ –ø–æ–ª—å–∑—É —Å–µ–±—è ‚Äî —ç—Ç–æ –Ω–µ —ç–≥–æ–∏–∑–ºüå∑",
    "–¢—ã ‚Äî –∫–∞–∫ —É—Ç—Ä–æ –≤ –ª—é–±–∏–º–æ–º –≥–æ—Ä–æ–¥–µ‚òïÔ∏è",
    "–° —Ç–æ–±–æ–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —É—é—Ç–Ω–µ–µ –≤—Å–µ–º, –¥–∞–∂–µ –∫–æ—à–∫–∞–ºüêæ",
    "–î–∞–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–µ —É—Å–∏–ª–∏—è —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –≤ –±–æ–ª—å—à–æ–µüìà",
    "–°–µ–≥–æ–¥–Ω—è —Ç—ã ‚Äî –≥–µ—Ä–æ–∏–Ω—è —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏üé¨",
    "–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç, –∫–æ–≥–¥–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—à—å —Å–ø–µ—à–∏—Ç—åüïäÔ∏è",
    "–¢—ã –¥–æ—Å—Ç–æ–π–Ω–∞ —Å–∞–º—ã—Ö –±–µ—Ä–µ–∂–Ω—ã—Ö –æ–±—ä—è—Ç–∏–πü´Ç",
    "–°–∫–∞–∂–∏ —Å–µ–±–µ ¬´—è —Å–ø—Ä–∞–≤–ª—é—Å—å¬ª ‚Äî –∏ —Ç–∞–∫ –∏ –±—É–¥–µ—Ç‚úÖ",
    "–ë—É–¥—å —Ä—è–¥–æ–º —Å —Å–æ–±–æ–π ‚Äî —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µü§ç",
    "–ü—É—Å—Ç—å –≤—Å—ë –Ω—É–∂–Ω–æ–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –ª–µ–≥–∫–æ, –∞ –Ω–µ–Ω—É–∂–Ω–æ–µ —É—Ö–æ–¥–∏—Çüå¨Ô∏è",
    "–¢—ã ‚Äî —Å–≤–µ—Ç. –°–≤–µ—Ç–∏‚ú®",
    "–¢–≤–æ—ë —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ ‚Äî —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –æ–¥–µ–∂–¥–∞üëó",
    "–ñ–∏–∑–Ω—å —Å–µ–≥–æ–¥–Ω—è –ø–æ–¥–º–∏–≥–Ω—ë—Ç —Ç–µ–±–µüòâ",
    "–¢–≤–æ—è –¥–æ–±—Ä–æ—Ç–∞ ‚Äî –Ω–µ —Å–ª–∞–±–æ—Å—Ç—å, –∞ –≤—ã–±–æ—Äüí™",
    "–í–¥–æ—Ö–Ω–∏ –Ω–∞–¥–µ–∂–¥—É ‚Äî –≤—ã–¥–æ—Ö–Ω–∏ —Å–æ–º–Ω–µ–Ω–∏–µüå¨Ô∏è",
    "–¢—ã ‚Äî –ø—Ä–∏—á–∏–Ω–∞ —á—å–µ–π-—Ç–æ —É–ª—ã–±–∫–∏ —Å–µ–≥–æ–¥–Ω—èüôÇ",
    "–ü—É—Å—Ç—å –º–∏—Ä –æ–±–Ω–∏–º–µ—Ç —Ç–µ–±—è –º—è–≥–∫–æü´∂",
    "–¢—ã —É–∂–µ –Ω–∞ –º–Ω–æ–≥–æ —à–∞–≥–æ–≤ –≤–ø–µ—Ä–µ–¥–∏ —Å–µ–±—è –≤—á–µ—Ä–∞—à–Ω–µ–π‚û°Ô∏è",
    "–°–¥–µ–ª–∞–π —Å–µ–≥–æ–¥–Ω—è —á—Ç–æ-—Ç–æ –º–∞–ª–µ–Ω—å–∫–æ–µ –∏ –≤–∞–∂–Ω–æ–µ –¥–ª—è –¥—É—à–∏üïØÔ∏è",
    "–¢—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞, –∏ —Ç–æ—á–∫–∞üíñ",
    "–°–µ—Ä–¥—Ü–µ –∑–Ω–∞–µ—Ç, –≥–¥–µ –µ–º—É —Ö–æ—Ä–æ—à–æüíì",
    "–£–¥–∞—á–∞ –ª—é–±–∏—Ç —Ç–≤–æ—é —Å–º–µ–ª–æ—Å—Ç—åüçÄ",
    "–¢–≤–æ—è –Ω–µ–∂–Ω–æ—Å—Ç—å —Å–∏–ª—å–Ω–µ–µ –ª—é–±—ã—Ö –±—É—Ä—åüå™Ô∏è",
    "–°–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç —Ç–µ–ø–ª–æ ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ –ø–∞—Å–º—É—Ä–Ω–æ‚òÅÔ∏è",
    "–¢—ã ‚Äî —á–µ–ª–æ–≤–µ–∫-–ª—É—á–∏–∫, –ø–æ–º–Ω–∏ —ç—Ç–æ‚òÄÔ∏è",
    "–í—ã–±–∏—Ä–∞–π —Å–µ–±—è –∫–∞–∂–¥—ã–π —Ä–∞–∑ü´∂",
    "–¢—ã –Ω–µ –æ–±—è–∑–∞–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π, —á—Ç–æ–±—ã –±—ã—Ç—å —Ü–µ–Ω–Ω–æ–πüíé",
    "–ñ–∏–∑–Ω—å –≤—Å—Ç–∞–Ω–µ—Ç –Ω–∞ —Ç–≤–æ—é —Å—Ç–æ—Ä–æ–Ω—É, –∫–æ–≥–¥–∞ –≤—Å—Ç–∞–Ω–µ—à—å –Ω–∞ —Å–≤–æ—é‚ú®",
    "–¢—ã ‚Äî —á—É–¥–æ, –∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ —Å–ª—É—á–∏–ª–æ—Å—åüåü",
    "–†–∞–∑—Ä–µ—à–∏ —Å–µ–±–µ —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è –±–µ–∑ –ø–æ–≤–æ–¥–∞üéà",
    "–¢–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è ‚Äî –Ω–µ –∫–∞–ø—Ä–∏–∑, –∞ –Ω–∞–≤–∏–≥–∞—Ç–æ—Äüß≠",
    "–¢–≤–æ–∏ –≥—Ä–∞–Ω–∏—Ü—ã ‚Äî —Ç–≤–æ—è –∑–∞–±–æ—Ç–∞ –æ —Å–µ–±–µüõ°Ô∏è",
    "–î–µ–Ω—å –ø–æ–¥–∞—Ä–∏—Ç –∫—Ä–∞—Å–∏–≤—É—é –≤—Å—Ç—Ä–µ—á—É –∏–ª–∏ –º—ã—Å–ª—åüí°",
    "–¢—ã ‚Äî –¥–æ–±—Ä–∞—è —Å–∏–ª–∞, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è–µ—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—åüïäÔ∏è",
    "–ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è –≤—Å—ë –±—É–¥–µ—Ç –ø–æ –ª—é–±–≤–∏üíò",
    "–¢—ã –≤–∞–∂–Ω–∞ –¥–ª—è –º–∏—Ä–∞ –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–æ–π, –∫–∞–∫–∞—è —Ç—ã –µ—Å—Ç—åü§ç",
    "–°–¥–µ–ª–∞–π —Å–µ–±–µ —á–∞–π –∏ –≤—ã–¥–æ—Ö–Ω–∏üçµ",
    "–¢—ã —É–º–µ–µ—à—å –±—ã—Ç—å –æ–ø–æ—Ä–æ–π ‚Äî –Ω–∞—á–Ω–∏ —Å —Å–µ–±—èüß±",
    "–ö—Ä–∞—Å–æ—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –¥–µ–ª–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–µ–µ –≤—Å—ë –≤–æ–∫—Ä—É–≥üå∏",
    "–°–µ–≥–æ–¥–Ω—è –≤—Å—ë –Ω—É–∂–Ω–æ–µ –Ω–∞–π–¥—ë—Ç —Ç–µ–±—è —Å–∞–º–æüß≤",
    "–¢—ã ‚Äî –Ω–µ –∑–∞–¥–∞—á–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Ç—ã ‚Äî –∂–∏–∑–Ω—å –¥–ª—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—èüåø",
    "–ü—É—Å—Ç—å —Ç–≤–æ—è –Ω–µ–∂–Ω–æ—Å—Ç—å –≤–µ—Ä–Ω—ë—Ç—Å—è –∫ —Ç–µ–±–µ —Å–∏–ª—å–Ω–µ–µüíû",
    "–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å, –∫–æ–≥–¥–∞ –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ‚≠ê",
    "–¢—ã —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–∞—Ä–∞–µ—à—å—Å—è ‚Äî –º–æ–∂–Ω–æ –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—åüõå",
    "–ù–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ —Ç–µ–±—è –∂–¥—ë—Ç —á—Ç–æ-—Ç–æ —Ö–æ—Ä–æ—à–µ–µüçÄ",
    "–¢—ã ‚Äî —Ç–∞, –∫—Ç–æ –º–æ–∂–µ—Ç –º—è–≥–∫–æ, –Ω–æ —É–≤–µ—Ä–µ–Ω–Ω–æ –º–µ–Ω—è—Ç—å –º–∏—Äüåç",
    "–¢–≤–æ—ë –¥–æ–±—Ä–æ –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µü§ç",
    "–¢—ã ‚Äî —Ü–µ–ª–∞—è. –í—Å–µ–≥–¥–∞üí´",
    "–ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å—ë—Ç –ª—ë–≥–∫–æ—Å—Ç—å –∏ —è—Å–Ω–æ—Å—Ç—åüîÜ",
    "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –∑–∞–±–æ—Ç—ã ‚Äî –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å —Å–≤–æ–µ–πü´∂",
    "–°–µ–≥–æ–¥–Ω—è —Ç—ã —É–≤–∏–¥–∏—à—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–≤–æ–µ–π —Å–∏–ª—ãüí™",
    "–¢—ã ‚Äî –∫—Ä–∞—Å–æ—Ç–∞, –Ω–µ–∂–Ω–æ—Å—Ç—å –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–¥–Ω–æ–º‚ú®",
    "–ú–∏—Ä —Å–µ–≥–æ–¥–Ω—è –ø–æ–¥–¥–µ—Ä–∂–∏—Ç —Ç–≤–æ–∏ –¥–æ–±—Ä—ã–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—èüïäÔ∏è",
    "–¢—ã ‚Äî –ª—é–±–æ–≤—å. –ò —Ç–æ—á–∫–∞üíñ",
    "–ü—É—Å—Ç—å –ª—é–±–æ–µ ¬´–Ω–∞–¥–æ¬ª —Å—Ç–∞–Ω–µ—Ç —á—É—Ç—å –º—è–≥—á–µ –∏ —Ç–µ–ø–ª–µ–µü´ß",
    "–¢—ã –º–æ–∂–µ—à—å –≤—Å—ë, –Ω–æ –≤—ã–±–∏—Ä–∞–π —Ç–æ, —á—Ç–æ –±–µ—Ä–µ–∂–Ω–æ –∫ —Ç–µ–±–µü§ç",
    "–°–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –ø–æ–≤–æ–¥ —Å–∫–∞–∑–∞—Ç—å ¬´—Å–ø–∞—Å–∏–±–æ¬ª –∂–∏–∑–Ω–∏üôè",
    "–¢—ã ‚Äî —É—é—Ç –∏ —Å–≤–µ—Ç –¥–ª—è —Å–µ–±—è –∏ –¥—Ä—É–≥–∏—ÖüïØÔ∏è",
    "–î–æ–±—Ä–æ—Ç–∞ –∫ —Å–µ–±–µ ‚Äî —Ç–≤–æ–π –ª—É—á—à–∏–π –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—åüìã",
    "–¢—ã ‚Äî –≤–∞–∂–Ω–∞—è, –Ω—É–∂–Ω–∞—è –∏ –æ—á–µ–Ω—å —Ü–µ–Ω–Ω–∞—èüíé",
    "–ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –±–æ–ª—å—à–µ —Ç–∏—à–∏–Ω—ã –∏ –º–∏—Ä–∞ –≤–Ω—É—Ç—Ä–∏üåø",
    "–¢—ã —Å–º–µ–ª–∞—è ‚Äî –¥–∞–∂–µ –∫–æ–≥–¥–∞ —ç—Ç–æ–≥–æ –Ω–µ –∑–∞–º–µ—á–∞–µ—à—åüî•",
    "–°–¥–µ–ª–∞–π —à–∞–≥ –∫ –º–µ—á—Ç–µ ‚Äî –ª—é–±–æ–π, –Ω–æ —Å–µ–≥–æ–¥–Ω—èüö∂‚Äç‚ôÄÔ∏è",
    "–¢—ã ‚Äî –ø—Ä–∏–º–µ—Ä –Ω–µ–∂–Ω–æ–π —Å–∏–ª—ãü¶ã",
    "–ú–∏—Ä —É–ª—ã–±–∞–µ—Ç—Å—è —Ç–µ–±–µ ‚Äî —É–ª—ã–±–Ω–∏—Å—å –≤ –æ—Ç–≤–µ—ÇüôÇ",
    "–¢—ã ‚Äî —á—É–¥–µ—Å–Ω–∞—è. –ü–æ–≤–µ—Ä—å —Å–µ–±–µ –µ—â—ë —Ä–∞–∑‚ú®",
    "–ü—É—Å—Ç—å –±—É–¥–µ—Ç –ª–µ–≥–∫–æ –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ, —á—Ç–æ —Ç–µ–±–µ —Ö–æ—Ä–æ—à–æü´∂",
    "–¢—ã ‚Äî –¥–æ–º –¥–ª—è —Å–µ–±—è. –ë–µ—Ä–µ–≥–∏ —ç—Ç–æ—Ç –¥–æ–ºüè°",
    "–ñ–∏–∑–Ω—å —Å–æ–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥ —Ç–µ–±—è ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–∞–π –µ–π –∑–Ω–∞–∫ü™Ñ",
    "–ù–µ–∂–Ω–æ—Å—Ç—å –∫ —Å–µ–±–µ ‚Äî —ç—Ç–æ —Ç–æ–∂–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞üßò‚Äç‚ôÄÔ∏è",
    "–¢—ã —Å–ø–æ—Å–æ–±–Ω–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Å–æ—Ç—É –∏–∑ –Ω–∏—á–µ–≥–æüé®",
    "–ü—É—Å—Ç—å –≤ —Å–µ—Ä–¥—Ü–µ –±—É–¥–µ—Ç —Ç–∏—Ö–æ –∏ —Ç–µ–ø–ª–æüïØÔ∏è",
    "–¢—ã ‚Äî –Ω–∞—Å—Ç–æ—è—â–µ–µ ¬´–ø–æ–≤–µ–∑–ª–æ¬ª –¥–ª—è —ç—Ç–æ–≥–æ –º–∏—Ä–∞üçÄ",
    "–°–µ–≥–æ–¥–Ω—è —Ç–µ–±—è –∂–¥—ë—Ç –º–∞–ª–µ–Ω—å–∫–∞—è —Ä–∞–¥–æ—Å—Ç—åüéÅ",
    "–¢—ã ‚Äî —Å–∏–ª—å–Ω–∞—è –∏ —Ö—Ä—É–ø–∫–∞—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –∏ —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æüíñ",
    "–ë—É–¥—å –±–µ—Ä–µ–∂–Ω–æ–π ‚Äî –∏ –º–∏—Ä –æ—Ç–≤–µ—Ç–∏—Ç —Ç–µ–º –∂–µü§ç",
    "–¢—ã ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –ø—Ä–∏–º–µ—Ä –¥–ª—è —Å–∞–º–æ–π —Å–µ–±—èüåü",
    "–í—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ‚úÖ",
]

# ===================== –ö–û–ú–ü–õ–ò–ú–ï–ù–¢–´ (45 —Å—Ç—Ä–æ–∫) =====================
COMPLIMENTS = [
    "–¢—ã –æ—á–µ–Ω—å –±–µ—Ä–µ–∂–Ω–æ –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ –ª—é–¥—è–º ‚Äî —ç—Ç–æ –≤–∏–¥–Ω–æü§ü",
    "–í —Ç–µ–±–µ –º–Ω–æ–≥–æ —Å–≤–µ—Ç–∞, —Å —Ç–æ–±–æ–π —Ç–µ–ø–ª–µ–µ‚ú®",
    "–¢—ã –∫—Ä–∞—Å–∏–≤–∞—è —Ç–∞–∫, –∫–∞–∫ —Å–∞–º–∞ —Ä–µ—à–∞–µ—à—å –±—ã—Ç—åüíã",
    "–° —Ç–æ–±–æ–π —Ö–æ—á–µ—Ç—Å—è –¥—Ä—É–∂–∏—Ç—å –∏ —Å–º–µ—è—Ç—å—Å—èüòÇ",
    "–¢—ã –∏–∑ —Ç–µ—Ö, –∫—Ç–æ —É–º–µ–µ—Ç –ª—é–±–∏—Ç—å –∏—Å–∫—Ä–µ–Ω–Ω–µüíñ",
    "–¢—ã —Å–æ–∑–¥–∞—ë—à—å —É—é—Ç –¥–∞–∂–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–ºüïØÔ∏è",
    "–í —Ç–≤–æ–∏—Ö –≥–ª–∞–∑–∞—Ö –≤—Å–µ–≥–¥–∞ –Ω–µ–º–Ω–æ–≥–æ –∫–æ—Å–º–æ—Å–∞üåå",
    "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å –±—ã—Ç—å –Ω–µ–∂–Ω–µ–µ –∫ —Å–µ–±–µü´∂",
    "–° —Ç–æ–±–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ –±—ã—Ç—å —Å–æ–±–æ–πü§ç",
    "–¢—ã –∫–∞–∫ —á–∞–π —Å –º—ë–¥–æ–º ‚Äî —Å–æ–≥—Ä–µ–≤–∞–µ—à—åüçØ",
    "–° —Ç–æ–±–æ–π –ª–µ–≥—á–µ –¥—ã—à–∏—Ç—Å—èüåø",
    "–¢–≤–æ—è —É–ª—ã–±–∫–∞ ‚Äî –ª—É—á—à–∏–π —Ñ–∏–ª—å—Ç—Ä –¥–Ω—èüôÇ",
    "–¢—ã —É–º–µ–µ—à—å —Å–ª—É—à–∞—Ç—å ‚Äî —ç—Ç–æ —Ä–µ–¥–∫–æ—Å—Ç—åüëÇ",
    "–¢–≤–æ–π —é–º–æ—Ä –ª–µ—á–∏—Ç –ª—É—á—à–µ —Ç–∞–±–ª–µ—Ç–æ–∫üòå",
    "–¢—ã –æ—á–µ–Ω—å —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤–∞, –ø—Ä–æ—Å—Ç–æ –∏–Ω–æ–≥–¥–∞ –∑–∞–±—ã–≤–∞–µ—à—å –æ–± —ç—Ç–æ–ºüí´",
    "–¢–≤–æ—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî —ç—Ç–æ —Å—É–ø–µ—Ä—Å–∏–ª–∞ü¶∏‚Äç‚ôÄÔ∏è",
    "–¢—ã –∫—Ä–∞—Å–∏–≤–æ –≥–æ–≤–æ—Ä–∏—à—å –¥–∞–∂–µ –æ —Å–ª–æ–∂–Ω–æ–ºüéÄ",
    "–° —Ç–æ–±–æ–π –≤—Å—ë —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∂–∏–≤—ã–ºüå∑",
    "–¢—ã –æ—á–µ–Ω—å —Ü–µ–Ω–Ω–∞—è ‚Äî –∏ —Ç–æ—á–∫–∞üíé",
    "–° —Ç–æ–±–æ–π —Ö–æ—á–µ—Ç—Å—è –¥–µ–ª–∏—Ç—å—Å—è —Ä–∞–¥–æ—Å—Ç—å—é –∏ —Ç–∏—à–∏–Ω–æ–πüïäÔ∏è",
    "–¢—ã ‚Äî —á–µ–ª–æ–≤–µ–∫-–¥–æ–º –¥–ª—è –±–ª–∏–∑–∫–∏—Öüè°",
    "–¢—ã ‚Äî –ø—Ä–æ –¥–æ–±—Ä–æ—Ç—É –±–µ–∑ –≥—Ä–æ–º–∫–∏—Ö —Å–ª–æ–≤ü§ç",
    "–¢–≤–æ—è –º—è–≥–∫–æ—Å—Ç—å –æ–±–µ–∑–æ—Ä—É–∂–∏–≤–∞–µ—Çü™∑",
    "–¢—ã —É–º–µ–µ—à—å –≤–∏–¥–µ—Ç—å —Ö–æ—Ä–æ—à–µ–µ ‚Äî –∏ –¥–∞—Ä–∏—à—å —ç—Ç–æ –¥—Ä—É–≥–∏–ºüåà",
    "–¢–≤–æ—ë —Å–µ—Ä–¥—Ü–µ –±–æ–ª—å—à–æ–µ –∏ —Ç—ë–ø–ª–æ–µüíì",
    "–¢—ã –±–µ—Ä–µ–∂–Ω–æ –æ–±—Ä–∞—â–∞–µ—à—å—Å—è —Å —á—É–≤—Å—Ç–≤–∞–º–∏ ‚Äî —ç—Ç–æ –±–µ—Å—Ü–µ–Ω–Ω–æüíå",
    "–¢—ã —É–º–µ–µ—à—å –±—ã—Ç—å –∏—Å–∫—Ä–µ–Ω–Ω–µ–π ‚Äî —ç—Ç–æ —Ä–µ–¥–∫–∏–π –¥–∞—Äüíé",
    "–° —Ç–æ–±–æ–π —Ä—è–¥–æ–º —Ö–æ—á–µ—Ç—Å—è –±—ã—Ç—å –ª—É—á—à–µüåü",
    "–¢—ã ‚Äî –∫—Ä–∞—Å–∏–≤—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ª–∏—Ü–æüíñ",
    "–¢—ã –æ—á–µ–Ω—å —á—É—Ç–∫–∞—è ‚Äî –Ω–∞—Å—Ç–æ—è—â–∏–π –ø–æ–¥–∞—Ä–æ–∫ –ª—é–¥—è–ºüéÅ",
    "–¢—ã —É–º–µ–µ—à—å —É—Å–ø–æ–∫–∞–∏–≤–∞—Ç—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–ºü´∂",
    "–¢—ã ‚Äî —ç—Å—Ç–µ—Ç–∏–∫–∞ –∏ —Ç–µ–ø–ª–æ –≤ –æ–¥–Ω–æ–º‚ú®",
    "–° —Ç–æ–±–æ–π –≤—Å—ë –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∏ –±–µ–∑ –º–∞—Å–æ–∫üé≠",
    "–¢—ã –º—è–≥–∫–∞—è, –Ω–æ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–∞—è –≤–Ω—É—Ç—Ä–∏üí™",
    "–¢—ã ‚Äî –¥—É—à–µ–≤–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, —Ç–∞–∫–∏—Ö –º–∞–ª–æü§ç",
    "–¢–≤–æ–∏ —Å–ª–æ–≤–∞ —á–∞—Å—Ç–æ –ø–æ–ø–∞–¥–∞—é—Ç –ø—Ä—è–º–æ –≤ —Å–µ—Ä–¥—Ü–µüéØ",
    "–¢—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞ –ø—Ä–æ—Å—Ç–æ —Ç–µ–º, —á—Ç–æ –µ—Å—Ç—åüå∏",
    "–¢—ã ‚Äî —á–µ–ª–æ–≤–µ–∫, —Ä—è–¥–æ–º —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—á–µ—Ç—Å—è —É–ª—ã–±–∞—Ç—å—Å—èüôÇ",
    "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å –≤–µ—Ä–∏—Ç—å –≤ —Å–µ–±—èüåü",
    "–¢—ã ‚Äî —Ç–æ—Ç —Å–∞–º—ã–π —Ç—ë–ø–ª—ã–π —Å–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–µ–Ω –≤—Å–µ–ºüïØÔ∏è",
    "–í —Ç–µ–±–µ —á—É–≤—Å—Ç–≤—É–µ—Ç—Å—è –≥–ª—É–±–∏–Ω–∞ –∏ –Ω–µ–∂–Ω–æ—Å—Ç—åü™∑",
    "–¢—ã —É–º–µ–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–æ–≤—Ä–µ–º—èüíå",
    "–¢—ã ‚Äî –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞üéÄ",
    "–¢—ã –¥–µ–ª–∞–µ—à—å –º–∏—Ä –Ω–µ–º–Ω–æ–≥–æ –¥–æ–±—Ä–µ–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—åüïäÔ∏è",
    "–¢—ã ‚Äî —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ –∫—Ä–∞—Å–∏–≤–∞—è –∏ –∏–∑–Ω—É—Ç—Ä–∏, –∏ —Å–Ω–∞—Ä—É–∂–∏üíñ",
]

# ===================== /predskaz =====================
async def predskaz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ensure_user(user.id, user.username, user.mention_html())
    suid = str(user.id)
    u = state["users"][suid]
    if u.get("last_prediction") == today_str():
        await update.message.reply_text("üîÆ–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–µ–≥–æ–¥–Ω—è")
        return
    u["last_prediction"] = today_str()
    save_state()
    await update.message.reply_text(f"üîÆ{random.choice(PREDICTIONS)}")

# ===================== /compliment =====================
async def compliment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    me = update.effective_user
    ensure_user(me.id, me.username, me.mention_html())
    if update.message and update.message.reply_to_message:
        ru = update.message.reply_to_message.from_user
        ensure_user(ru.id, ru.username, ru.mention_html())
        target = display_user(ru.id)
    elif context.args:
        target = context.args[0]
    else:
        pool = [uid for uid in state.get("known_users", []) if uid != me.id]
        if not pool:
            await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –≤—Å–µ–º –≤ —á–∞—Ç–µüíê")
            return
        target = display_user(random.choice(pool))
    phrase = random.choice(COMPLIMENTS)
    await update.message.reply_text(f"{me.mention_html()} –≥–æ–≤–æ—Ä–∏—Ç {target}: {phrase}", parse_mode="HTML")

# ===================== /hugs =====================
HUGS_POOL = [
    "ü§ó{a} –∫—Ä–µ–ø–∫–æ –æ–±–Ω—è–ª–∞ {b} ‚Äî —Ç–µ–ø–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—Éüß∏",
    "üíû{a} –Ω–µ–∂–Ω–æ –ø—Ä–∏–∂–∞–ª–∞—Å—å –∫ {b} ‚Äî –ø—É—Å—Ç—å —Ç—Ä–µ–≤–æ–≥–∏ —Ç–∞—é—Çüå∑",
    "ü•∞{a} —Å–æ–≥—Ä–µ–ª–∞ {b} —Å–≤–æ–∏–º–∏ –æ–±–Ω–∏–º–∞—à–∫–∞–º–∏ ‚Äî –∑–∞—Ä—è–¥–∏–ª–∞—Å—å –ª—é–±–æ–≤—å—é",
    "ü´∂{a} –∏ {b} ‚Äî —Å–µ–≥–æ–¥–Ω—è —Å–∞–º—ã–π –º–∏–ª—ã–π –¥—É—ç—Ç",
    "–ö—Ç–æ –Ω–µ –æ–±–Ω–∏–º–µ—Ç—Å—è ‚Äî —Ç–æ—Ç –Ω–µ –∏–≥—Ä–∞–µ—Ç –≤ –∫–∞—Å—Ç–æ–º–∫–µ",
    "ü´Ç–¢–æ–∫—Å–∏–∫–æ–≤ —Ç–æ–∂–µ –∏–Ω–æ–≥–¥–∞ –æ–±–Ω–∏–º–∞—é—Ç‚Ä¶ –ø–æ –≥–æ–ª–æ–≤–µ‚Ä¶ —Ç–∞–±—É—Ä–µ—Ç–∫–æ–πüôÉ",
    "–ü–µ—Ä–µ–¥–∞—é –º—è–≥–∫–æ—Å—Ç—å, –∑–∞–±–æ—Ç—É –∏ –ø–µ—á–µ–Ω—å–∫—Éüç™ ‚Äî {a} ‚Üí {b}",
    "–ö—Ä–µ–ø–∫–æ-–∫—Ä–µ–ø–∫–æ –∏ –æ—á–µ–Ω—å –Ω–µ–∂–Ω–æ ‚Äî —Ç—Ä–µ–ø–µ—â–∏, –≥—Ä—É—Å—Ç—åü´Ç {a} –æ–±–Ω—è–ª–∞ {b}",
    "–ü—É—Å—Ç—å —Ç—Ä–µ–≤–æ–≥–∏ —É–º–µ–Ω—å—à–∞—é—Ç—Å—è –ø–æ—Å–ª–µ —ç—Ç–∏—Ö –æ–±—ä—è—Ç–∏–πüå∏ {a} –¥–ª—è {b}",
]

async def hugs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    me = update.effective_user
    ensure_user(me.id, me.username, me.mention_html())
    if update.message and update.message.reply_to_message:
        ru = update.message.reply_to_message.from_user
        ensure_user(ru.id, ru.username, ru.mention_html())
        target = display_user(ru.id)
        await update.message.reply_text(f"ü§ó{me.mention_html()} –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –æ–±—ä—è—Ç–∏—è {target}! –¢–µ–ø–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æüß∏", parse_mode="HTML")
        return
    if context.args:
        await update.message.reply_text(f"ü§ó{me.mention_html()} –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –æ–±—ä—è—Ç–∏—è {context.args[0]}! –¢–µ–ø–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æüß∏", parse_mode="HTML")
        return
    pool = [uid for uid in state.get("known_users", []) if uid != me.id]
    if not pool:
        await update.message.reply_text("–û–±–Ω–∏–º–∞—à–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤ —á–∞—Ç–µü´Ç")
        return
    target_id = random.choice(pool)
    a = me.mention_html()
    b = display_user(target_id)
    tpl = random.choice(HUGS_POOL)
    if "{a}" in tpl or "{b}" in tpl:
        text = tpl.format(a=a, b=b)
    else:
        text = f"{a} –æ–±–Ω—è–ª–∞ {b} ‚Äî {tpl}"
    await update.message.reply_text(text, parse_mode="HTML")

# ===================== /lesbi =====================
async def lesbi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    me = update.effective_user
    ensure_user(me.id, me.username, me.mention_html())
    pool = list(set(state.get("known_users", [])))
    if len(pool) < 2:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏—Ü –¥–ª—è –ø–∞—Ä—ã")
        return
    if state["last_lesbi_date"] == today_str() and state.get("last_lesbi_pair"):
        a, b = state["last_lesbi_pair"]
        await update.message.reply_text(f"üë≠–ü–∞—Ä–∞ –¥–Ω—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞: {display_user(a)} + {display_user(b)}üíû", parse_mode="HTML")
        return
    a, b = random.sample(pool, 2)
    state["last_lesbi_date"] = today_str()
    state["last_lesbi_pair"] = [a, b]
    save_state()
    lines = [
        "üåà–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –ª–µ—Å–±–∏-–ø–∞—Ä–∞: {a} –∏ {b}üíã",
        "ü´∂–ö—Ç–æ –±—ã –º–æ–≥ –ø–æ–¥—É–º–∞—Ç—å! {a} –∏ {b} ‚Äî –ø–∞—Ä–∞ –¥–Ω—è",
        "üíò–ê–º—É—Ä –ø–æ–ø–∞–ª —Ç–æ—á–Ω–æ –≤ —Ü–µ–ª—å! {a} –∏ {b} —Ç–µ–ø–µ—Ä—å –≤–º–µ—Å—Ç–µüòç",
        "üíû–õ—é–±–æ–≤—å –≤–∏—Ç–∞–µ—Ç –≤ –≤–æ–∑–¥—É—Ö–µ: {a} + {b} = ‚ù§Ô∏è",
    ]
    msg = random.choice(lines).format(a=display_user(a), b=display_user(b))
    await context.bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode="HTML")

# ===================== /role =====================
ROLES = [
    "—Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤–æ—á–∫–∞üíñ",
    "—Å–∞–º–∞—è –º–∏–ª–∞—è –∫–∏—Å–∫–∞üò∫",
    "—Å–∞–º–∞—è –Ω–µ–∂–Ω–∞—è –ø—Ä–∏–Ω—Ü–µ—Å—Å–∞üå∏",
    "—Å–∞–º–∞—è –≥—Ä—É—Å—Ç–Ω–∞—è –ø–µ–ª—å–º–µ—à–∫–∞üòî",
    "—Å–∞–º–∞—è —Å–∏—è—é—â–∞—è –∑–≤—ë–∑–¥–æ—á–∫–∞‚ú®",
    "—Å–∞–º–∞—è –∑–ª–∞—è –≤–µ–¥—å–º–æ—á–∫–∞üßô‚Äç‚ôÄÔ∏è",
    "—Å–∞–º–∞—è –º–æ–¥–Ω–∞—è –∏–∫–æ–Ω–∫–∞üë†",
    "—Å–∞–º–∞—è –∑–∞–≥–∞–¥–æ—á–Ω–∞—è –¥—É—à–∞üåÄ",
    "—Å–∞–º–∞—è —Ä–∞–¥—É–∂–Ω–∞—è –±—É–ª–æ—á–∫–∞üåà",
    "—Å–∞–º–∞—è –æ–¥–∏–Ω–æ–∫–∞—è —Ç—É—á–∫–∞üåß",
    "–∫–∞–∫–∞—à–∫–∞ –¥–Ω—èüí©",
    "–±—É–Ω—Ç–∞—Ä–∫–∞ —á–∞—Ç–∞üî•",
    "–ø—Å–∏—Ö–æ–≤–∞–Ω–Ω–∞—è —Ñ–µ—èü§Ø",
    "–ø–ª–∞–∫—Å–∞ –¥–Ω—èüò≠",
    "–¥—Ä–∞–º–∞–∫–≤–∏–Ω –≤–µ—á–µ—Ä–∞üëë",
    "—Å–∞–º–∞—è –≥—Ä–æ–º–∫–∞—è –∂–∞–±–∞üê∏",
    "–∫–∏—Å–∫–∞ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–ºüêæ",
    "–∫–æ—Ä–æ–ª–µ–≤–∞ —Å–ø–∞–º–∞üì±",
    "—Å–∞–º–∞—è –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞—èüé≤",
    "–¥–µ–≤–æ—á–∫–∞ –≤–∞–π–±–∞üéß",
    "—Å–∞–º–∞—è —ç—Å—Ç–µ—Ç–∏—á–Ω–∞—è –Ω–∞ —Ä–∞–π–æ–Ω–µüé®",
    "–∏–Ω—Å—Ç–∞-–¥–∏–≤–∞ –¥–Ω—èüì∏",
    "—Å–∞–º–∞—è –ø–æ—é—â–∞—è –≤ –¥—É—à–µüé§",
    "—Å–∞–º–∞—è —Å–µ–∫—Å–∏ –≤ –ø–∏–∂–∞–º–µüíÉ",
    "–∫–æ—Ä–æ–ª–µ–≤–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–∏üéâ",
    "–¥–µ–≤–æ—á–∫–∞ —Å –∫–æ—Å–º–æ—Å–æ–º –≤ –≥–ª–∞–∑–∞—Öüåå",
    "–±–æ–≥–∏–Ω—è —Ñ–ª–∏—Ä—Ç–∞üíã","–¥–µ–≤–∞ —Ö–∞–æ—Å–∞ü´¶",
    "—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç —á–∞—Ç–∞üïµÔ∏è‚Äç‚ôÄÔ∏è",
    "–ø–µ—Ä—Å–∏–∫ –¥–Ω—èüçë",
    "–∫–æ—à–º–∞—Ä –≤—Å–µ—Ö –±—ã–≤—à–∏—Öüíî",
    "–∫–æ—Ñ–µ–π–Ω–∞—è –±–æ–≥–∏–Ω—è‚òïÔ∏è",
    "—Å–∞–º–∞—è –≥—Ä–æ–º–∫–∞—è —Ä–∂—É–Ω—å–∫–∞üòÇ",
    "–¥–µ–≤–æ—á–∫–∞-—Å—é—Ä–ø—Ä–∏–∑üé≤",
    "—Å–ª—É—á–∞–π–Ω—ã–π –≥–µ–Ω–∏–πüß†",
    "–ª–æ–≤—É—à–∫–∞ –¥–ª—è —Å–µ—Ä–¥–µ—Ü‚ù§Ô∏è‚Äçüî•",
    "–æ–±–Ω–∏–º–∞—à–∫–∞ –Ω–∞ –Ω–æ–∂–∫–∞—Öü§ó",
    "—Å–∞–º–∞—è —Ä–∞–Ω–∏–º–∞—è –¥—É—à–∞ü•∫",
    "–Ω–æ—Å–∏–∫-–∫–Ω–æ–ø–æ—á–∫–∞ –¥–Ω—èüëÉ",
    "–¥–µ–≤–æ—á–∫–∞, –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—Ç—Å—è —á–∞–π –Ω–∞–ª–∏—Ç—åüçµ",
    "—Å–µ—Ä–¥—Ü–µ –Ω–∞ —Ä–∞—Å–ø–∞—à–∫—Éüíò",
    "—Å–ª–∞–¥–æ—Å—Ç—å —Å –Ω–∞—á–∏–Ω–∫–æ–π –∏–∑ –≥—Ä—É—Å—Ç–∏üç¨",
    "–æ–±–ª–∞–∫–æ –Ω–µ–∂–Ω–æ—Å—Ç–∏‚òÅÔ∏è",
    "–º–∏–ª–∞—à–∫–∞ –¥–Ω—èüß∏",
    "—Ç—ë–ø–ª—ã–π –ø–ª–µ–¥ —Å—Ä–µ–¥–∏ —à—Ç–æ—Ä–º–∞ü´Ç",
    "—É–ª—ã–±–∫–∞, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –ø—Ä–æ—â–∞–µ—à—å –≤—Å—ëüòä",
    "–¥–µ–≤–æ—á–∫–∞-–æ–±–Ω–∏–º–∞—à–∫–∞ü§ç",
    "—Å–∞–º–∞—è –¥—Ä–∞–º–∞—Ç–∏—á–Ω–∞—èüé≠",
    "–∫–∞–ø—Ä–∏–∑—É–ª—è –¥–Ω—èüòà",
    "–¥–µ–≤–æ—á–∫–∞ —Å –ø–ª–∞–Ω–æ–ºüìã",
    "—à–∞–ª—å–Ω–∞—è –∏–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞üëë",
    "–≥–ª–∞–≤–Ω–∞—è –∑–≤–µ–∑–¥–∞ —á–∞—Ç–∞üåü",
    "—Å–∞–º–∞—è –∑–∞–Ω—è—Ç–Ω–∞—è –∏–Ω—Ç—Ä–∏–≥–∞–Ω–∫–∞üß©",
    "–¥–µ–≤–æ—á–∫–∞ —Å –∫–æ—Ä–æ–Ω–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—éüë∏",
    "—Ñ–µ—è —Å –±–¥—Å–º-–∫—Ä—ã–ª—å—è–º–∏üßö‚Äç‚ôÄÔ∏è",
    "–∑–∞–∫–æ–ª–¥–æ–≤–∞–Ω–Ω–∞—è –∫–æ—Ç–ª–µ—Ç–∫–∞üçñ",
    "–≤–æ–ª—à–µ–±–Ω–∏—Ü–∞ —É—é—Ç–Ω—ã—Ö –≤–µ—á–µ—Ä–æ–≤üåô",
    "–º–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –±–æ–≥–∏–Ω—è —Å–Ω–∞üò¥",
    "–≤–µ–¥—å–º–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª–∫–∞—Öüßô‚Äç‚ôÄÔ∏è",
    "–≤–µ–¥—å–º–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –≤–∞—Ä–∏—Ç –±–æ—Ä—âüßπ",
    "–¥–µ–≤–æ—á–∫–∞-–∑–µ–ª—å–µüß™",
    "—Ç–∞, —á—Ç–æ —Ç–∞–Ω—Ü—É–µ—Ç –ø–æ–¥ –ª—É–Ω–æ–πüíÉ",
    "–¥–µ–≤–æ—á–∫–∞-–æ–π-–≤—Å—ëüôÑ",
    "–ø–∏–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–±–ª—É–∫–∞—ÖüçÜ",
    "–≥—Ä—É—Å—Ç–Ω—ã–π –∫–æ—Ç–∏–∫ –≤ —Ç–µ–ª–µ —Å—Ç–µ—Ä–≤—ãüòø",
    "—Ç–∞, —á—Ç–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—ÇüôÖ‚Äç‚ôÄÔ∏è",
    "–∫—Ä–∏–Ω–∂-–∫–æ—Ä–æ–ª–µ–≤–∞ü´†",
    "—à–∞—Ä–∏–∫ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏üéà",
    "—Ö–∏—Ç—Ä–∞—è –∂–æ–ø–∫–∞üçë",
    "–ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æüí®",
    "–ø–æ–∑–æ—Ä –∫–ª–∞–Ω–∞ü§°",
    "–æ—à–∏–±–∫–∞ –ø—Ä–∏—Ä–æ–¥—ã‚ö†Ô∏è",
    "—Ñ–∏–∞—Å–∫–æ –¥–Ω—èüìâ",
    "—Ö–æ–¥—è—á–∏–π –∫—Ä–∏–Ω–∂ü´†",
    "–º–∏–Ω—É—Å –≤ –∫–∞—Ä–º—Éüëé",
    "–Ω–µ—É–¥–∞—á–∞ –Ω–µ–¥–µ–ª–∏üíÄ",
    "—Ö–∑ –∫—Ç–æ –∏ –∑–∞—á–µ–º —Ç—É—ÇüôÉ",
    "–ø—Ä–∏—á–∏–Ω–∞ —Å—Ç—ã–¥–∞ —Å–µ–≥–æ–¥–Ω—èüò¨",
    "–±–∞–≥ –≤ –º–∞—Ç—Ä–∏—Ü–µüï≥",
    "–≥–ª–∞–≤–Ω—ã–π –ø–æ–≤–æ–¥ –¥–ª—è —Ñ–µ–π—Å–ø–∞–ª–º–∞ü§¶‚Äç‚ôÄÔ∏è",
    "—Å–∞–º–∞—è –±–µ—Å—è—á–∞—èüßø",
    "—Ñ–µ–π–ª –≤–µ–∫–∞üòµ",
    "–∞–Ω—Ç–∏-–∑–≤–µ–∑–¥–∞ —á–∞—Ç–∞üö´",
    "–ø—Ä–æ–∫–ª—è—Ç–∏–µ –¥–Ω—èüßü‚Äç‚ôÄÔ∏è",
    "–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞ –≤ —é–±–∫–µüå™",
    "–ø–æ–≤–æ–¥ –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞üö™",
    "—Ñ–æ–Ω–æ–≤—ã–π —à—É–ºüîá",
    "–≥–ª—é–∫ —Å–∏—Å—Ç–µ–º—ãüñ•",
    "–Ω–µ–¥–æ—Ä–∞–∑—É–º–µ–Ω–∏–µ —Å –≤–∞–π–±–æ–ºüòµ‚Äçüí´",
    "—Ä–∞–Ω–¥–æ–º–Ω–∞—è npcüíª",
    "–±–∞–≥ —Å –ª–∏—Ü–æ–ºü´•",
    "—É—Ä–æ–Ω –ø–æ –≥–ª–∞–∑–∞–ºüëÅ",
    "—Ç–∞, –∫–æ–≥–æ –ª—É—á—à–µ –Ω–µ –≤—Å–ø–æ–º–∏–Ω–∞—Ç—åüëª",
    "–º–æ—Ä–∞–ª—å–Ω—ã–π –≤–∏—Ä—É—Åü¶†",
    "—Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—åüï≥",
    "–±–∞–Ω –±–µ–∑ —Å—É–¥–∞ –∏ —Å–ª–µ–¥—Å—Ç–≤–∏—èüö∑"
]

def _pick_user_from_arg_or_random(me: int, args, update: Update) -> str:
    if update.message and update.message.reply_to_message:
        ru = update.message.reply_to_message.from_user
        ensure_user(ru.id, ru.username, ru.mention_html())
        return display_user(ru.id)
    if args:
        return args[0]
    pool = [uid for uid in state.get("known_users", []) if uid != me]
    if not pool:
        return display_user(me)
    return display_user(random.choice(pool))

async def role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    me = update.effective_user
    ensure_user(me.id, me.username, me.mention_html())
    target_disp = _pick_user_from_arg_or_random(me.id, context.args, update)
    await update.message.reply_text(f"{target_disp} —Å–µ–≥–æ–¥–Ω—è {random.choice(ROLES)}", parse_mode="HTML")

# ===================== /pipisa (1 —Ä–∞–∑/–¥–µ–Ω—å, –≥—Ä–∞–Ω–∏—Ü–∞ -50.0) =====================
def _rand_delta():
    d = round(random.uniform(-10.0, 10.0), 1)
    if d == 0.0:
        d = 0.1 if random.random() > 0.5 else -0.1
    return d

async def pipisa(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ensure_user(user.id, user.username, user.mention_html())
    suid = str(user.id)
    u = state["users"][suid]
    if u.get("last_pipisa") == today_str():
        await update.message.reply_text("–ü–∏–ø–∏—Å—É –º–æ–∂–Ω–æ —Ä–∞—Å—Ç–∏—Ç—å/–º–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—åüå±")
        return
    delta = _rand_delta()
    new_val = round(float(u.get("pipisa", 0.0)) + delta, 1)
    if new_val < -50.0:
        new_val = -50.0
    u["pipisa"] = new_val
    u["last_pipisa"] = today_str()
    save_state()
    if delta > 0:
        phrase = random.choice([
            "–û–Ω–∞ —Å—Ç—Ä–µ–º–∏—Ç—Å—è –∫ –≤–µ—Ä—à–∏–Ω–∞–ºüìà",
            "–í–ø–µ—Ä–µ–¥ –∏ –≤—ã—à–µ, –∫–æ—Ä–æ–ª—å –ø–∏–ø–∏—Å –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–æ–±–æ–πü•≥",
            "–¢–∞–∫ —Ä–∞—Å—Ç—ë—Ç —Ç–æ–ª—å–∫–æ –ª–µ–≥–µ–Ω–¥–∞üåü",
            "–°–∏—è–µ—Ç –∏ —Ä–∞–¥—É–µ—Ç —Ö–æ–∑—è–π–∫—É‚ú®",
        ])
        msg = f"üçÜ–ü–∏–ø–∏—Å–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ {delta:.1f} —Å–º! {phrase} –¢–≤–æ—è –ø–∏–ø–∏—Å–∞ —Ç–µ–ø–µ—Ä—å {new_val:.1f} —Å–º."
    else:
        phrase = random.choice([
            "–ü—Ä—è–º –∫–∞–∫ —É —Ç–≤–æ–µ–≥–æ –±—ã–≤—à–µ–≥–æ...",
            "–ò–Ω–æ–≥–¥–∞ –∏ –≥–µ—Ä–æ—è–º –Ω—É–∂–µ–Ω –æ—Ç–¥—ã—ÖüåßÔ∏è",
            "–ù–µ —Ä–æ—Å—Ç—Ä–∞—é–π—Å—èü´Ç",
            "–ü–æ–¥—Ä–æ—á–∏ –∏ –ø–∏–ø–∏—Å–∞ —É–≤–µ–ª–∏—á–∏—Ç—Å—èüåà",
        ])
        msg = f"üçÜ–û—É‚Ä¶ –ø–∏–ø–∏—Å–∞ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å –Ω–∞ {abs(delta):.1f} —Å–º. {phrase} –¢–≤–æ—è –ø–∏–ø–∏—Å–∞ —Ç–µ–ø–µ—Ä—å {new_val:.1f} —Å–º."
    await update.message.reply_text(msg, parse_mode="HTML")

# ===================== /duel (–¥–æ 3 —Ä–∞–∑/–¥–µ–Ω—å, —Å–∏–ª–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ —à–∞–Ω—Å) =====================
def _duel_amount():
    return round(random.uniform(0.5, 5.0), 1)

async def duel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    me = update.effective_user
    ensure_user(me.id, me.username, me.mention_html())
    suid = str(me.id)
    u_me = state["users"][suid]

    # –ª–∏–º–∏—Ç 3/–¥–µ–Ω—å
    if u_me.get("duel_used_on") != today_str():
        u_me["duel_used_on"] = today_str()
        u_me["duel_uses"] = 0
    if u_me["duel_uses"] >= 3:
        await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è –ª–∏–º–∏—Ç –¥—É—ç–ª–µ–π –∏—Å—á–µ—Ä–ø–∞–Ω (3/–¥–µ–Ω—å)‚öîÔ∏è")
        return

    # —Ü–µ–ª—å: reply –∏–ª–∏ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –∫–∞–∫ @—é–∑–µ—Ä (—Å—Ç—Ä–æ–∫–∞)
    target_id = None
    if update.message and update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
        ensure_user(target_user.id, target_user.username, target_user.mention_html())
        target_id = target_user.id
    elif context.args:
        # –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ username —Å—Ä–µ–¥–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö
        arg = context.args[0].lstrip("@")
        for uid_str, data in state["users"].items():
            uname = data.get("username", "").lstrip("@")
            if uname and uname.lower() == arg.lower():
                target_id = int(uid_str)
                break
    if not target_id:
        await update.message.reply_text("–û—Ç–º–µ—Ç—å —Å–æ–ø–µ—Ä–Ω–∏—Ü—É –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏ @—é–∑–µ—Ä –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã")
        return
    if target_id == me.id:
        await update.message.reply_text("–° —Å–æ–±–æ–π –¥—É—ç–ª–∏—Ç—å—Å—è –Ω–µ–ª—å–∑—èüôÇ")
        return

    ensure_user(target_id, state["users"].get(str(target_id), {}).get("username"), state["users"].get(str(target_id), {}).get("name"))
    u_op = state["users"][str(target_id)]

    # —à–∞–Ω—Å –ø–æ–±–µ–¥—ã: 50% + (power_me - power_op)*5%, –æ–≥—Ä–∞–Ω–∏—á–∏–º 10..90%
    power_me = int(u_me.get("pipisa_power", 0))
    power_op = int(u_op.get("pipisa_power", 0))
    win_chance = 0.5 + (power_me - power_op) * 0.05
    win_chance = max(0.1, min(0.9, win_chance))

    amount = _duel_amount()
    me_wins = random.random() < win_chance

    if me_wins:
        u_me["pipisa"] = round(float(u_me.get("pipisa", 0.0)) + amount, 1)
        u_op["pipisa"] = round(float(u_op.get("pipisa", 0.0)) - amount, 1)
        if u_op["pipisa"] < -50.0:
            u_op["pipisa"] = -50.0
        text = f"‚öîÔ∏è–î—É—ç–ª—å! {display_user(me.id)} –ø–æ–±–µ–¥–∏–ª–∞ {display_user(target_id)} –∏ –æ—Ç–≤–æ–µ–≤–∞–ª–∞ {amount:.1f} —Å–º. –¢–≤–æ—è –ø–∏–ø–∏—Å–∞ —Ç–µ–ø–µ—Ä—å {u_me['pipisa']:.1f} —Å–º."
    else:
        u_me["pipisa"] = round(float(u_me.get("pipisa", 0.0)) - amount, 1)
        if u_me["pipisa"] < -50.0:
            u_me["pipisa"] = -50.0
        u_op["pipisa"] = round(float(u_op.get("pipisa", 0.0)) + amount, 1)
        text = f"‚öîÔ∏è–î—É—ç–ª—å! {display_user(target_id)} –ø–æ–±–µ–¥–∏–ª–∞ {display_user(me.id)} –∏ –æ—Ç–≤–æ–µ–≤–∞–ª–∞ {amount:.1f} —Å–º. –¢–≤–æ—è –ø–∏–ø–∏—Å–∞ —Ç–µ–ø–µ—Ä—å {u_me['pipisa']:.1f} —Å–º."

    # —Ä–æ—Å—Ç —Å–∏–ª—ã –∑–∞ —É—á–∞—Å—Ç–∏–µ
    u_me["pipisa_power"] = int(u_me.get("pipisa_power", 0)) + 1
    u_op["pipisa_power"] = int(u_op.get("pipisa_power", 0)) + 1

    u_me["duel_uses"] = int(u_me.get("duel_uses", 0)) + 1
    save_state()
    await update.message.reply_text(text, parse_mode="HTML")

# ===================== –†–ï–ô–¢–ò–ù–ì–ò =====================
async def top5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ensure_user(update.effective_user.id, update.effective_user.username, update.effective_user.mention_html())
    rows = sorted(state["users"].items(), key=lambda kv: kv[1].get("pipisa", 0.0), reverse=True)[:5]
    if not rows:
        await update.message.reply_text("–†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç. –ü–æ–ª–∏–≤–∞–π –ø–∏–ø–∏—Å—É —á–∞—â–µüå±")
        return
    text = "üèÜ–¢–û–ü-5 –ø–∏–ø–∏—Å –∫–ª–∞–Ω–∞:\n"
    for i, (uid, u) in enumerate(rows, 1):
        text += f"{i}. {u.get('name') or display_user(int(uid))}: {u.get('pipisa', 0.0):.1f} —Å–º\n"
    await update.message.reply_text(text, parse_mode="HTML")

async def rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ensure_user(update.effective_user.id, update.effective_user.username, update.effective_user.mention_html())
    rows = sorted(state["users"].items(), key=lambda kv: kv[1].get("pipisa", 0.0), reverse=True)
    if not rows:
        await update.message.reply_text("–†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç. –ü–æ–ª–∏–≤–∞–π –ø–∏–ø–∏—Å—É —á–∞—â–µüå±")
        return
    text = "üìä–ü–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–∏–ø–∏—Å:\n"
    for i, (uid, u) in enumerate(rows, 1):
        text += f"{i}. {u.get('name') or display_user(int(uid))}: {u.get('pipisa', 0.0):.1f} —Å–º\n"
    await update.message.reply_text(text, parse_mode="HTML")

# ===================== –î–† (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ) =====================
def _parse_day_month(bday: str):
    if not bday:
        return None
    bday = bday.strip()
    for fmt in ("%d.%m.%Y", "%d.%m"):
        try:
            dt = datetime.strptime(bday, fmt)
            return dt.day, dt.month
        except Exception:
            pass
    return None

async def birthday_job(context: ContextTypes.DEFAULT_TYPE):
    today = date.today()
    for suid, u in state["users"].items():
        dm = _parse_day_month(u.get("bday", ""))
        if not dm:
            continue
        d, m = dm
        if d == today.day and m == today.month:
            name = u.get("name") or display_user(int(suid))
            text = f"üéÇ–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {name}! –ü–æ–∂–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è, –ª—é–±–≤–∏ –∏ –ø–æ–±–µ–¥ü•≥"
            try:
                await context.bot.send_message(chat_id=CHAT_ID, text=text, parse_mode="HTML")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ: {e}")

# ===================== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò –ó–ê–ü–£–°–ö =====================
def build_application():
    app = ApplicationBuilder().token(TOKEN).build()

    # –ø—Ä–∏–≤–µ—Ç/–ø—Ä–æ—â–∞–Ω–∏–µ
    app.add_handler(ChatMemberHandler(greet_or_bye, ChatMemberHandler.CHAT_MEMBER))

    # –ø—Ä–æ—Ñ–∏–ª—å ‚Äî –ø–æ—à–∞–≥–æ–≤–æ
    edit_conv = ConversationHandler(
        entry_points=[CommandHandler("editprofile", editprofile)],
        states={
            STEP_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_name)],
            STEP_NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_nick)],
            STEP_UID:  [MessageHandler(filters.TEXT & ~filters.COMMAND, step_uid)],
            STEP_BDAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_bday)],
            STEP_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_city)],
            STEP_TIKTOK: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_tiktok)],
            STEP_QUOTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_quote)],
        },
        fallbacks=[],
    )
    app.add_handler(edit_conv)
    app.add_handler(CommandHandler("profile", profile_cmd))

    # –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("about", about))
    app.add_handler(CommandHandler("info", info_cmd))
    app.add_handler(CommandHandler("rules", rules))

    # —Ñ–∞–Ω
    app.add_handler(CommandHandler("pipisa", pipisa))
    app.add_handler(CommandHandler("duel", duel))
    app.add_handler(CommandHandler("top5", top5))
    app.add_handler(CommandHandler("rating", rating))
    app.add_handler(CommandHandler("hugs", hugs))
    app.add_handler(CommandHandler("lesbi", lesbi))
    app.add_handler(CommandHandler("role", role))
    app.add_handler(CommandHandler("compliment", compliment))

    # –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    app.add_handler(CommandHandler("predskaz", predskaz))

    # –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –î–†
    app.job_queue.run_daily(birthday_job, time(hour=9, minute=0))

    # —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π ‚Äî ¬´—Ç–∏—Ö–æ–µ¬ª –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ—Ö
    app.add_handler(MessageHandler(filters.ALL, track_seen_user))

    return app

if __name__ == "__main__":
    application = build_application()
    print("OnlyGirls bot –∑–∞–ø—É—â–µ–Ω‚Ä¶")
    application.run_polling(close_loop=False)
