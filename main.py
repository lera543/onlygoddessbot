
import logging
import sqlite3
from datetime import datetime
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ChatMemberHandler, ContextTypes, filters
)
from config import TOKEN

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

conn = sqlite3.connect("db.sqlite3", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    joined_date TEXT,
    bday TEXT,
    nickname TEXT,
    messages INTEGER DEFAULT 0,
    karma INTEGER DEFAULT 0,
    pp_size REAL DEFAULT 0,
    last_grow_date TEXT
)
""")
conn.commit()

BAD_WORDS = ["–ø—É—Ç–∏–Ω", "—É–∫—Ä–∞–∏–Ω–∞", "—Ä–æ—Å—Å–∏—è", "–≤–æ–π–Ω–∞", "–∫—Ä–µ–º–ª—å", "–º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è", "–ø–æ–ª–∏—Ç–∏–∫–∞", "–Ω–∞–≤–∞–ª—å–Ω—ã–π"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! üåô\n"
        "–Ø ‚Äî –ú–∞—Ç—å –ë–æ–≥–∏–Ω—å. –ù–∞–ø–∏—à–∏ /setprofile –∏ –≤—Å—Ç—É–ø–∏ –≤ –º–∞–≥–∏—á–µ—Å–∫–∏–π –∫—Ä—É–≥ ‚ú®"
    )

async def prediction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    import random
    predictions = [
        "–°–µ–≥–æ–¥–Ω—è —Ç—ã –æ—á–∞—Ä—É–µ—à—å –≤—Å–µ—Ö üåü",
        "–ö—Ç–æ-—Ç–æ –∏–∑ –∫–ª–∞–Ω–∞ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —Ç–µ–±—è —Å –∏–Ω—Ç–µ—Ä–µ—Å–æ–º üëÄ",
        "–¢–≤–æ—è –ø–∏–ø–∏—Å–∞ –∏–∑–ª—É—á–∞–µ—Ç –º–∞–≥–∏—é üçÜ‚ú®",
        "–ó–∞–≤–∞—Ä–∏ —á–∞–π, –±—É–¥–µ—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å üçµ",
        "–û–±–Ω–∏–º–∏ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å ‚Äî –∏ –ø–æ–ª—É—á–∏—à—å +1 –∫ –ª—é–±–≤–∏ üíò",
    ]
    await update.message.reply_text(random.choice(predictions))

async def set_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username or ""
    first_name = user.first_name or ""
    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    if cursor.fetchone():
        await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /myprofile ‚ú®")
        return
    joined = datetime.now().strftime("%Y-%m-%d")
    cursor.execute("INSERT INTO users (user_id, username, first_name, joined_date) VALUES (?, ?, ?, ?)",
                   (user_id, username, first_name, joined))
    conn.commit()
    await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω! üíñ –ù–∞–ø–∏—à–∏ /grow —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—É—Ç—å –ø–∏–ø–∏—Å—ã.")

async def my_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    cursor.execute("SELECT * FROM users WHERE user_id=?", (user.id,))
    data = cursor.fetchone()
    if not data:
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–ª–∞ –ø—Ä–æ—Ñ–∏–ª—å. –ù–∞–ø–∏—à–∏ /setprofile üåô")
        return
    _, username, name, joined, bday, nickname, msgs, karma, pp, _ = data
    days_in = (datetime.now() - datetime.strptime(joined, "%Y-%m-%d")).days
    text = (
        f"üå∏ –ü—Ä–æ—Ñ–∏–ª—å {name} (@{username})\n"
        f"üîπ –ù–∏–∫: {nickname or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üéÇ –î–†: {bday or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìÜ –í —á–∞—Ç–µ: {days_in} –¥–Ω–µ–π\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {msgs}\n"
        f"üíñ –ö–∞—Ä–º–∞: {karma}\n"
        f"üçÜ –ü–∏–ø–∏—Å–∞: {pp:.1f} —Å–º"
    )
    await update.message.reply_text(text)

async def grow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    cursor.execute("SELECT pp_size, last_grow_date FROM users WHERE user_id=?", (user.id,))
    row = cursor.fetchone()
    if not row:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å: /setprofile")
        return
    pp_size, last_grow = row
    today = datetime.now().date()
    if last_grow == str(today):
        await update.message.reply_text("–¢—ã —É–∂–µ –ø–æ–ª–∏–ª–∞ —Å–≤–æ—é –ø–∏–ø–∏—Å—É —Å–µ–≥–æ–¥–Ω—è üå±")
        return
    import random
    growth = round(random.uniform(0.1, 2.5), 1)
    new_size = round(pp_size + growth, 1)
    cursor.execute("UPDATE users SET pp_size=?, last_grow_date=? WHERE user_id=?", (new_size, str(today), user.id))
    conn.commit()
    await update.message.reply_text(f"–¢–≤–æ—è –ø–∏–ø–∏—Å–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ {growth} —Å–º –∏ —Ç–µ–ø–µ—Ä—å {new_size} —Å–º üçÜ‚ú®")

async def size(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    cursor.execute("SELECT pp_size FROM users WHERE user_id=?", (user.id,))
    row = cursor.fetchone()
    if not row:
        await update.message.reply_text("–°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å: /setprofile")
        return
    await update.message.reply_text(f"–¢–≤–æ—è —Ç–µ–∫—É—â–∞—è –ø–∏–ø–∏—Å–∞ ‚Äî {row[0]:.1f} —Å–º üçÜ")

async def ranking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("SELECT first_name, pp_size FROM users ORDER BY pp_size DESC LIMIT 5")
    rows = cursor.fetchall()
    if not rows:
        await update.message.reply_text("–†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç. –ü–æ–ª–∏–≤–∞–π –ø–∏–ø–∏—Å—É —á–∞—â–µ üå±")
        return
    text = "üçÜ –¢–æ–ø –ø–∏–ø–∏—Å –∫–ª–∞–Ω–∞:\n"
    for i, (name, size) in enumerate(rows, 1):
        text += f"{i}. {name}: {size:.1f} —Å–º\n"
    await update.message.reply_text(text)

async def anti_politics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text.lower()
    if any(word in msg for word in BAD_WORDS):
        await update.message.delete()
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ö†Ô∏è –ú–∞–≥–∏—è –æ—Å–ª–∞–±–µ–≤–∞–µ—Ç –æ—Ç —Å–ª–æ–≤ –æ –ø–æ–ª–∏—Ç–∏–∫–µ. –ß–∞—Ç –∑–∞–º–µ–¥–ª–µ–Ω.",
        )
        await context.bot.set_chat_slow_mode_delay(update.effective_chat.id, 60)

async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    member = update.chat_member.new_chat_member
    if member.status == "member":
        name = member.user.first_name
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}! –ù–∞–ø–∏—à–∏ /setprofile –∏ –ø—É—Å—Ç—å –º–∞–≥–∏—è –Ω–∞—á–Ω—ë—Ç—Å—è ‚ú®"
        )

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("prediction", prediction))
    app.add_handler(CommandHandler("setprofile", set_profile))
    app.add_handler(CommandHandler("myprofile", my_profile))
    app.add_handler(CommandHandler("grow", grow))
    app.add_handler(CommandHandler("size", size))
    app.add_handler(CommandHandler("ranking", ranking))
    app.add_handler(ChatMemberHandler(welcome, ChatMemberHandler.CHAT_MEMBER))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, anti_politics))
    app.run_polling()

if __name__ == "__main__":
    main()
