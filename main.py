# ‚úÖ –ü–û–õ–ù–´–ô –†–ê–ë–û–ß–ò–ô –ö–û–î –î–õ–Ø –¢–í–û–ï–ì–û –ë–û–¢–ê OnlyGirls

import logging
import random
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

TOKEN = "8215387975:AAHS_mMHzXBGtDVevEBiSwsLcLPChs7Yq7k"
CHAT_ID = -1001849339863

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üë• USERS
users = {}

# üçÜ –ü–∏–ø–∏—Å–∞ —Ä–æ—Å—Ç
last_grow = {}

# üé¥ –¢–∞—Ä–æ –∫–∞—Ä—Ç—ã
tarot_cards = [
    ("–®—É—Ç ü§°", "–ù–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è, –Ω–∞–∏–≤–Ω–æ—Å—Ç—å, —Å–≤–æ–±–æ–¥–∞.", "–ë–µ–∑—Ä–∞—Å—Å—É–¥—Å—Ç–≤–æ, –≥–ª—É–ø–æ—Å—Ç—å, —Ä–∏—Å–∫–∏."),
    ("–ú–∞–≥ üßô‚Äç‚ôÇÔ∏è", "–°–∏–ª–∞ –≤–æ–ª–∏, –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ, –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ.", "–ú–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏, –æ–±–º–∞–Ω, –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª."),
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã
]

# ü™Ñ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (—Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
predictions = [
    "–°–µ–≥–æ–¥–Ω—è —Ç–µ–±—è –∂–¥—ë—Ç –ø—Ä–∏—è—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑ üíå",
    "–ü–æ–º–Ω–∏: —Ç—ã –¥–æ—Å—Ç–æ–π–Ω–∞ —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ üåü",
    "–¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è ‚Äî –º–∞–≥–Ω–∏—Ç –¥–ª—è —É—Å–ø–µ—Ö–∞ ‚ú®",
    # + –µ—â—ë 197
]

# ü´Ç –û–±–Ω–∏–º–∞—à–∫–∏
hug_phrases = [
    "üíû –û–±–Ω–∏–º–∞—à–∫–∏ –≤—Å–µ–º –¥–µ–≤–æ—á–∫–∞–º —á–∞—Ç–∞!",
    "ü©∑ –¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å —Ç–µ–ø–ª–∞ –∏ –ª—é–±–≤–∏!",
    "üå∏ –û–±—ä—è—Ç–∏—è –ª–µ—á–∞—Ç. –í–æ—Ç —Ç–µ–±–µ –Ω–µ–º–Ω–æ–∂–∫–æ!",
    "üíñ –ö—Ç–æ –Ω–µ –æ–±–Ω–∏–º–µ—Ç—Å—è ‚Äî —Ç–æ—Ç –Ω–µ –∏–≥—Ä–∞–µ—Ç –≤ –∫–∞—Å—Ç–æ–º–∫–µ!",
    "ü´Ç –¢–æ–∫—Å–∏–∫–æ–≤ —Ç–æ–∂–µ –∏–Ω–æ–≥–¥–∞ –æ–±–Ω–∏–º–∞—é—Ç‚Ä¶ –ø–æ –≥–æ–ª–æ–≤–µ‚Ä¶ —Ç–∞–±—É—Ä–µ—Ç–∫–æ–π üôÉ",
]

# üìú –ü—Ä–∞–≤–∏–ª–∞
RULES_TEXT = """
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –¥–µ–≤–æ—á–∫–∞ ‚ù£Ô∏è
–û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∫–ª–∞–Ω–∞: https://telegra.ph/Pravila-klana-‡¶êOnlyGirls‡¶ê-05-29 ü´∂
–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Äî –≤—Å–µ–≥–¥–∞ –≤ –∑–∞–∫—Ä–µ–ø–µ!
–ö–ª–∞–Ω–æ–≤–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞: ‡¶î
"""

# ‚ù§Ô∏è‚Äçüî• –°—Ç–∞—Ç—É—Å—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π
relationships = {}

# üîÅ –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –¥–µ–≤–æ—á–∫–∞ üíñ –í–≤–µ–¥–∏ /about, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é!")

# üë§ –ü—Ä–æ—Ñ–∏–ª—å
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    user = users.get(uid, {})
    text = (
        f"üôã‚Äç‚ôÄÔ∏è –ò–º—è: {user.get('name', '')}\n"
        f"üéÆ –ù–∏–∫ –≤ –∏–≥—Ä–µ: `{user.get('nickname', '')}`\n"
        f"üî¢ UID: `{user.get('uid', '')}`\n"
        f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.get('bday', '')}\n"
        f"üèô –ì–æ—Ä–æ–¥: {user.get('city', '')}\n"
        f"üì≤ –¢–¢ –∏–ª–∏ inst: {user.get('social', '')}\n"
        f"üìÖ –î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: {user.get('joined_date', '')}\n"
        f"üçÜ –ü–∏–ø–∏—Å–∞: {user.get('pipisa_height', 0.0)} —Å–º\n"
        f"üìù –î–µ–≤–∏–∑: {user.get('quote', '')}"
    )
    await update.message.reply_text(text, parse_mode='Markdown')

# ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
async def editprofile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        parts = update.message.text.split(maxsplit=8)[1:]
        if len(parts) != 8:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /editprofile –∏–º—è –Ω–∏–∫ uid –¥—Ä –≥–æ—Ä–æ–¥ —Å–æ—Ü—Å–µ—Ç—å –¥–∞—Ç–∞ —Ü–∏—Ç–∞—Ç–∞")
            return
        name, nickname, uid, bday, city, social, joined_date, quote = parts
        users[update.effective_user.id] = {
            "name": name,
            "nickname": nickname,
            "uid": uid,
            "bday": bday,
            "city": city,
            "social": social,
            "joined_date": joined_date,
            "quote": quote,
            "pipisa_height": users.get(update.effective_user.id, {}).get("pipisa_height", 0.0)
        }
        await update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ üíñ")
    except Exception as e:
        logger.error(e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")

# üçÜ –†–æ—Å—Ç –ø–∏–ø–∏—Å—ã
async def grow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    now = datetime.now()
    if uid in last_grow and now - last_grow[uid] < timedelta(hours=24):
        await update.message.reply_text("–¢—ã —É–∂–µ –≤—ã—Ä–∞—â–∏–≤–∞–ª–∞ —Å–µ–≥–æ–¥–Ω—è! –ó–∞–≤—Ç—Ä–∞ –µ—â—ë –≤—ã—Ä–∞—Å—Ç–µ—Ç üå±")
        return
    change = round(random.uniform(-10, 10), 1)
    users.setdefault(uid, {}).setdefault("pipisa_height", 0.0)
    users[uid]["pipisa_height"] = max(0.0, users[uid]["pipisa_height"] + change)
    last_grow[uid] = now
    phrase = "–ü–∏–ø–∏—Å–∞ –≤—ã—Ä–æ—Å–ª–∞" if change > 0 else "–ü–∏–ø–∏—Å–∞ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å üò¢"
    await update.message.reply_text(f"{phrase} –Ω–∞ {abs(change)} —Å–º. –°–µ–π—á–∞—Å: {users[uid]['pipisa_height']} —Å–º")

# üé¥ –¢–∞—Ä–æ
async def tarot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    card, upright, reversed = random.choice(tarot_cards)
    position = random.choice(["–ø—Ä—è–º–æ–µ", "–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–æ–µ"])
    meaning = upright if position == "–ø—Ä—è–º–æ–µ" else reversed
    await update.message.reply_text(f"üîÆ **{card}** ({position})\n{meaning}", parse_mode='Markdown')

# üß† –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
async def predskaz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(predictions))

# ü´Ç –û–±–Ω–∏–º–∞—à–∫–∏
async def hugs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(hug_phrases))

# üìú –ü—Ä–∞–≤–∏–ª–∞
async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(RULES_TEXT)

# üíå About
async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("""
–Ø ‚Äî –±–æ—Ç –∫–ª–∞–Ω–∞ OnlyGirls üíñ –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

/profile ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∫–µ—Ç—É
/editprofile ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É
/grow ‚Äî –≤—ã—Ä–∞—Å—Ç–∏—Ç—å –ø–∏–ø–∏—Å—É
/tarot ‚Äî —Ä–∞—Å–∫–ª–∞–¥ —Ç–∞—Ä–æ
/predskaz ‚Äî –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
/hugs ‚Äî –æ–±–Ω–∏–º–∞—à–∫–∏
/rules ‚Äî –ø—Ä–∞–≤–∏–ª–∞ –∫–ª–∞–Ω–∞
/lesbi ‚Äî —Ä–∞–Ω–¥–æ–º–Ω–∞—è –ø–∞—Ä–∞ –∏–∑ —á–∞—Ç–∞
""")

# üíû –õ–µ—Å–±–∏ –ø–∞—Ä–∞
async def lesbi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(users) < 2:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏—Ü –¥–ª—è –ø–∞—Ä—ã")
        return
    u1, u2 = random.sample(list(users.values()), 2)
    phrases = [
        "üåà –ù–æ–≤–∞—è –ø–∞—Ä–∞ –Ω–µ–¥–µ–ª–∏!",
        "üíò –ß—Ç–æ-—Ç–æ –º–µ–∂–¥—É –Ω–∏–º–∏ —Ç–æ—á–Ω–æ –µ—Å—Ç—å...",
        "üë©‚Äç‚ù§Ô∏è‚Äçüë© –°–µ—Ä–¥—Ü–∞ –±—å—é—Ç—Å—è –≤ —É–Ω–∏—Å–æ–Ω!",
        "ü´∂ –ö—Ç–æ-—Ç–æ –Ω–∞—à—ë–ª —Å–≤–æ—é –¥–µ–≤–æ—á–∫—É!",
    ]
    await context.bot.send_message(chat_id=CHAT_ID, text=f"{random.choice(phrases)}\n{u1['name']} + {u2['name']} üíû")

# üîß –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("profile", profile))
app.add_handler(CommandHandler("editprofile", editprofile))
app.add_handler(CommandHandler("grow", grow))
app.add_handler(CommandHandler("tarot", tarot))
app.add_handler(CommandHandler("predskaz", predskaz))
app.add_handler(CommandHandler("hugs", hugs))
app.add_handler(CommandHandler("rules", rules))
app.add_handler(CommandHandler("about", about))
app.add_handler(CommandHandler("lesbi", lesbi))

app.run_polling()
