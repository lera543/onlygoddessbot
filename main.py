# -*- coding: utf-8 -*-
import json
import logging
import random
from typing import Optional
from datetime import datetime, date, time
from pathlib import Path

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ChatMemberHandler,
    ConversationHandler, ContextTypes, filters
)

# ===================== –ù–ê–°–¢–†–û–ô–ö–ò =====================
TOKEN = "8215387975:AAHS_mMHzXBGtDVevEBiSwsLcLPChs7Yq7k"
CHAT_ID = -1001849339863  # –æ–±—â–∏–π —á–∞—Ç
DATA_FILE = Path("data.json")

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO
)
logger = logging.getLogger("OnlyGirlsBot")

# ===================== –•–†–ê–ù–ò–õ–ò–©–ï =====================
# state:
# users: {
#   user_id(str): {
#     "name" (HTML-–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–º—É –∏–º–µ–Ω–∏),
#     "first_name", "username",
#     "nickname", "uid", "bday", "city",
#     "tiktok", "quote",
#     "pipisa", "last_pipisa", "last_prediction"
#   }
# }
# known_users: [int, ...]
# last_lesbi_date: "YYYY-MM-DD"
# last_lesbi_pair: [user_id_a(int), user_id_b(int)]
state = {
    "users": {},
    "known_users": [],
    "last_lesbi_date": None,
    "last_lesbi_pair": None
}

def load_state():
    if DATA_FILE.exists():
        try:
            data = json.loads(DATA_FILE.read_text(encoding="utf-8"))
            state.update(data)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å data.json: {e}")

def save_state():
    try:
        DATA_FILE.write_text(json.dumps(state, ensure_ascii=False, indent=2), encoding="utf-8")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è data.json: {e}")

load_state()

# ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï =====================
def today_str() -> str:
    return date.today().isoformat()

def ensure_user(user_id: int, first_name: Optional[str] = None, username: Optional[str] = None):
    suid = str(user_id)
    if suid not in state["users"]:
        state["users"][suid] = {
            "name": "",
            "first_name": first_name or "",
            "username": username or "",
            "nickname": "",
            "uid": "",
            "bday": "",
            "city": "",
            "tiktok": "",
            "quote": "",
            "pipisa": 0.0,
            "last_pipisa": None,
            "last_prediction": None,
        }
    else:
        if first_name:
            state["users"][suid]["first_name"] = first_name
        if username:
            state["users"][suid]["username"] = username

    if user_id not in state.get("known_users", []):
        state["known_users"].append(user_id)

def tg_link_from_id(user_id: int, text: str) -> str:
    return f'<a href="tg://user?id={user_id}">{text}</a>'

def display_user(user_id: int) -> str:
    """–ö—Ä–∞—Å–∏–≤–æ–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏—Ü—ã: –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∏–º—è (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ), –∏–ª–∏ first_name/username, –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –ø–æ id."""
    suid = str(user_id)
    u = state["users"].get(suid)
    if u:
        if u.get("name"):
            return u["name"]
        if u.get("first_name"):
            return tg_link_from_id(user_id, u["first_name"])
        if u.get("username"):
            return "@" + u["username"]
    return tg_link_from_id(user_id, "–¥–µ–≤–æ—á–∫–∞")

def is_url(s: str) -> bool:
    return isinstance(s, str) and (s.startswith("http://") or s.startswith("https://"))

# ===================== –ü–†–ò–í–ï–¢–°–¢–í–ò–ï –ù–û–í–´–• =====================
async def greet_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cmu = update.chat_member
    if not cmu:
        return
    old = cmu.old_chat_member.status
    new = cmu.new_chat_member.status

    if (old in ("left", "kicked")) and (new in ("member", "administrator", "creator")):
        user = cmu.new_chat_member.user
        ensure_user(user.id, user.first_name, user.username)
        save_state()

        text = (
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.mention_html()}‚ù£Ô∏è "
            f'–û–∑–Ω–∞–∫–æ–º—å—Å—è –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∫–ª–∞–Ω–∞ '
            f'(<a href="https://telegra.ph/Pravila-klana-%E0%A6%90OnlyGirls%E0%A6%90-05-29">–∑–¥–µ—Å—å</a>)ü´∂ '
            f"–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Å–µ–≥–¥–∞ –≤ –∑–∞–∫—Ä–µ–ø–µ‚ùóÔ∏è –ö–ª–∞–Ω–æ–≤–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞: ‡¶î"
        )
        await context.bot.send_message(chat_id=cmu.chat.id, text=text, parse_mode="HTML")

# –û–±–Ω–æ–≤–ª—è–µ–º known_users –ø–æ –ª—é–±–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
async def track_speaker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user:
        return
    u = update.effective_user
    ensure_user(u.id, u.first_name, u.username)
    save_state()

# ===================== /START –∏ /ABOUT =====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ensure_user(user.id, user.first_name, user.username)
    save_state()
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ú–∞—Ç—å –ë–æ–≥–∏–Ω—å –¥–ª—è –∫–ª–∞–Ω–∞ OnlyGirls üíñ\n"
        "–ù–∞–ø–∏—à–∏ /about —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã."
    )

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ú® –ö–æ–º–∞–Ω–¥—ã:\n"
        "/editprofile ‚Äî –∑–∞–ø–æ–ª–Ω–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–ø–æ—à–∞–≥–æ–≤–æ)\n"
        "/profile ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/pipisa ‚Äî –≤—ã—Ä–∞—Å—Ç–∏—Ç—å/—É–º–µ–Ω—å—à–∏—Ç—å –ø–∏–ø–∏—Å—É (1 —Ä–∞–∑ –≤ –¥–µ–Ω—å)\n"
        "/top5 ‚Äî —Ç–æ–ø-5 –ø–æ –ø–∏–ø–∏—Å–µ\n"
        "/rating ‚Äî –ø–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–∏–ø–∏—Å\n"
        "/predskaz ‚Äî –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–Ω—è (1 —Ä–∞–∑ –≤ –¥–µ–Ω—å)\n"
        "/hugs [@—é–∑–µ—Ä] ‚Äî –æ–±–Ω–∏–º–∞—à–∫–∏ (–¥–ª—è –≤—Å–µ—Ö –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ)\n"
        "/compliment [@—é–∑–µ—Ä] ‚Äî –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç (–∫–æ–º—É-—Ç–æ –∏–ª–∏ —Ä–∞–Ω–¥–æ–º)\n"
        "/lesbi ‚Äî –ª–µ—Å–±–∏-–ø–∞—Ä–∞ –¥–Ω—è (1 —Ä–∞–∑ –≤ –¥–µ–Ω—å)\n"
        "/role @—é–∑–µ—Ä ‚Äî ¬´–∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è —Å–∞–º–∞—è‚Ä¶¬ª\n"
        "/rules ‚Äî –ø—Ä–∞–≤–∏–ª–∞ –∫–ª–∞–Ω–∞ (—Å—Å—ã–ª–∫–∞)"
    )

# ===================== /RULES (—Å—Å—ã–ª–∫–∞) =====================
async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ö–æ—Ç–∏–∫, –ø—Ä–∞–≤–∏–ª–∞ –∫–ª–∞–Ω–∞ <a href="https://telegra.ph/Pravila-klana-%E0%A6%90OnlyGirls%E0%A6%90-05-29">–∑–¥–µ—Å—å</a> ü´∂',
        parse_mode="HTML"
    )

# ===================== –ü–†–û–§–ò–õ–¨ (–ø–æ—à–∞–≥–æ–≤–æ) =====================
(
    STEP_NAME,
    STEP_NICK,
    STEP_UID,
    STEP_BDAY,
    STEP_CITY,
    STEP_TIKTOK,
    STEP_QUOTE
) = range(7)

def render_profile(u: dict) -> str:
    name = u.get("name") or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    nickname = u.get("nickname") or ""
    uid = u.get("uid") or ""
    bday = u.get("bday") or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    city = u.get("city") or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    tiktok = u.get("tiktok") or ""
    quote = u.get("quote") or "‚Äî"
    pipisa = float(u.get("pipisa") or 0.0)

    # TikTok —Å—Ç—Ä–æ–∫–∞
    if tiktok:
        if is_url(tiktok):
            tt_line = f'üì≤ TikTok: <a href="{tiktok}">TikTok</a>'
        else:
            at = tiktok if tiktok.startswith("@") else f"@{tiktok}"
            tt_line = f"üì≤ TikTok: {at}"
    else:
        tt_line = "üì≤ TikTok: –Ω–µ —É–∫–∞–∑–∞–Ω"

    text = (
        f"üôã‚Äç‚ôÄÔ∏è –ò–º—è: {name}\n"
        f"üéÆ –ù–∏–∫ –≤ –∏–≥—Ä–µ: <code>{nickname}</code>\n"
        f"üî¢ UID: <code>{uid}</code>\n"
        f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {bday}\n"
        f"üèô –ì–æ—Ä–æ–¥: {city}\n"
        f"{tt_line}\n"
        f"üçÜ –ü–∏–ø–∏—Å–∞: {pipisa:.1f} —Å–º\n"
        f"üìù –î–µ–≤–∏–∑: {quote}"
    )
    return text

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    ensure_user(update.effective_user.id, update.effective_user.first_name, update.effective_user.username)
    u = state["users"].get(uid)
    await update.message.reply_text(render_profile(u), parse_mode="HTML")

async def editprofile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    ensure_user(u.id, u.first_name, u.username)
    context.user_data["profile_answers"] = {}
    await update.message.reply_text("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–∏–º—è)")
    return STEP_NAME

async def step_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    typed = (update.message.text or "").strip()
    uid = update.effective_user.id
    clickable_name = tg_link_from_id(uid, typed if typed else (update.effective_user.first_name or "–¥–µ–≤–æ—á–∫–∞"))
    context.user_data["profile_answers"]["name"] = clickable_name
    await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è –Ω–∏–∫ –≤ –∏–≥—Ä–µ?")
    return STEP_NICK

async def step_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile_answers"]["nickname"] = (update.message.text or "").strip()
    await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è UID?")
    return STEP_UID

async def step_uid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile_answers"]["uid"] = (update.message.text or "").strip()
    await update.message.reply_text("–ö–æ–≥–¥–∞ —É —Ç–µ–±—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2000 –∏–ª–∏ 01.01)")
    return STEP_BDAY

async def step_bday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile_answers"]["bday"] = (update.message.text or "").strip()
    await update.message.reply_text("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")
    return STEP_CITY

async def step_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile_answers"]["city"] = (update.message.text or "").strip()
    await update.message.reply_text("–û—Å—Ç–∞–≤—å TikTok: —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∏–∫ (@username):")
    return STEP_TIKTOK

async def step_tiktok(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile_answers"]["tiktok"] = (update.message.text or "").strip()
    await update.message.reply_text("–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –¥–µ–≤–∏–∑–æ–º –∏–ª–∏ –ª—é–±–∏–º–æ–π —Ü–∏—Ç–∞—Ç–æ–π:")
    return STEP_QUOTE

async def step_quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile_answers"]["quote"] = (update.message.text or "").strip()
    suid = str(update.effective_user.id)
    ensure_user(update.effective_user.id, update.effective_user.first_name, update.effective_user.username)

    stored = state["users"][suid]
    for k, v in context.user_data["profile_answers"].items():
        stored[k] = v

    save_state()
    await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ")
    return ConversationHandler.END

# ===================== /pipisa (1 —Ä–∞–∑ –≤ –¥–µ–Ω—å) =====================
PIPISA_UP_REACTIONS = [
    "–û–Ω–∞ —Å—Ç—Ä–µ–º–∏—Ç—Å—è –∫ –≤–µ—Ä—à–∏–Ω–∞–º! üìà",
    "–í–ø–µ—Ä–µ–¥ –∏ –≤—ã—à–µ ‚Äî –≥–æ—Ä–¥–∏–º—Å—è! ü•≥",
    "–¢–∞–∫ —Ä–∞—Å—Ç—ë—Ç —Ç–æ–ª—å–∫–æ –ª–µ–≥–µ–Ω–¥–∞! üåü",
    "–°–∏—è–µ—Ç –∏ —Ä–∞–¥—É–µ—Ç —Ö–æ–∑—è–π–∫—É! ‚ú®",
]
PIPISA_DOWN_REACTIONS = [
    "–ù–∏—á–µ–≥–æ, –∑–∞–≤—Ç—Ä–∞ –≤–µ—Ä–Ω—ë–º –ø–æ–∑–∏—Ü–∏–∏ üí™",
    "–ò–Ω–æ–≥–¥–∞ –∏ –≥–µ—Ä–æ—è–º –Ω—É–∂–µ–Ω –æ—Ç–¥—ã—Ö üåßÔ∏è",
    "–û–±–Ω–∏–º–µ–º ‚Äî –∏ –≤—Å—ë –ø—Ä–æ–π–¥—ë—Ç ü´Ç",
    "–°–º–µ–Ω–∏–º –≤–∞–π–± ‚Äî –ø–æ–π–¥—ë—Ç –≤–≤–µ—Ä—Ö üåà",
]

def _rand_delta():
    d = round(random.uniform(-10.0, 10.0), 1)
    if d == 0.0:
        d = 0.1 if random.random() > 0.5 else -0.1
    return d

async def pipisa(update: Update, context: ContextTypes.DEFAULT_TYPE):
    suid = str(update.effective_user.id)
    ensure_user(update.effective_user.id, update.effective_user.first_name, update.effective_user.username)
    u = state["users"][suid]

    if u.get("last_pipisa") == today_str():
        await update.message.reply_text("–ü–∏–ø–∏—Å—É –º–æ–∂–Ω–æ —Ä–∞—Å—Ç–∏—Ç—å/–º–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å! üå±")
        return

    delta = _rand_delta()
    new_val = round(float(u.get("pipisa", 0.0)) + delta, 1)
    if new_val < 0:
        new_val = 0.0

    u["pipisa"] = new_val
    u["last_pipisa"] = today_str()
    save_state()

    if delta > 0:
        phrase = random.choice([
            f"üçÜ –¢–≤–æ—è –ø–∏–ø–∏—Å–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ {delta:.1f} —Å–º! {random.choice(PIPISA_UP_REACTIONS)} –¢–µ–ø–µ—Ä—å: {new_val:.1f} —Å–º.",
            f"üçÜ –û–≥–æ! +{delta:.1f} —Å–º ‚Äî –≤–æ—Ç —ç—Ç–æ —Ä–æ—Å—Ç! {random.choice(PIPISA_UP_REACTIONS)} –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {new_val:.1f} —Å–º.",
        ])
    else:
        phrase = random.choice([
            f"üçÜ –û—É‚Ä¶ –ø–∏–ø–∏—Å–∞ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å –Ω–∞ {abs(delta):.1f} —Å–º. {random.choice(PIPISA_DOWN_REACTIONS)} –°–µ–π—á–∞—Å: {new_val:.1f} —Å–º.",
            f"üçÜ –ù–µ–º–Ω–æ–≥–æ –ø—Ä–æ—Å–µ–ª–∞ ({abs(delta):.1f} —Å–º). {random.choice(PIPISA_DOWN_REACTIONS)} –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {new_val:.1f} —Å–º.",
        ])
    await update.message.reply_text(phrase)

# ===================== –†–ï–ô–¢–ò–ù–ì–ò =====================
async def top5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = sorted(state["users"].items(), key=lambda kv: kv[1].get("pipisa", 0.0), reverse=True)[:5]
    if not rows:
        await update.message.reply_text("–†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç. –ü–æ–ª–∏–≤–∞–π –ø–∏–ø–∏—Å—É —á–∞—â–µ üå±")
        return
    text = "üèÜ –¢–û–ü-5 –ø–∏–ø–∏—Å –∫–ª–∞–Ω–∞:\n"
    for i, (uid, u) in enumerate(rows, 1):
        text += f"{i}. {u.get('name') or display_user(int(uid))}: {u.get('pipisa', 0.0):.1f} —Å–º\n"
    await update.message.reply_text(text, parse_mode="HTML")

async def rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = sorted(state["users"].items(), key=lambda kv: kv[1].get("pipisa", 0.0), reverse=True)
    if not rows:
        await update.message.reply_text("–†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç. –ü–æ–ª–∏–≤–∞–π –ø–∏–ø–∏—Å—É —á–∞—â–µ üå±")
        return
    text = "üìä –ü–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–∏–ø–∏—Å:\n"
    for i, (uid, u) in enumerate(rows, 1):
        text += f"{i}. {u.get('name') or display_user(int(uid))}: {u.get('pipisa', 0.0):.1f} —Å–º\n"
    await update.message.reply_text(text, parse_mode="HTML")

# ===================== –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø (200 —à—Ç—É–∫) =====================
PREDICTIONS = [
    # 1‚Äì100 —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ
    "–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –¥–µ–Ω—å ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ –æ–±–ª–∞—á–Ω–æ ‚òÅÔ∏è",
    "–£–ª—ã–±–∫–∞ —Ä–µ—à–∏—Ç –±–æ–ª—å—à–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—è üòä",
    "–î–µ–ª–∞–π –ø–æ –ª—é–±–≤–∏ ‚Äî –∏ –±—É–¥–µ—Ç –∫–∞–π—Ñ üíñ",
    "–í—Å–µ–ª–µ–Ω–Ω–∞—è —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ ‚ú®",
    "–¢—ã –≤–∏–¥–∏—à—å –±–æ–ª—å—à–µ, —á–µ–º –¥—Ä—É–≥–∏–µ ‚Äî –¥–æ–≤–µ—Ä—å—Å—è —Å–µ–±–µ üëÅÔ∏è",
    "–ú–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ —Ç–æ–∂–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥ üë£",
    "–°–ª—É—Ö–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Å–ª—É—Ö–∞–º–∏ ‚Äî –±—É–¥—å –≤—ã—à–µ üïäÔ∏è",
    "–ü—É—Å—Ç—å –¥—É—à–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ—Ç–∞–Ω—Ü—É–µ—Ç üíÉ",
    "–¢—ã ‚Äî —á—å—ë-—Ç–æ ¬´–ø–æ–≤–µ–∑–ª–æ¬ª üçÄ",
    "–°–∫–∞–∂–∏ —Å–µ–±–µ ¬´–º–æ–ª–æ–¥–µ—Ü¬ª ‚Äî —Ç—ã —ç—Ç–æ —É—Å–ª—ã—à–∏—à—å ü•∞",
    "–¢–∞–º, –≥–¥–µ —Ç–≤–æ—ë –≤–Ω–∏–º–∞–Ω–∏–µ, —Ç–∞–º –∏ —Ç–≤–æ—è —Å–∏–ª–∞ üå±",
    "–õ—É—á—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ —Ç—ë–ø–ª–æ–≥–æ —á–∞—è üçµ",
    "–ß—É–¥–µ—Å–∞ –ª—é–±—è—Ç —Å–º–µ–ª—ã—Ö ‚Äî —Ä–∏—Å–∫–Ω–∏ —á—É—Ç—å-—á—É—Ç—å üåà",
    "–¢—ã —É–∫—Ä–∞—à–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–Ω—è üí´",
    "–ö–∞–∂–¥—ã–π –¥–æ–±—Ä—ã–π –∂–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –±—É–º–µ—Ä–∞–Ω–≥–æ–º üéØ",
    "–¢–µ–ø–ª–æ –æ—Ç —Ç–≤–æ–µ–π —É–ª—ã–±–∫–∏ —É–∂–µ —Å–ø–∞—Å–∞–µ—Ç –º–∏—Ä üå∑",
    "–í–¥–æ—Ö-–≤—ã–¥–æ—Ö. –í—Å—ë –ø–æ —Å–∏–ª–∞–º ü§ç",
    "–¢—ã —É–∂–µ —Å–ø—Ä–∞–≤–ª—è–ª–∞—Å—å ‚Äî —Å–ø—Ä–∞–≤–∏—à—å—Å—è –∏ —Å–µ–π—á–∞—Å ü¶ã",
    "–í–µ—Ä—å —Å–µ–±–µ –≥—Ä–æ–º—á–µ, —á–µ–º —Å–æ–º–Ω–µ–Ω–∏—è–º üîä",
    "–ü—É—Å—Ç—å –±—É–¥–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ—â–µ, —á–µ–º –≤—á–µ—Ä–∞ üíå",
    "–î–∞–∂–µ –º–∞–ª–µ–Ω—å–∫–∞—è –∑–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ ‚Äî —ç—Ç–æ –ø–æ–±–µ–¥–∞ üå∏",
    "–õ–∞—Å–∫–æ–≤–æ —Å —Å–æ–±–æ–π ‚Äî –º–∏—Ä –æ—Ç–≤–µ—Ç–∏—Ç —Ç–µ–º –∂–µ ü´∂",
    "–°–µ–≥–æ–¥–Ω—è —Ç–µ–±–µ –ø–æ–≤–µ–∑—ë—Ç —Ç–∞–º, –≥–¥–µ —Ç—ã –∏—Å–∫—Ä–µ–Ω–Ω–∞ üåü",
    "–ù–∞–π–¥–∏ 10 –º–∏–Ω—É—Ç —Ç–∏—à–∏–Ω—ã ‚Äî —ç—Ç–æ —Å—É–ø–µ—Ä—Å–∏–ª–∞ üîï",
    "–ü–æ–∑–≤–æ–ª—å —Å–µ–±–µ –æ—Ç–¥—ã—Ö –±–µ–∑ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π üß∏",
    "–ö—Ç–æ-—Ç–æ –æ—á–µ–Ω—å –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–æ–±–æ–π ‚Äî –ø—Ä–∞–≤–¥–∞ üíû",
    "–¢—ã —Ç–∞–º, –≥–¥–µ –Ω—É–∂–Ω–æ ‚Äî –∏ –≤—Å—ë –æ–∫–µ–π üìç",
    "–ü—Ä–æ—â–µ –æ—Ç–Ω–µ—Å–∏—Å—å ‚Äî –∏ —Å—Ç–∞–Ω–µ—Ç –ª–µ–≥—á–µ ‚òÅÔ∏è",
    "–°–¥–µ–ª–∞–π –¥–æ–±—Ä–æ –≤—Ç–∏—Ö–∞—Ä—è ‚Äî –∫–∞–π—Ñ –≤–µ—Ä–Ω—ë—Ç—Å—è üç´",
    "–°–º–µ—Ö ‚Äî –ª—É—á—à–∏–π —Å–ø—É—Ç–Ω–∏–∫ –¥–Ω—è üòÇ",
    "–¢–µ—Ä–º–æ—Å —Å —Ç–µ–ø–ª–æ–º –µ—Å—Ç—å: —ç—Ç–æ —Ç—ã ‚òïÔ∏è",
    "–ù–∏–∫–∞–∫–æ–π —Å–ø–µ—à–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ —Ä–∏—Ç–º —Å–µ—Ä–¥—Ü–∞ ‚ù§Ô∏è",
    "–¢–≤–æ–∏ –≥—Ä–∞–Ω–∏—Ü—ã ‚Äî —ç—Ç–æ –Ω–µ–∂–Ω–æ—Å—Ç—å –∫ —Å–µ–±–µ üõ°Ô∏è",
    "–°–µ–≥–æ–¥–Ω—è –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –Ω–µ –±—ã—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–π üß©",
    "–°–¥–µ–ª–∞–π —à–∞–≥ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –º–∏—Ä –ø–æ–¥–≤–∏–Ω–µ—Ç—Å—è üö™",
    "–ü—É—Å—Ç—å –º—É–∑—ã–∫–∞ –¥–Ω—è –±—É–¥–µ—Ç –¥–æ–±—Ä–æ–π üéß",
    "–¢—ã ‚Äî –≥–ª–∞–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –∂–∏–∑–Ω–∏ üéÅ",
    "–°–æ–º–Ω–µ–Ω–∏–µ –Ω–µ —Ä—É–ª–∏—Ç ‚Äî —Ä—É–ª–∏—Ç –æ–ø—ã—Ç üöó",
    "–ì–¥–µ –∑–∞–±–æ—Ç–∞ ‚Äî —Ç–∞–º –∏ —Å–∏–ª—ã üåø",
    "–°–µ–≥–æ–¥–Ω—è ¬´–º–æ–∂–Ω–æ¬ª –≥—Ä–æ–º—á–µ, —á–µ–º ¬´–Ω–∞–¥–æ¬ª üîî",
    "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ –º–∞–ª–µ–Ω—å–∫–∏–µ ¬´–ø–æ–ª—É—á–∏–ª–æ—Å—å¬ª üìà",
    "–ù–µ –æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–π —Ç–æ, —á—Ç–æ —É–∂–µ —Å–¥–µ–ª–∞–ª–∞ üèÜ",
    "–ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ —Å–µ–±—è –∑–∞ –ø—Ä–æ—à–ª—É—é —Ç–µ–±—è üôè",
    "–ü—É—Å—Ç—å —Ä—è–¥–æ–º –±—É–¥—É—Ç —Ç—ë–ø–ª—ã–µ –ª—é–¥–∏ üßë‚Äçü§ù‚Äçüßë",
    "–°—Ç–∞–Ω—å —Å–µ–±–µ —Å–∞–º–æ–π –Ω–µ–∂–Ω–æ–π –ø–æ–¥—Ä—É–≥–æ–π üíê",
    "–î—ã—à–∏ –º–µ–¥–ª–µ–Ω–Ω–µ–µ ‚Äî –º—ã—Å–ª–∏ —Å—Ç–∞–Ω—É—Ç –º—è–≥—á–µ üçÉ",
    "–î–≤–∏–≥–∞–π—Å—è –≤ —Ç–µ–º–ø–µ –¥—É—à–∏, –Ω–µ –º–∞—Ä–∞—Ñ–æ–Ω–∞ üèÉ‚Äç‚ôÄÔ∏è",
    "–°—Ç–∞–≤—å —Ç–æ—á–∫—É —Ç–∞–º, –≥–¥–µ —É—Å—Ç–∞–ª–∞ ‚Äî –º–æ–∂–Ω–æ ‚õîÔ∏è",
    "–ó–∞—Å–ª—É–∂–µ–Ω–Ω—ã–π –æ—Ç–¥—ã—Ö ‚Äî —Ç–æ–∂–µ –¥–µ–π—Å—Ç–≤–∏–µ üõå",
    "–°–µ–≥–æ–¥–Ω—è —Ç–µ–±—è –∂–¥—ë—Ç –º–∞–ª–µ–Ω—å–∫–∞—è —Ä–∞–¥–æ—Å—Ç—å üéà",
    "–¢—ã ‚Äî –Ω–µ –∑–∞–¥–∞—á–∏, —Ç—ã ‚Äî —á–µ–ª–æ–≤–µ–∫ üíó",
    "–õ–∞—Å–∫–∞ –∫ —Å–µ–±–µ ‚Äî –Ω–µ —Ä–æ—Å–∫–æ—à—å, –∞ –±–∞–∑–∞ üß¥",
    "–ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞ –∫ –∑–Ω–∞–∫–∞–º ‚Äî –≤—Å–µ–ª–µ–Ω–Ω–∞—è —à–µ–ø—á–µ—Ç ‚úâÔ∏è",
    "–í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –¥–µ–ª–æ –∏ —Å–¥–µ–ª–∞–π –µ–≥–æ –∫—Ä–∞—Å–∏–≤–æ üéÄ",
    "–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ –≤ ¬´–Ω–µ —Ö–æ—á—É¬ª üö´",
    "–°–º–µ–Ω–∏ —Ñ–æ–Ω –Ω–∞ –±–æ–ª–µ–µ –¥–æ–±—Ä—ã–π üåÖ",
    "–¢–≤–æ—ë —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –≤–∞–∂–Ω–µ–µ —á—É–∂–æ–π —Å–ø–µ—à–∫–∏ üßò‚Äç‚ôÄÔ∏è",
    "–¢—ã –≤—Å—ë –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—à—å ‚Äî –≤ —Ä–∞–º–∫–∞—Ö –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ üéõÔ∏è",
    "–ù–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–π ‚Äî —Ç—ã –¥—Ä—É–≥–∞—è, –∏ —ç—Ç–æ –ø–ª—é—Å üåô",
    "–ü—É—Å—Ç—å –¥–µ–Ω—å –±—É–¥–µ—Ç –º—è–≥–∫–∏–º –∏ —Ç—ë–ø–ª—ã–º üß£",
    "–†–∞–¥–æ—Å—Ç—å –≤ –º–µ–ª–æ—á–∞—Ö ‚Äî –Ω–∞–π–¥–∏ —Ç—Ä–∏ üìù",
    "–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º —Ç–µ–±–µ –∫–∞–∂–µ—Ç—Å—è üóùÔ∏è",
    "–û–¥–∏–Ω —à–∞–≥ –∑–∞ —Ä–∞–∑ ‚Äî –∏ –≥–æ—Ä–∞ –º–µ–Ω—å—à–µ üèîÔ∏è",
    "–°–∫–∞–∂–∏ ¬´–¥–∞¬ª —Å–µ–±–µ –∏ ¬´–Ω–µ—Ç¬ª –ª–∏—à–Ω–µ–º—É üöß",
    "–í—ã–±–µ—Ä–∏ —Å–µ–±—è –±–µ–∑ —á—É–≤—Å—Ç–≤–∞ –≤–∏–Ω—ã üíû",
    "–¢–µ–±–µ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –±—ã—Ç—å üåº",
    "–ì—Ä—É—Å—Ç—å ‚Äî —ç—Ç–æ —Ç–æ–∂–µ —á—É–≤—Å—Ç–≤–æ, –Ω–µ –≤—Ä–∞–≥ üåßÔ∏è",
    "–ó–∞–±–æ—Ç–∞ –æ —Ç–µ–ª–µ ‚Äî —ç—Ç–æ –ª—é–±–æ–≤—å, –∞ –Ω–µ –∑–∞–¥–∞—á–∞ üõÅ",
    "–° —Ç–µ–±—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —É—é—Ç –≤–æ–∫—Ä—É–≥ üïØÔ∏è",
    "–¢–æ, —á—Ç–æ —Ç–≤–æ—ë ‚Äî —Ç–µ–±—è –Ω–∞–π–¥—ë—Ç üì¨",
    "–û—à–∏–±–∫–∞ ‚Äî –Ω–µ —Ç—ã, –∞ —Å–æ–±—ã—Ç–∏–µ üßØ",
    "–í–∞–∂–Ω–æ: —Ç—ã –¥–µ–ª–∞–µ—à—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚úîÔ∏è",
    "–°–µ–≥–æ–¥–Ω—è —É–ª—ã–±–∫–∞ –Ω–∞–π–¥—ë—Ç —Ç–µ–±—è —Å–∞–º–∞ üòä",
    "–£ —Ç–µ–±—è —Ö–æ—Ä–æ—à–∏–π –≤–∫—É—Å –Ω–∞ –ª—é–¥–µ–π üíå",
    "–°–ø—Ä—è—á—å —Ç–µ–ª–µ—Ñ–æ–Ω ‚Äî –ø–æ–π–º–∞–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å üå§Ô∏è",
    "–ü–ª–∞–Ω ¬´–ë¬ª ‚Äî —ç—Ç–æ –Ω–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ, –∞ –º—É–¥—Ä–æ—Å—Ç—å üß†",
    "–¢—ã –¥–∞—ë—à—å –¥—Ä—É–≥–∏–º —á—É–≤—Å—Ç–≤–æ –¥–æ–º–∞ üè°",
    "–¢–≤–æ—ë ¬´–Ω–µ —Ö–æ—á—É¬ª —Ç–æ–∂–µ –¥–æ—Å—Ç–æ–π–Ω–æ —É–≤–∞–∂–µ–Ω–∏—è üö∑",
    "–° –∫–∞–∂–¥—ã–º –¥–Ω—ë–º —Ç—ã –≤—Å—ë —á–µ—Å—Ç–Ω–µ–µ —Å —Å–æ–±–æ–π üí≠",
    "–ú–æ–∑–≥ ‚Äî –Ω–µ –≤—Ä–∞–≥, –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–≤—à–∏–π –¥—Ä—É–≥ üß†",
    "–í—ã–±–æ—Ä ‚Äî —ç—Ç–æ –≤–ª–∞—Å—Ç—å. –°–µ–≥–æ–¥–Ω—è –æ–Ω–∞ —É —Ç–µ–±—è üëë",
    "–¢–µ–±—è –∂–¥—ë—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–µ —Å–ª–æ–∂–Ω–æ –Ω–µ –ø–æ–≤–µ—Ä–∏—Ç—å ‚ú®",
    "–¢–≤–æ–∏ —Å–ª–æ–≤–∞ —Å–µ–≥–æ–¥–Ω—è –∫–æ–º—É-—Ç–æ –æ—á–µ–Ω—å –ø–æ–º–æ–≥—É—Ç üó£Ô∏è",
    "–¢–≤–æ—è –Ω–µ–∂–Ω–æ—Å—Ç—å ‚Äî –º–æ—â–Ω–µ–µ —à—É–º–∞ –º–∏—Ä–∞ üéß",
    "–û—Ç–ø—É—Å—Ç–∏ —Ç–æ, —á—Ç–æ –Ω–µ —Ç–≤–æ—ë ‚Äî —Å—Ç–∞–Ω–µ—Ç –ª–µ–≥—á–µ üéà",
    "–°–µ–≥–æ–¥–Ω—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —á–∏–Ω–∏—Ç—å –Ω–æ—Å–æ—á–∫–∏ –∂–∏–∑–Ω–∏ üß∂",
    "–¢—ã –∑–∞–º–µ—Ç–Ω–æ –≤—ã—Ä–æ—Å–ª–∞ ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –≤–∏–¥–∏—à—å üìè",
    "–ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ —É—Ç—Ä–æ ‚Äî –∏ –æ–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç üåû",
    "–¢—ã –ø—Ä–∏–Ω–æ—Å–∏—à—å –ø–æ—Ä—è–¥–æ–∫ —Ö–∞–æ—Å—É üå™Ô∏è‚Üíüåà",
    "–¢–≤–æ—è –∏–Ω—Ç—É–∏—Ü–∏—è —Å–µ–≥–æ–¥–Ω—è ‚Äî –ª—É—á—à–∏–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä üß≠",
    "–°–º–µ–ª–æ—Å—Ç—å ‚Äî —ç—Ç–æ —à—ë–ø–æ—Ç ¬´–ø–æ–ø—Ä–æ–±—É–π¬ª üîî",
    "–í–µ—á–µ—Ä–æ–º —Ç–µ–±—è –∂–¥–µ—Ç —É—é—Ç–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ üç™",
    "–û–±–Ω–∏–º–∏ —Å–µ–±—è. –°–∏–ª—å–Ω–æ. –ü—Ä—è–º–æ —Å–µ–π—á–∞—Å ü´Ç",
    "–¢–≤–æ—è –¥–æ–±—Ä–æ—Ç–∞ ‚Äî —Ä–µ–¥–∫–∞—è –≤–∞–ª—é—Ç–∞ üíé",
    "–¢—ã –Ω–µ –æ–±—è–∑–∞–Ω–∞ –±—ã—Ç—å —Å–∏–ª—å–Ω–æ–π 24/7 ü™¥",
    "–°–µ–≥–æ–¥–Ω—è –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –∂–∏—Ç—å –±–µ–∑ –ø–æ–¥–≤–∏–≥–æ–≤ üåø",
    "–í–Ω—É—Ç—Ä–∏ —Ç–µ–±—è –±–æ–ª—å—à–µ —Å–≤–µ—Ç–∞, —á–µ–º –∫–∞–∂–µ—Ç—Å—è üïØÔ∏è",
    "–¢—ã ‚Äî —á—É–¥–æ, –∫–æ—Ç–æ—Ä–æ–µ —Å —Å–æ–±–æ–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚ú®",
    "–°–∞–º–æ–µ –ª—É—á—à–µ–µ –≤–ø–µ—Ä–µ–¥–∏ ‚Äî –∏ —ç—Ç–æ –±–ª–∏–∑–∫–æ üîÆ",

    # 101‚Äì150 –ø—Ä–æ –∫—Ä–∞—Å–æ—Ç—É / —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É
    "–°–µ–≥–æ–¥–Ω—è —Ç—ã –æ—Å–æ–±–µ–Ω–Ω–æ –∫—Ä–∞—Å–∏–≤–∞—è ‚Äî —Ñ–∞–∫—Ç üòç",
    "–¢–≤–æ–∏ –≥–ª–∞–∑–∞ —Å–∏—è—é—Ç —è—Ä—á–µ, —á–µ–º –æ–±—ã—á–Ω–æ ‚ú®",
    "–¢–≤–æ—è —É–ª—ã–±–∫–∞ ‚Äî –ª—É—á—à–∏–π —Ö–∞–π–ª–∞–π—Ç–µ—Ä üòä",
    "–ö–æ–∂–∞ –≥–æ–≤–æ—Ä–∏—Ç ¬´—Å–ø–∞—Å–∏–±–æ¬ª –∑–∞ –∑–∞–±–æ—Ç—É üíß",
    "–¢—ã ‚Äî —Ö–æ–¥—è—á–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞ –¥–Ω—è üé®",
    "–í–æ–ª–æ—Å—ã —Å–µ–≥–æ–¥–Ω—è –∫–∞–∫ –≤ —Ä–µ–∫–ª–∞–º–µ üíÅ‚Äç‚ôÄÔ∏è",
    "–¢–≤–æ–π —Å—Ç–∏–ª—å ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö üëó",
    "–ö—Ä–∞—Å–æ—Ç–∞ –≤ –¥–µ—Ç–∞–ª—è—Ö ‚Äî —É —Ç–µ–±—è –≤—Å—ë –±–ª–µ—Å—Ç–∏—Ç üíÖ",
    "–¢—ã ‚Äî –≥–∞–ª–µ—Ä–µ—è –Ω–µ–∂–Ω–æ—Å—Ç–∏ –∏ –≤–∫—É—Å–∞ üñºÔ∏è",
    "–õ—é–±–æ–µ –∑–µ—Ä–∫–∞–ª–æ —Å–µ–≥–æ–¥–Ω—è —Ç–≤–æ—ë —Ñ–∞–Ω-–∫–ª—É–± üíñ",
    "–°–µ–ª—Ñ–∏ —Å–µ–≥–æ–¥–Ω—è –æ–±—è–∑–∞–Ω–æ —Å–ª—É—á–∏—Ç—å—Å—è üì∏",
    "–¢–µ–±–µ –∏–¥—ë—Ç —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ ‚Äî —à–∏–∫ —Å—Ç–∞–π–ª üßò‚Äç‚ôÄÔ∏è",
    "–¢—ã –≤—ã–≥–ª—è–¥–∏—à—å —Ç–∞–∫, –±—É–¥—Ç–æ –≤—ã—Å–ø–∞–ª–∞—Å—å –∏–¥–µ–∞–ª—å–Ω–æ üò¥‚ú®",
    "–¢–≤–æ—ë ¬´–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞¬ª ‚Äî –ª—É—á—à–µ –ª—é–±–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ üåü",
    "–°–≤–µ—Ç–∏—à—å—Å—è –∏–∑–Ω—É—Ç—Ä–∏ ‚Äî —ç—Ç–æ –∑–∞–º–µ—Ç–Ω–æ üîÜ",
    "–¢–≤–æ–π –æ–±—Ä–∞–∑ ‚Äî –≤–∞—É –¥–∞–∂–µ –≤ –ø–∏–∂–∞–º–µ üõåüíÉ",
    "–ú–∞–Ω–∏–∫ ‚Äî —Ç–æ–ø! –î–∞–∂–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç üíÖüòÑ",
    "–†–µ—Å–Ω–∏—Ü—ã –≥–æ–≤–æ—Ä—è—Ç: ¬´–º—ã –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã¬ª üëÅÔ∏è",
    "–ë—Ä–æ–≤–∏ —Å–µ–≥–æ–¥–Ω—è –¥—Ä—É–∂–∞—Ç —Å –∫–æ—Å–º–æ—Å–æ–º üåå",
    "–¢—ã ‚Äî –¥–µ–≤–æ—á–∫–∞ –æ–±–ª–æ–∂–∫–∏, –Ω–æ —É—é—Ç–Ω–æ–π üß∏",
    "–°–µ–≥–æ–¥–Ω—è —Ç—ã —Ç–æ—á–Ω–æ –ø–æ–ø–∞–¥—ë—à—å –≤ —á—å–∏-—Ç–æ –º—ã—Å–ª–∏ üí≠",
    "–¢–≤–æ–∏ —á–µ—Ä—Ç—ã ‚Äî –º—è–≥–∫–∞—è –ø–æ—ç–∑–∏—è –ª–∏—Ü–∞ üìù",
    "–¢—ã ‚Äî –≥–∞—Ä–º–æ–Ω–∏—è –±–µ–∑ —É—Å–∏–ª–∏–π üéº",
    "–£ —Ç–µ–±—è –∏–¥–µ–∞–ª—å–Ω–∞—è –ø–æ—Å–∞–¥–∫–∞ —É–ª—ã–±–∫–∏ üòÅ",
    "–ö—Ä–∞—Å–æ—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∞–µ—Ç –º–∏—Ä –¥–æ–±—Ä–µ–µ üíó",
    "–¢–≤–æ—ë –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ ‚Äî —ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ø–≥—Ä–µ–π–¥ üí´",
    "–°–µ–≥–æ–¥–Ω—è —Ç—ã ‚Äî –º—É–∑–∞ –¥–ª—è –∫–æ–≥–æ-—Ç–æ üéª",
    "–¢–µ–±—è —Ö–æ—á–µ—Ç—Å—è —Ä–∏—Å–æ–≤–∞—Ç—å –∞–∫–≤–∞—Ä–µ–ª—å—é üé®üíß",
    "–í –∫–∞–∂–¥–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏ ‚Äî –≥—Ä–∞—Ü–∏—è ü¶¢",
    "–¢—ã ‚Äî —Ç–æ—Ç —Å–∞–º—ã–π –≤–∞–π–± ¬´—É—Ö!¬ª üí•",
    "–ö–æ—Å–º–µ—Ç–∏—á–∫–∞ –æ—Ç–¥—ã—Ö–∞–µ—Ç ‚Äî —Ç—ã –∏ —Ç–∞–∫ —Å–∏—è–µ—à—å ‚ú®",
    "–ö—Ä–∞—Å–æ—Ç–∞ –±–µ–∑ —à—É–º–∞ ‚Äî —Ç–≤–æ–π —Å—Ç–∏–ª—å ü§ç",
    "–¢—ã ‚Äî –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ, —á—Ç–æ –Ω–µ–∂–Ω–æ—Å—Ç—å ‚Äî —Å–∏–ª–∞ üí™üå∏",
    "–°–º–æ—Ç—Ä–∏—à—å—Å—è –¥–æ—Ä–æ–∂–µ, —á–µ–º –≤—Å–µ —Ç—Ä–µ–Ω–¥—ã üíé",
    "–¢–≤–æ–π –≤–∑–≥–ª—è–¥ ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π –≤–∏–¥ –∏—Å–∫—É—Å—Å—Ç–≤–∞ üñ§",
    "–¢—ã ‚Äî —Å–ª–∞–¥–∫–∏–π –±–∞–ª–∞–Ω—Å –∏ —É—Ö–æ–∂–µ–Ω–Ω–æ—Å—Ç—å üçØ",
    "–¢–µ–±–µ –∏–¥—ë—Ç –≤—Å—ë, —á—Ç–æ —Ç—ã –ª—é–±–∏—à—å üíò",
    "–°–µ–≥–æ–¥–Ω—è —Ç—ã ‚Äî —Ç—ë–ø–ª–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞ –æ—Å–µ–Ω–∏ üçÇ",
    "–≠—Ç–∞ –ø—Ä—è–¥—å –≤–æ–ª–æ—Å ‚Äî —à–µ–¥–µ–≤—Ä üé®",
    "–¢—ã ‚Äî –º—è–≥–∫–∏–π —Ñ–æ–∫—É—Å –º–∏—Ä–∞ üì∑",
    "–°–∏—è–π! –ú–∏—Ä –Ω–µ –æ—Å–ª–µ–ø–Ω–µ—Ç, –æ–Ω –ø—Ä–∏–≤—ã–∫–Ω–µ—Ç ‚òÄÔ∏è",
    "–¢—ã ‚Äî –≥–ª–∞–≤–Ω–∞—è –º–æ–¥–µ–ª—å —Å–≤–æ–µ–≥–æ –¥–Ω—è üë†",
    "–õ—é–±–∞—è –ø–æ–∑–∞ ‚Äî –∫–∞–∫ –æ–±–ª–æ–∂–∫–∞ üíÉ",
    "–¢—ã ‚Äî –∫—Ä–∞—Å–æ—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –ª–µ—á–∏—Ç üå∫",
    "–°–µ–≥–æ–¥–Ω—è –Ω–æ–≥—Ç–∏ ‚Äî –∑–∞–≥–ª—è–¥–µ–Ω—å–µ üíÖ‚ú®",
    "–¢–≤–æ—ë ¬´–∫–∞–∫ –æ–±—ã—á–Ω–æ¬ª ‚Äî —É–∂–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ üå∑",
    "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–∏–ª–æ—Ç–µ üßÅ",
    "–¢—ã ‚Äî —Ñ–∏–ª—å—Ç—Ä ¬´—Ä–æ–º–∞–Ω—Ç–∏–∫–∞¬ª –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ üíü",
    "–≠—Å—Ç–µ—Ç–∏–∫–∞ –≤ —Ç–µ–ª–µ —á–µ–ª–æ–≤–µ–∫–∞ ‚Äî —ç—Ç–æ —Ç—ã ü´∂",

    # 151‚Äì200 –º–æ—Ç–∏–≤–∞—Ü–∏—è
    "–ú–æ–∂–µ—à—å –º–µ–Ω—å—à–µ ‚Äî –¥–µ–ª–∞–π –º–µ–Ω—å—à–µ. –ù–æ –¥–µ–ª–∞–π üß©",
    "–ù–∞—á–Ω–∏ —Å 5 –º–∏–Ω—É—Ç ‚Äî –∏ –ø–æ–µ–¥–µ—Ç üö¥‚Äç‚ôÄÔ∏è",
    "–¢–≤–æ—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ ‚Äî —ç—Ç–æ –∑–∞–±–æ—Ç–∞, –∞ –Ω–µ –∫–Ω—É—Ç üéóÔ∏è",
    "–î–µ–ª–∞–π —Ç–∏—Ö–æ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–∂–µ—Ç –≥—Ä–æ–º–∫–æ üì¢",
    "–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º –≤—ã–∫–ª—é—á–µ–Ω ‚Äî –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–∫–ª—é—á—ë–Ω üîõ",
    "–ü–ª–∞–Ω–∏—Ä—É–π –ø–æ-—Ä–µ–∞–ª—å–Ω–æ–º—É, –∞ –Ω–µ ¬´–∫–∞–∫ –Ω–∞–¥–æ¬ª üóìÔ∏è",
    "–õ—É—á—à–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ, —á–µ–º –∏–¥–µ–∞–ª—å–Ω–æ ‚úÖ",
    "–†–∞–∑—Ä–µ—à–∏ —Å–µ–±–µ –æ—à–∏–±–∞—Ç—å—Å—è ‚Äî —ç—Ç–æ –ø—É—Ç—å üõ§Ô∏è",
    "–°–¥–µ–ª–∞–π —Ñ–æ–∫—É—Å –Ω–∞ –æ–¥–Ω–æ–º ‚Äî –±—É–¥–µ—Ç –ø—Ä–æ—Ä—ã–≤ üéØ",
    "–ü–æ–ø—Ä–æ—Å–∏ –ø–æ–º–æ—â—å ‚Äî —ç—Ç–æ –∑—Ä–µ–ª–æ—Å—Ç—å ü§ù",
    "–†–∞–∑–¥–µ–ª–∏ –∑–∞–¥–∞—á—É –Ω–∞ –∞—Ç–æ–º—ã ‚Äî –∏ –≤–ø–µ—Ä—ë–¥ ‚öõÔ∏è",
    "–°–¥–µ–ª–∞–π –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º —Å–∞–º–æ–µ –ø—Ä–æ—Å—Ç–æ–µ üß∏",
    "–ü–∏—à–∏ –º–∞–ª–µ–Ω—å–∫–∏–µ –≥–∞–ª–æ—á–∫–∏ ‚Äî –º–æ–∑–≥ –æ–±–æ–∂–∞–µ—Ç ‚úîÔ∏è",
    "–û—Ç–¥—ã—Ö ‚Äî —á–∞—Å—Ç—å –ø–ª–∞–Ω–∞, –Ω–µ –±–æ–Ω—É—Å üò¥",
    "–°—Ä–∞–≤–Ω–∏ —Å–µ–±—è —Å —Å–æ–±–æ–π –≤—á–µ—Ä–∞ ‚Äî —É—Å–ø–µ—Ö üìà",
    "–°—Ç–∞–≤—å –¥–µ–¥–ª–∞–π–Ω—ã —Å –ª—é–±–æ–≤—å—é ‚è≥üíó",
    "–ù–µ —É—Å–ª–æ–∂–Ω—è–π ‚Äî –≤—ã–±–∏—Ä–∞–π –ø–æ–Ω—è—Ç–Ω–æ–µ üõ†Ô∏è",
    "–°–¥–µ–ª–∞–π –Ω–∞ 60% ‚Äî —ç—Ç–æ —É–∂–µ –æ—Ç–ª–∏—á–Ω–æ ü•≥",
    "–î–æ–≤–µ—Ä—è–π –ø—Ä–æ—Ü–µ—Å—Å—É ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–¥—ë—Ç üö™",
    "–£—á–∏—Å—å —É —Å–±–æ–µ–≤ ‚Äî —Ç–∞–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ üìö",
    "–û–∫—Ä—É–∂–∞–π —Å–µ–±—è –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ‚Äî —ç—Ç–æ —Ç–æ–ø üßë‚Äçü§ù‚Äçüßë",
    "–¢–≤–æ—è —Å–∫–æ—Ä–æ—Å—Ç—å ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å üê¢",
    "–í—ã–ø–µ–π –≤–æ–¥—ã –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π üíß",
    "–ù–∞–≥—Ä–∞–¥–∏ —Å–µ–±—è –∑–∞ –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ üç´",
    "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ ‚Äî —É–∂–µ –ª–µ–≥—á–µ üîÅ",
    "–ù–µ –≤—Å—ë —Å—Ä–æ—á–Ω–æ ‚Äî –æ—Ç–¥–µ–ª—è–π –≤–∞–∂–Ω–æ–µ üß≠",
    "–ì–¥–µ —è—Å–Ω–æ, —Ç–∞–º –ª–µ–≥—á–µ ‚Äî —É–ø—Ä–æ—â–∞–π üßπ",
    "–°–¥–µ–ª–∞–π –ø–µ—Ä–≤—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ ‚Äî –æ–Ω —Å–ø–∞—Å–∞–µ—Ç üìù",
    "–ü–æ–¥—É–º–∞–π –ø–∏—Å—å–º–µ–Ω–Ω–æ ‚Äî –ø—Ä–æ—è—Å–Ω–∏—Ç—Å—è üñäÔ∏è",
    "–¢–≤–æ—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –≤–µ—Ä—å –µ–π ‚öôÔ∏è",
    "–£ —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–∞–≤–æ –Ω–µ —É—Å–ø–µ–≤–∞—Ç—å üí¨",
    "–°–æ—Ö—Ä–∞–Ω—è–π —ç–Ω–µ—Ä–≥–∏—é ‚Äî –≥–æ–≤–æ—Ä–∏ ¬´–Ω–µ—Ç¬ª üîã",
    "–°–º–æ—Ç—Ä–∏ –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç, –∞ –Ω–µ –Ω–∞ —à—É–º üåÖ",
    "–í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ ¬´–¥–∞¬ª –Ω–∞ –¥–µ–Ω—å ‚úÖ",
    "–î–µ–ª–∞–π —á—É—Ç—å-—á—É—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ ‚Äî –≤–µ–ª–∏–∫–æ–µ —Å–ª—É—á–∏—Ç—Å—è üìÜ",
    "–û—Ç–º–µ—á–∞–π –ø–æ–±–µ–¥—ã ‚Äî –º–æ–∑–≥—É –Ω—É–∂–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üß†",
    "–ï—Å–ª–∏ —Å—Ç—Ä–∞—à–Ω–æ ‚Äî —Ä–∞–∑–¥–µ–ª–∏ –Ω–∞ —à–∞–≥–∏ ü™ú",
    "–î–æ–≤–æ–¥–∏ –¥–æ ¬´–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ¬ª, –∞ –Ω–µ ¬´–∏–¥–µ–∞–ª—å–Ω–æ¬ª üß©",
    "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ ‚Äî —Ö—É–∂–µ, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ ‚Äî –ª—É—á—à–µ üßµ",
    "–¢—ã —É–º–µ–µ—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üöÄ",
]

async def predskaz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    suid = str(update.effective_user.id)
    ensure_user(update.effective_user.id, update.effective_user.first_name, update.effective_user.username)
    u = state["users"][suid]
    if u.get("last_prediction") == today_str():
        await update.message.reply_text("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–µ–≥–æ–¥–Ω—è!")
        return
    u["last_prediction"] = today_str()
    save_state()
    await update.message.reply_text(f"üîÆ {random.choice(PREDICTIONS)}")

# ===================== HUGS =====================
HUGS_POOL = [
    "ü§ó {a} –∫—Ä–µ–ø–∫–æ –æ–±–Ω—è–ª–∞ {b} ‚Äî —Ç–µ–ø–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É üß∏",
    "üíû {a} –Ω–µ–∂–Ω–æ –ø—Ä–∏–∂–∞–ª–∞—Å—å –∫ {b} ‚Äî –ø—É—Å—Ç—å —Ç—Ä–µ–≤–æ–≥–∏ —Ç–∞—é—Ç üå∑",
    "ü•∞ {a} —Å–æ–≥—Ä–µ–ª–∞ {b} —Å–≤–æ–∏–º–∏ –æ–±–Ω–∏–º–∞—à–∫–∞–º–∏ ‚Äî –∑–∞—Ä—è–¥–∏–ª–∞—Å—å –ª—é–±–æ–≤—å—é!",
    "ü´∂ {a} –∏ {b} ‚Äî —Å–µ–≥–æ–¥–Ω—è —Å–∞–º—ã–π –º–∏–ª—ã–π –¥—É—ç—Ç!",
    "–ö—Ç–æ –Ω–µ –æ–±–Ω–∏–º–µ—Ç—Å—è ‚Äî —Ç–æ—Ç –Ω–µ –∏–≥—Ä–∞–µ—Ç –≤ –∫–∞—Å—Ç–æ–º–∫–µ!",
    "ü´Ç –¢–æ–∫—Å–∏–∫–æ–≤ —Ç–æ–∂–µ –∏–Ω–æ–≥–¥–∞ –æ–±–Ω–∏–º–∞—é—Ç‚Ä¶ –ø–æ –≥–æ–ª–æ–≤–µ‚Ä¶ —Ç–∞–±—É—Ä–µ—Ç–∫–æ–π üôÉ",
    "–ü–µ—Ä–µ–¥–∞—é –º—è–≥–∫–æ—Å—Ç—å, –∑–∞–±–æ—Ç—É –∏ –ø–µ—á–µ–Ω—å–∫—É üç™ ‚Äî {a} ‚Üí {b}",
    "–ö—Ä–µ–ø–∫–æ-–∫—Ä–µ–ø–∫–æ –∏ –æ—á–µ–Ω—å –Ω–µ–∂–Ω–æ ‚Äî —Ç—Ä–µ–ø–µ—â–∏, –≥—Ä—É—Å—Ç—å! ü´Ç  {a} –æ–±–Ω—è–ª–∞ {b}",
    "–ü—É—Å—Ç—å —Ç—Ä–µ–≤–æ–≥–∏ —É–º–µ–Ω—å—à–∞—é—Ç—Å—è –Ω–∞ 50% –ø–æ—Å–ª–µ —ç—Ç–∏—Ö –æ–±—ä—è—Ç–∏–π üå∏  {a} –¥–ª—è {b}",
]

async def hugs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ensure_user(update.effective_user.id, update.effective_user.first_name, update.effective_user.username)
    me = update.effective_user
    if context.args:
        target = context.args[0]
        msg = random.choice([
            f"ü§ó {me.mention_html()} –æ–±–Ω—è–ª–∞ {target}! –¢–µ–ø–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ üß∏",
            f"üíû {me.mention_html()} –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –æ–±—ä—è—Ç–∏—è {target}. –í—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ üå∑",
        ])
        await update.message.reply_text(msg, parse_mode="HTML")
        return

    pool = [uid for uid in state.get("known_users", []) if uid != me.id]
    if not pool:
        await update.message.reply_text("–û–±–Ω–∏–º–∞—à–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤ —á–∞—Ç–µ! ü´Ç")
        return
    target_id = random.choice(pool)
    a = me.mention_html()
    b = display_user(target_id)
    tpl = random.choice(HUGS_POOL)
    if "{a}" in tpl or "{b}" in tpl:
        text = tpl.format(a=a, b=b)
    else:
        text = f"{a} –æ–±–Ω—è–ª–∞ {b} ‚Äî {tpl}"
    await update.message.reply_text(text, parse_mode="HTML")

# ===================== –ö–û–ú–ü–õ–ò–ú–ï–ù–¢–´ =====================
COMPLIMENTS = [
    "–¢—ã —Å–µ–≥–æ–¥–Ω—è —Å–≤–µ—Ç–∏—à—å—Å—è —Å–∏–ª—å–Ω–µ–µ –∑–≤–µ–∑–¥—ã ‚ú®",
    "–¢–≤–æ—è —É–ª—ã–±–∫–∞ ‚Äî –º–æ–π –ª–∏—á–Ω—ã–π –∞–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å üòä",
    "–í —Ç–µ–±–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —Å–∏–ª—ã –∏ –Ω–µ–∂–Ω–æ—Å—Ç–∏ ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ–µ üíñ",
    "–° —Ç–æ–±–æ–π —É—é—Ç–Ω–æ –¥–∞–∂–µ –≤ –¥–æ–∂–¥—å ‚òîÔ∏è",
    "–¢—ã –¥–µ–≤–æ—á–∫–∞-–º–∞–≥–∏—è ‚Äî –≤—Å—ë –ø–æ–ª—É—á–∞–µ—Ç—Å—è ‚ú®",
    "–¢–≤–æ–∏ –≥–ª–∞–∑–∞ ‚Äî –∫–∞–∫ –∫–æ—Å–º–æ—Å, —Ö–æ—á–µ—Ç—Å—è –≤ –Ω–∏—Ö –ø—Ä–æ–ø–∞—Å—Ç—å üåå",
    "–¢–≤–æ–π —Å–º–µ—Ö –ª–µ—á–∏—Ç –ª—É—á—à–µ –ª—é–±–æ–≥–æ —á–∞—è üçµ",
    "–¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ—Ç —á–∞—Ç —Ç–µ–ø–ª–µ–µ üß∏",
    "–° —Ç–æ–±–æ–π –¥–∞–∂–µ —Ç–∏–ª—å—Ç —É–ª—ã–±–∞–µ—Ç—Å—è üòå",
    "–ö—Ç–æ —Å–µ–≥–æ–¥–Ω—è —Å–∞–º–∞—è –æ—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è? –ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî —Ç—ã üíÖ",
    "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ üöÄ",
    "–¢–≤–æ—ë —Å–µ—Ä–¥—Ü–µ ‚Äî –¥–æ–º –¥–ª—è –Ω–µ–∂–Ω–æ—Å—Ç–∏ üè°",
    "–¢—ã –∏–∑ —Ç–µ—Ö, —á—å—ë ¬´–ø—Ä–æ—Å—Ç–æ¬ª ‚Äî —É–∂–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ üå∑",
    "–î–∞–∂–µ –µ—Å–ª–∏ –¥–µ–Ω—å —Å–ª–æ–∂–Ω—ã–π ‚Äî —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ —Å—É–ø–µ—Ä ‚≠êÔ∏è",
    "–° —Ç–æ–±–æ–π —Ö–æ—á–µ—Ç—Å—è —Ç–≤–æ—Ä–∏—Ç—å –∏ —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è üíê",
    "–¢—ã ‚Äî —É—é—Ç–Ω—ã–π –ø–ª–µ–¥ –≤ —ç—Ç–æ–º –º–∏—Ä–µ üß∂",
    "–¢–≤–æ–π –≤–∞–π–± ‚Äî —á–∏—Å—Ç—ã–π serotonin boost üéß",
    "–ú–∏—Ä —Å—Ç–∞–ª –ª—É—á—à–µ, –∫–æ–≥–¥–∞ —Ç—ã —Å—é–¥–∞ –ø—Ä–∏—à–ª–∞ ü§ç",
    "–¢—ã –±—É–¥—Ç–æ –∏–∑ –ª—É—á—à–µ–≥–æ —Å–Ω–∞ ‚Äî –∏ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å üåô",
    "–¢–≤–æ–π —Å—Ç–∏–ª—å ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –∏—Å–∫—É—Å—Å—Ç–≤–∞ üé®",
    "–¢—ã —É–º–µ–µ—à—å —Å–æ–≥—Ä–µ—Ç—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º üî•",
    "–¢—ã ‚Äî –æ–¥–Ω–æ –±–æ–ª—å—à–æ–µ ¬´–≤–∞—É¬ª üí´",
    "–¢—ã –¥–µ–ª–∞–µ—à—å –±—É–¥–Ω–∏ –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫ üéà",
    "–° —Ç–æ–±–æ–π —Ä—è–¥–æ–º —Å–ø–æ–∫–æ–π–Ω–µ–µ –∏ —Å–≤–µ—Ç–ª–µ–µ üåû",
    "–¢—ã ‚Äî –Ω–µ–∂–Ω–æ—Å—Ç—å –≤ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º –≤–∏–¥–µ ü´∂",
    "–ö–æ—Å–º–æ—Å –∑–∞–≤–∏–¥—É–µ—Ç —Ç–≤–æ–µ–π –∫—Ä–∞—Å–æ—Ç–µ üå†",
    "–¢—ã ‚Äî —Ç–∞, –Ω–∞ –∫–æ–≥–æ —Ö–æ—á–µ—Ç—Å—è —Ä–∞–≤–Ω—è—Ç—å—Å—è üåø",
    "–¢—ã —Å–∏—è–µ—à—å –¥–∞–∂–µ –±–µ–∑ —Ö–∞–π–ª–∞–π—Ç–µ—Ä–∞ ‚ú®",
    "–¢—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞ –±–µ–∑ ¬´–Ω–æ¬ª –∏ ¬´–µ—Å–ª–∏¬ª üíå",
    "–¢—ã ‚Äî –ª—É—á—à–∞—è –≤–µ—Ä—Å–∏—è —Å–µ–±—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π üíé",
    "–¢—ã ‚Äî –Ω–∞—à–∞ –≥–æ—Ä–¥–æ—Å—Ç—å –∏ –ª—é–±–æ–≤—å üíó",
    "–¢–≤–æ—è –¥–æ–±—Ä–æ—Ç–∞ ‚Äî —Ä–µ–¥–∫–æ—Å—Ç—å –∏ —Å–æ–∫—Ä–æ–≤–∏—â–µ üóùÔ∏è",
    "–¢—ã ‚Äî –≥–ª–∞–≤–Ω–∞—è –¥–µ–≤–æ—á–∫–∞ —ç—Ç–æ–≥–æ –¥–Ω—è üëë",
    "–¢—ã –¥–µ–ª–∞–µ—à—å –º–∏—Ä —É—é—Ç–Ω–µ–µ –æ–¥–Ω–∏–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ–º ü´ß",
    "–° —Ç–æ–±–æ–π –ª—é–±–æ–µ –¥–µ–ª–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–æ—â–µ üß©",
    "–¢—ã –≤—Å–µ–≥–¥–∞ —á—É—Ç—å –∫—Ä–∞—Å–∏–≤–µ–µ, —á–µ–º –≤—á–µ—Ä–∞ üå∫",
    "–¢—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –±–ª–µ—Å–∫! ‚ú®",
    "–¢—ã ‚Äî –∑–∞—Ä—è–¥ –º–∏–ª–æ—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é üê£",
    "–¢—ã ‚Äî –Ω–∞—à –º–∞–ª–µ–Ω—å–∫–∏–π —à–µ–¥–µ–≤—Ä üé®",
    "–¢—ã ‚Äî –≤–∏—Ç–∞–º–∏–Ω —Ä–∞–¥–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã A üíä",
]

async def compliment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    me = update.effective_user
    ensure_user(me.id, me.first_name, me.username)

    if context.args:
        target = context.args[0]
        await update.message.reply_text(f"{random.choice(COMPLIMENTS)} {target}")
        return

    pool = [uid for uid in state.get("known_users", []) if uid != me.id]
    if not pool:
        await update.message.reply_text(random.choice(COMPLIMENTS))
        return
    target_id = random.choice(pool)
    await update.message.reply_text(f"{random.choice(COMPLIMENTS)} {display_user(target_id)}", parse_mode="HTML")

# ===================== –õ–ï–°–ë–ò-–ü–ê–†–ê (–∏–∑ –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö) =====================
async def lesbi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pool = list(set(state.get("known_users", [])))
    if len(pool) < 2:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏—Ü –¥–ª—è –ø–∞—Ä—ã")
        return

    if state["last_lesbi_date"] == today_str() and state.get("last_lesbi_pair"):
        a, b = state["last_lesbi_pair"]
        await update.message.reply_text(
            f"üë≠ –ü–∞—Ä–∞ –¥–Ω—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞: {display_user(a)} + {display_user(b)} üíû",
            parse_mode="HTML"
        )
        return

    a, b = random.sample(pool, 2)
    state["last_lesbi_date"] = today_str()
    state["last_lesbi_pair"] = [a, b]
    save_state()

    lines = [
        "üåà –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –ª–µ—Å–±–∏-–ø–∞—Ä–∞: {a} –∏ {b} üíã",
        "ü´∂ –ö—Ç–æ –±—ã –º–æ–≥ –ø–æ–¥—É–º–∞—Ç—å! {a} –∏ {b} ‚Äî –ø–∞—Ä–∞ –¥–Ω—è!",
        "üíò –ê–º—É—Ä –ø–æ–ø–∞–ª —Ç–æ—á–Ω–æ –≤ —Ü–µ–ª—å! {a} –∏ {b} —Ç–µ–ø–µ—Ä—å –≤–º–µ—Å—Ç–µ üòç",
        "üíû –õ—é–±–æ–≤—å –≤–∏—Ç–∞–µ—Ç –≤ –≤–æ–∑–¥—É—Ö–µ: {a} + {b} = ‚ù§Ô∏è",
    ]
    msg = random.choice(lines).format(a=display_user(a), b=display_user(b))
    await context.bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode="HTML")

# ===================== /role @—é–∑–µ—Ä =====================
ROLES = [
    "—Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤–æ—á–∫–∞üíñ",
    "—Å–∞–º–∞—è –º–∏–ª–∞—è –∫–∏—Å–∫–∞üò∫",
    "—Å–∞–º–∞—è –Ω–µ–∂–Ω–∞—è –ø—Ä–∏–Ω—Ü–µ—Å—Å–∞üå∏",
    "—Å–∞–º–∞—è –≥—Ä—É—Å—Ç–Ω–∞—è –ø–µ–ª—å–º–µ—à–∫–∞üòî",
    "—Å–∞–º–∞—è —Å–∏—è—é—â–∞—è –∑–≤—ë–∑–¥–æ—á–∫–∞‚ú®",
    "—Å–∞–º–∞—è –∑–ª–∞—è –≤–µ–¥—å–º–æ—á–∫–∞üßô‚Äç‚ôÄÔ∏è",
    "—Å–∞–º–∞—è –º–æ–¥–Ω–∞—è –∏–∫–æ–Ω–∫–∞üë†",
    "—Å–∞–º–∞—è –∑–∞–≥–∞–¥–æ—á–Ω–∞—è –¥—É—à–∞üåÄ",
    "—Å–∞–º–∞—è —Ä–∞–¥—É–∂–Ω–∞—è –±—É–ª–æ—á–∫–∞üåà",
    "—Å–∞–º–∞—è –æ–¥–∏–Ω–æ–∫–∞—è —Ç—É—á–∫–∞üåß",
    "–∫–∞–∫–∞—à–∫–∞ –¥–Ω—èüí©",
    "–±—É–Ω—Ç–∞—Ä–∫–∞ —á–∞—Ç–∞üî•",
    "–ø—Å–∏—Ö–æ–≤–∞–Ω–Ω–∞—è —Ñ–µ—èü§Ø",
    "–ø–ª–∞–∫—Å–∞ –¥–Ω—èüò≠",
    "–¥—Ä–∞–º–∞–∫–≤–∏–Ω –≤–µ—á–µ—Ä–∞üëë",
    "—Å–∞–º–∞—è –≥—Ä–æ–º–∫–∞—è –∂–∞–±–∞üê∏",
    "–∫–∏—Å–∫–∞ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–ºüêæ",
    "–∫–æ—Ä–æ–ª–µ–≤–∞ —Å–ø–∞–º–∞üì±",
    "—Å–∞–º–∞—è –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞—èüé≤",
    "–¥–µ–≤–æ—á–∫–∞ –≤–∞–π–±–∞üéß",
    "—Å–∞–º–∞—è —ç—Å—Ç–µ—Ç–∏—á–Ω–∞—è –Ω–∞ —Ä–∞–π–æ–Ω–µüé®",
    "–∏–Ω—Å—Ç–∞-–¥–∏–≤–∞ –¥–Ω—èüì∏",
    "—Å–∞–º–∞—è –ø–æ—é—â–∞—è –≤ –¥—É—à–µüé§",
    "—Å–∞–º–∞—è —Å–µ–∫—Å–∏ –≤ –ø–∏–∂–∞–º–µüíÉ",
    "–∫–æ—Ä–æ–ª–µ–≤–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–∏üéâ",
    "–¥–µ–≤–æ—á–∫–∞ —Å –∫–æ—Å–º–æ—Å–æ–º –≤ –≥–ª–∞–∑–∞—Öüåå",
    "–±–æ–≥–∏–Ω—è —Ñ–ª–∏—Ä—Ç–∞üíã",
    "–¥–µ–≤–∞ —Ö–∞–æ—Å–∞ü´¶",
    "—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç —á–∞—Ç–∞üïµÔ∏è‚Äç‚ôÄÔ∏è",
    "–ø–µ—Ä—Å–∏–∫ –¥–Ω—èüçë",
    "–∫–æ—à–º–∞—Ä –≤—Å–µ—Ö –±—ã–≤—à–∏—Öüíî",
    "–∫–æ—Ñ–µ–π–Ω–∞—è –±–æ–≥–∏–Ω—è‚òïÔ∏è",
    "—Å–∞–º–∞—è –≥—Ä–æ–º–∫–∞—è —Ä–∂—É–Ω—å–∫–∞üòÇ",
    "–¥–µ–≤–æ—á–∫–∞-—Å—é—Ä–ø—Ä–∏–∑üé≤",
    "—Å–ª—É—á–∞–π–Ω—ã–π –≥–µ–Ω–∏–πüß†",
    "–ª–æ–≤—É—à–∫–∞ –¥–ª—è —Å–µ—Ä–¥–µ—Ü‚ù§Ô∏è‚Äçüî•",
    "–æ–±–Ω–∏–º–∞—à–∫–∞ –Ω–∞ –Ω–æ–∂–∫–∞—Öü§ó",
    "—Å–∞–º–∞—è —Ä–∞–Ω–∏–º–∞—è –¥—É—à–∞ü•∫",
    "–Ω–æ—Å–∏–∫-–∫–Ω–æ–ø–æ—á–∫–∞ –¥–Ω—èüëÉ",
    "–¥–µ–≤–æ—á–∫–∞, –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—Ç—Å—è —á–∞–π –Ω–∞–ª–∏—Ç—åüçµ",
    "—Å–µ—Ä–¥—Ü–µ –Ω–∞ —Ä–∞—Å–ø–∞—à–∫—Éüíò",
    "—Å–ª–∞–¥–æ—Å—Ç—å —Å –Ω–∞—á–∏–Ω–∫–æ–π –∏–∑ –≥—Ä—É—Å—Ç–∏üç¨",
    "–æ–±–ª–∞–∫–æ –Ω–µ–∂–Ω–æ—Å—Ç–∏‚òÅÔ∏è",
    "–º–∏–ª–∞—à–∫–∞ –¥–Ω—èüß∏",
    "—Ç—ë–ø–ª—ã–π –ø–ª–µ–¥ —Å—Ä–µ–¥–∏ —à—Ç–æ—Ä–º–∞ü´Ç",
    "—É–ª—ã–±–∫–∞, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –ø—Ä–æ—â–∞–µ—à—å –≤—Å—ëüòä",
    "–¥–µ–≤–æ—á–∫–∞-–æ–±–Ω–∏–º–∞—à–∫–∞ü§ç",
    "—Å–∞–º–∞—è –¥—Ä–∞–º–∞—Ç–∏—á–Ω–∞—èüé≠",
    "–∫–∞–ø—Ä–∏–∑—É–ª—è –¥–Ω—èüòà",
    "–¥–µ–≤–æ—á–∫–∞ —Å –ø–ª–∞–Ω–æ–º (–∏ –±–∞—Ä—Ç–µ—Ä–æ–º)üìã",
    "–≤—ã—Å—à–∞—è –ª–∏–≥–∞ —Ñ–µ–º–∏–Ω–∏–∑–º–∞üßú‚Äç‚ôÄÔ∏è",
    "—Ç–∞, –∫—Ç–æ –¥–µ–ª–∞–µ—Ç –º–æ–∑–≥–∏ü•¥",
    "—à–∞–ª—å–Ω–∞—è –∏–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞üëë",
    "–≥–ª–∞–≤–Ω–∞—è –∑–≤–µ–∑–¥–∞ —á–∞—Ç–∞üåü",
    "—Å–∞–º–∞—è –∑–∞–Ω—è—Ç–Ω–∞—è –∏–Ω—Ç—Ä–∏–≥–∞–Ω–∫–∞üß©",
    "–¥–µ–≤–æ—á–∫–∞ —Å –∫–æ—Ä–æ–Ω–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—éüë∏",
    "—Ñ–µ—è —Å –±–¥—Å–º-–∫—Ä—ã–ª—å—è–º–∏üßö‚Äç‚ôÄÔ∏è",
    "–∑–∞–∫–æ–ª–¥–æ–≤–∞–Ω–Ω–∞—è –∫–æ—Ç–ª–µ—Ç–∫–∞üçñ",
    "–≤–æ–ª—à–µ–±–Ω–∏—Ü–∞ —É—é—Ç–Ω—ã—Ö –≤–µ—á–µ—Ä–æ–≤üåô",
    "–º–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –±–æ–≥–∏–Ω—è —Å–Ω–∞üò¥",
    "–≤–µ–¥—å–º–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª–∫–∞—Öüßô‚Äç‚ôÄÔ∏è",
    "–≤–µ–¥—å–º–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –≤–∞—Ä–∏—Ç –±–æ—Ä—âüßπ",
    "–¥–µ–≤–æ—á–∫–∞-–∑–µ–ª—å–µüß™",
    "—Ç–∞, —á—Ç–æ —Ç–∞–Ω—Ü—É–µ—Ç –ø–æ–¥ –ª—É–Ω–æ–πüíÉ",
    "–¥–µ–≤–æ—á–∫–∞-–æ–π-–≤—Å—ëüôÑ",
    "–ø–∏–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–±–ª—É–∫–∞—ÖüçÜ",
    "–≥—Ä—É—Å—Ç–Ω—ã–π –∫–æ—Ç–∏–∫ –≤ —Ç–µ–ª–µ —Å—Ç–µ—Ä–≤—ãüòø",
    "—Ç–∞, —á—Ç–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—ÇüôÖ‚Äç‚ôÄÔ∏è",
    "–∫—Ä–∏–Ω–∂-–∫–æ—Ä–æ–ª–µ–≤–∞ü´†",
    "—à–∞—Ä–∏–∫ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏üéà",
    "—Ö–∏—Ç—Ä–∞—è –∂–æ–ø–∫–∞üçë",
    "–ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æüí®",
    "–ø–æ–∑–æ—Ä –∫–ª–∞–Ω–∞ü§°",
    "–æ—à–∏–±–∫–∞ –ø—Ä–∏—Ä–æ–¥—ã‚ö†Ô∏è",
    "—Ñ–∏–∞—Å–∫–æ –¥–Ω—èüìâ",
    "—Ö–æ–¥—è—á–∏–π –∫—Ä–∏–Ω–∂ü´†",
    "–º–∏–Ω—É—Å –≤ –∫–∞—Ä–º—Éüëé",
    "–Ω–µ—É–¥–∞—á–∞ –Ω–µ–¥–µ–ª–∏üíÄ",
    "—Ö–∑ –∫—Ç–æ –∏ –∑–∞—á–µ–º —Ç—É—ÇüôÉ",
    "–ø—Ä–∏—á–∏–Ω–∞ —Å—Ç—ã–¥–∞ —Å–µ–≥–æ–¥–Ω—èüò¨",
    "–±–∞–≥ –≤ –º–∞—Ç—Ä–∏—Ü–µüï≥",
    "–≥–ª–∞–≤–Ω—ã–π –ø–æ–≤–æ–¥ –¥–ª—è —Ñ–µ–π—Å–ø–∞–ª–º–∞ü§¶‚Äç‚ôÄÔ∏è",
    "—Å–∞–º–∞—è –±–µ—Å—è—á–∞—èüßø",
    "—Ñ–µ–π–ª –≤–µ–∫–∞üòµ",
    "–∞–Ω—Ç–∏-–∑–≤–µ–∑–¥–∞ —á–∞—Ç–∞üö´",
    "–ø—Ä–æ–∫–ª—è—Ç–∏–µ –¥–Ω—èüßü‚Äç‚ôÄÔ∏è",
    "–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞ –≤ —é–±–∫–µüå™",
    "–ø–æ–≤–æ–¥ –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞üö™",
    "—Ñ–æ–Ω–æ–≤—ã–π —à—É–ºüîá",
    "–≥–ª—é–∫ —Å–∏—Å—Ç–µ–º—ãüñ•",
    "–Ω–µ–¥–æ—Ä–∞–∑—É–º–µ–Ω–∏–µ —Å –≤–∞–π–±–æ–ºüòµ‚Äçüí´",
    "—Ä–∞–Ω–¥–æ–º–Ω–∞—è npcüíª",
    "–±–∞–≥ —Å –ª–∏—Ü–æ–ºü´•",
    "—É—Ä–æ–Ω –ø–æ –≥–ª–∞–∑–∞–ºüëÅ",
    "—Ç–∞, –∫–æ–≥–æ –ª—É—á—à–µ –Ω–µ –≤—Å–ø–æ–º–∏–Ω–∞—Ç—åüëª",
    "–º–æ—Ä–∞–ª—å–Ω—ã–π –≤–∏—Ä—É—Åü¶†",
    "—Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—åüï≥",
    "–±–∞–Ω –±–µ–∑ —Å—É–¥–∞ –∏ —Å–ª–µ–¥—Å—Ç–≤–∏—èüö∑"
]

async def role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /role @username")
        return
    raw = context.args[0]
    target = raw if raw.startswith("@") else ("@" + raw)
    await update.message.reply_text(f"{target} —Å–µ–≥–æ–¥–Ω—è {random.choice(ROLES)}")

# ===================== –î–ï–ù–¨ –†–û–ñ–î–ï–ù–ò–Ø (–µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞) =====================
def _parse_day_month(bday: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (day, month) –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å, –∏–Ω–∞—á–µ None."""
    if not bday:
        return None
    bday = bday.strip()
    for fmt in ("%d.%m.%Y", "%d.%m"):
        try:
            dt = datetime.strptime(bday, fmt)
            return dt.day, dt.month
        except Exception:
            pass
    return None

async def birthday_job(context: ContextTypes.DEFAULT_TYPE):
    today = date.today()
    for suid, u in state["users"].items():
        dm = _parse_day_month(u.get("bday", ""))
        if not dm:
            continue
        d, m = dm
        if d == today.day and m == today.month:
            name = u.get("name") or display_user(int(suid))
            text = f"üéÇ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {name}! –ü–æ–∂–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è, –ª—é–±–≤–∏ –∏ –ø–æ–±–µ–¥! ü•≥"
            try:
                await context.bot.send_message(chat_id=CHAT_ID, text=text, parse_mode="HTML")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ: {e}")

# ===================== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò –ó–ê–ü–£–°–ö =====================
def build_application():
    app = ApplicationBuilder().token(TOKEN).build()

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤—ã—Ö
    app.add_handler(ChatMemberHandler(greet_new_member, ChatMemberHandler.CHAT_MEMBER))

    # –ü—Ä–æ—Ñ–∏–ª—å (–ø–æ—à–∞–≥–æ–≤–æ) ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω—å—à–µ, —á–µ–º —Ç—Ä–µ–∫–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
    edit_conv = ConversationHandler(
        entry_points=[CommandHandler("editprofile", editprofile)],
        states={
            STEP_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_name)],
            STEP_NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_nick)],
            STEP_UID:  [MessageHandler(filters.TEXT & ~filters.COMMAND, step_uid)],
            STEP_BDAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_bday)],
            STEP_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_city)],
            STEP_TIKTOK: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_tiktok)],
            STEP_QUOTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_quote)],
        },
        fallbacks=[],
    )
    app.add_handler(edit_conv)
    app.add_handler(CommandHandler("profile", profile))

    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("about", about))
    app.add_handler(CommandHandler("rules", rules))

    # –§–∞–Ω
    app.add_handler(CommandHandler("pipisa", pipisa))
    app.add_handler(CommandHandler("top5", top5))
    app.add_handler(CommandHandler("rating", rating))
    app.add_handler(CommandHandler("predskaz", predskaz))
    app.add_handler(CommandHandler("hugs", hugs))
    app.add_handler(CommandHandler("compliment", compliment))
    app.add_handler(CommandHandler("lesbi", lesbi))
    app.add_handler(CommandHandler("role", role))

    # –¢—Ä–µ–∫–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–º ‚Äî —á—Ç–æ–±—ã –Ω–µ —Å–±–∏–≤–∞—Ç—å ConversationHandler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, track_speaker))

    # JobQueue ‚Äî –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –î–† (–∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 09:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞)
    app.job_queue.run_daily(birthday_job, time(hour=9, minute=0))

    return app

if __name__ == "__main__":
    application = build_application()
    print("OnlyGirls bot –∑–∞–ø—É—â–µ–Ω‚Ä¶")
    application.run_polling()
