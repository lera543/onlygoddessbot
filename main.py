# -*- coding: utf-8 -*-
import json
import logging
import random
import re
from datetime import datetime, date, time
from pathlib import Path

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ChatMemberHandler,
    ConversationHandler, ContextTypes, filters
)

# ===================== –ù–ê–°–¢–†–û–ô–ö–ò =====================
TOKEN = "8215387975:AAHS_mMHzXBGtDVevEBiSwsLcLPChs7Yq7k"
CHAT_ID = -1001849339863  # –æ–±—â–∏–π —á–∞—Ç
DATA_FILE = Path("data.json")

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO
)
logger = logging.getLogger("OnlyGirlsBot")

# ===================== –•–†–ê–ù–ò–õ–ò–©–ï =====================
state = {
    "users": {},
    "known_users": [],
    "last_lesbi_date": None,
    "last_lesbi_pair": None
}

def load_state():
    if DATA_FILE.exists():
        try:
            data = json.loads(DATA_FILE.read_text(encoding="utf-8"))
            state.update(data)
            # –º—è–≥–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–∏–º username —Ç–∞–º, –≥–¥–µ –Ω–µ—Ç
            for suid, u in state.get("users", {}).items():
                if "username" not in u:
                    u["username"] = ""
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å data.json: {e}")

def save_state():
    try:
        DATA_FILE.write_text(json.dumps(state, ensure_ascii=False, indent=2), encoding="utf-8")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è data.json: {e}")

load_state()

# ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï =====================
def today_str() -> str:
    return date.today().isoformat()

def ensure_user(user_id: int):
    suid = str(user_id)
    if suid not in state["users"]:
        state["users"][suid] = {
            "name": "",
            "username": "",
            "nickname": "",
            "uid": "",
            "bday": "",
            "city": "",
            "tiktok": "",
            "joined_date": "",
            "quote": "",
            "pipisa": 0.0,
            "pipisa_power": 0,
            "last_pipisa": None,
            "last_prediction": None,
            "last_duel_date": None,
            "duel_uses": 0,
        }
    if user_id not in state.get("known_users", []):
        state["known_users"].append(user_id)

def tg_link_from_id(user_id: int, text: str = "–¥–µ–≤–æ—á–∫–∞") -> str:
    return f'<a href="tg://user?id={user_id}">{text}</a>'

def display_user(user_id: int) -> str:
    u = state["users"].get(str(user_id))
    if u:
        if u.get("name"):
            return u["name"]
        if u.get("username"):
            return f"@{u['username']}"
    return tg_link_from_id(user_id, "–¥–µ–≤–æ—á–∫–∞")

def is_url(s: str) -> bool:
    return s.startswith("http://") or s.startswith("https://")

def find_user_id_by_username(username: str) -> int | None:
    username = username.lower().lstrip("@")
    for suid, u in state["users"].items():
        if u.get("username") and u["username"].lower() == username:
            return int(suid)
    return None

def store_user(user):
    """–ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è –∏ username —É –ª—é–±–æ–≥–æ –≤—Å—Ç—Ä–µ—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not user:
        return
    ensure_user(user.id)
    u = state["users"][str(user.id)]
    u["name"] = user.mention_html()
    if user.username:
        u["username"] = user.username
    save_state()

# —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ü–ï–†–ï–î —ç–º–æ–¥–∑–∏ (–≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫)
_EMOJI_SPACE_FIX_RE = re.compile(r' (?=[\u2600-\u27BF\U0001F300-\U0001FAFF])')
def emo(s: str) -> str:
    return _EMOJI_SPACE_FIX_RE.sub("", s)

# ===================== –ö–õ–ê–í–ê =====================
MAIN_KB = ReplyKeyboardMarkup(
    [
        ["üå± /pipisa", "üîÆ /predskaz", "ü§ó /hugs"],
        ["üåà /lesbi", "üè∑Ô∏è /role", "‚öîÔ∏è /duel"],
        ["üèÜ /top5", "üìä /rating"],
        ["üë§ /profile", "‚úèÔ∏è /editprofile"],
        ["üìú /rules", "üôà /hide"]
    ],
    resize_keyboard=True
)

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store_user(update.effective_user)
    await update.message.reply_text(emo("–ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æüíñ"), reply_markup=MAIN_KB)

async def hide(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store_user(update.effective_user)
    await update.message.reply_text(emo("–°–ø—Ä—è—Ç–∞–ª–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—Éüôà"), reply_markup=ReplyKeyboardRemove())

# ===================== –ü–†–ò–í–ï–¢–°–¢–í–ò–ï/–ü–†–û–©–ê–ù–ò–ï =====================
async def greet_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cmu = update.chat_member
    if not cmu:
        return
    old = cmu.old_chat_member.status
    new = cmu.new_chat_member.status
    if (old in ("left", "kicked")) and (new in ("member", "administrator", "creator")):
        user = cmu.new_chat_member.user
        store_user(user)
        text = (
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.mention_html()}‚ù£Ô∏è"
            f' –û–∑–Ω–∞–∫–æ–º—å—Å—è –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∫–ª–∞–Ω–∞'
            f' (<a href="https://telegra.ph/Pravila-klana-%E0%A6%90OnlyGirls%E0%A6%90-05-29">–∑–¥–µ—Å—å</a>)ü´∂'
            f" –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Å–µ–≥–¥–∞ –≤ –∑–∞–∫—Ä–µ–ø–µ‚ùóÔ∏è –ö–ª–∞–Ω–æ–≤–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞: ‡¶î"
        )
        await context.bot.send_message(chat_id=cmu.chat.id, text=emo(text), parse_mode="HTML")

async def farewell_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cmu = update.chat_member
    if not cmu:
        return
    old = cmu.old_chat_member.status
    new = cmu.new_chat_member.status
    if (old in ("member", "administrator", "creator")) and (new in ("left", "kicked")):
        user = cmu.old_chat_member.user
        # –∏–º—è —É–∂–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ä–∞–Ω–µ–µ, –Ω–æ –æ–±–Ω–æ–≤–∏–º –Ω–∞ –≤—Å—è–∫–∏–π
        store_user(user)
        text = f"{display_user(user.id)} –ø–æ–∫–∏–Ω—É–ª–∞ —á–∞—Ç, –±—É–¥–µ–º —Å–∫—É—á–∞—Ç—åüíî"
        await context.bot.send_message(chat_id=cmu.chat.id, text=emo(text), parse_mode="HTML")

# ===================== /START –∏ /ABOUT =====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store_user(update.effective_user)
    await update.message.reply_text(
        emo("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ú–∞—Ç—å –ë–æ–≥–∏–Ω—å –¥–ª—è –∫–ª–∞–Ω–∞ OnlyGirlsüíñ\n–ù–∞–ø–∏—à–∏ /about —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã."),
        reply_markup=MAIN_KB
    )

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store_user(update.effective_user)
    await update.message.reply_text(emo(
        "‚ú® –ö–æ–º–∞–Ω–¥—ã:\n"
        "/menu ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n"
        "/editprofile ‚Äî –∑–∞–ø–æ–ª–Ω–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–ø–æ—à–∞–≥–æ–≤–æ)\n"
        "/profile ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/pipisa ‚Äî –≤—ã—Ä–∞—Å—Ç–∏—Ç—å/—É–º–µ–Ω—å—à–∏—Ç—å –ø–∏–ø–∏—Å—É (1 —Ä–∞–∑ –≤ –¥–µ–Ω—å)\n"
        "/duel @—é–∑–µ—Ä ‚Äî –¥—É—ç–ª—å –ø–∏–ø–∏—Å (–¥–æ 3 –≤ –¥–µ–Ω—å)\n"
        "/top5 ‚Äî —Ç–æ–ø-5 –ø–æ –ø–∏–ø–∏—Å–µ\n"
        "/rating ‚Äî –ø–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–∏–ø–∏—Å\n"
        "/predskaz ‚Äî –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–Ω—è (1 —Ä–∞–∑ –≤ –¥–µ–Ω—å)\n"
        "/hugs [@—é–∑–µ—Ä] ‚Äî –æ–±–Ω–∏–º–∞—à–∫–∏ (–¥–ª—è –≤—Å–µ—Ö/—É–∫–∞–∑–∞–Ω–Ω–æ–π)\n"
        "/lesbi ‚Äî –ª–µ—Å–±–∏-–ø–∞—Ä–∞ –¥–Ω—è (1 —Ä–∞–∑ –≤ –¥–µ–Ω—å)\n"
        "/role [@—é–∑–µ—Ä] ‚Äî ¬´–∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è —Å–∞–º–∞—è‚Ä¶¬ª\n"
        "/rules ‚Äî –ø—Ä–∞–≤–∏–ª–∞ –∫–ª–∞–Ω–∞ (—Å—Å—ã–ª–∫–∞)\n"
        "/hide ‚Äî —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"
    ))

# ===================== /RULES (—Å—Å—ã–ª–∫–∞) =====================
async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store_user(update.effective_user)
    await update.message.reply_text(
        emo('–ö–æ—Ç–∏–∫, –ø—Ä–∞–≤–∏–ª–∞ –∫–ª–∞–Ω–∞ <a href="https://telegra.ph/Pravila-klana-%E0%A6%90OnlyGirls%E0%A6%90-05-29">–∑–¥–µ—Å—å</a>ü´∂'),
        parse_mode="HTML"
    )

# ===================== –ü–†–û–§–ò–õ–¨ =====================
(
    STEP_NAME,
    STEP_NICK,
    STEP_UID,
    STEP_BDAY,
    STEP_CITY,
    STEP_TIKTOK,
    STEP_QUOTE
) = range(7)

def render_profile(u: dict) -> str:
    name = u.get("name") or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    nickname = u.get("nickname") or ""
    uid = u.get("uid") or ""
    bday = u.get("bday") or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    city = u.get("city") or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    tiktok = u.get("tiktok") or ""
    quote = u.get("quote") or "‚Äî"
    pipisa = float(u.get("pipisa") or 0.0)

    if tiktok:
        if is_url(tiktok):
            tt_line = f'üì≤ TikTok: <a href="{tiktok}">TikTok</a>'
        else:
            at = tiktok if tiktok.startswith("@") else f"@{tiktok}"
            tt_line = f"üì≤ TikTok: {at}"
    else:
        tt_line = "üì≤ TikTok: –Ω–µ —É–∫–∞–∑–∞–Ω"

    text = (
        f"üôã‚Äç‚ôÄÔ∏è –ò–º—è: {name}\n"
        f"üéÆ –ù–∏–∫ –≤ –∏–≥—Ä–µ: <code>{nickname}</code>\n"
        f"üî¢ UID: <code>{uid}</code>\n"
        f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {bday}\n"
        f"üèô –ì–æ—Ä–æ–¥: {city}\n"
        f"{tt_line}\n"
        f"üçÜ –ü–∏–ø–∏—Å–∞: {pipisa:.1f} —Å–º\n"
        f"üìù –î–µ–≤–∏–∑: {quote}"
    )
    return text

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store_user(update.effective_user)
    uid = str(update.effective_user.id)
    ensure_user(update.effective_user.id)
    u = state["users"].get(uid)
    await update.message.reply_text(emo(render_profile(u)), parse_mode="HTML")

async def editprofile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store_user(update.effective_user)
    ensure_user(update.effective_user.id)
    context.user_data["profile_answers"] = {}
    await update.message.reply_text(emo("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?(–∏–º—è)"))
    return STEP_NAME

async def step_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store_user(update.effective_user)
    context.user_data["profile_answers"]["name"] = update.effective_user.mention_html()
    await update.message.reply_text(emo("–ö–∞–∫–æ–π —É —Ç–µ–±—è –Ω–∏–∫ –≤ –∏–≥—Ä–µ?"))
    return STEP_NICK

async def step_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store_user(update.effective_user)
    context.user_data["profile_answers"]["nickname"] = update.message.text.strip()
    await update.message.reply_text(emo("–ö–∞–∫–æ–π —É —Ç–µ–±—è UID?"))
    return STEP_UID

async def step_uid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store_user(update.effective_user)
    context.user_data["profile_answers"]["uid"] = update.message.text.strip()
    await update.message.reply_text(emo("–ö–æ–≥–¥–∞ —É —Ç–µ–±—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è?(–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2000 –∏–ª–∏ 01.01)"))
    return STEP_BDAY

async def step_bday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store_user(update.effective_user)
    context.user_data["profile_answers"]["bday"] = update.message.text.strip()
    await update.message.reply_text(emo("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?"))
    return STEP_CITY

async def step_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store_user(update.effective_user)
    context.user_data["profile_answers"]["city"] = update.message.text.strip()
    await update.message.reply_text(emo("–û—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ TikTok –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–≤–æ–π –Ω–∏–∫(@username):"))
    return STEP_TIKTOK

async def step_tiktok(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store_user(update.effective_user)
    context.user_data["profile_answers"]["tiktok"] = update.message.text.strip()
    await update.message.reply_text(emo("–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –¥–µ–≤–∏–∑–æ–º –∏–ª–∏ –ª—é–±–∏–º–æ–π —Ü–∏—Ç–∞—Ç–æ–π:"))
    return STEP_QUOTE

async def step_quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store_user(update.effective_user)
    context.user_data["profile_answers"]["quote"] = update.message.text.strip()
    uid = str(update.effective_user.id)
    ensure_user(update.effective_user.id)

    stored = state["users"][uid]
    for k, v in context.user_data["profile_answers"].items():
        stored[k] = v
    if not stored.get("joined_date"):
        stored["joined_date"] = today_str()
    stored["username"] = (update.effective_user.username or "").lower()
    save_state()
    await update.message.reply_text(emo("–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω‚úÖ"))
    return ConversationHandler.END

# ===================== –ü–ò–ü–ò–°–ê =====================
PIPISA_UP_REACTIONS = [
    "–û–Ω–∞ —Å—Ç—Ä–µ–º–∏—Ç—Å—è –∫ –≤–µ—Ä—à–∏–Ω–∞–º!üìà",
    "–í–ø–µ—Ä–µ–¥ –∏ –≤—ã—à–µ‚Äî–≥–æ—Ä–¥–∏–º—Å—è!ü•≥",
    "–¢–∞–∫ —Ä–∞—Å—Ç—ë—Ç —Ç–æ–ª—å–∫–æ –ª–µ–≥–µ–Ω–¥–∞!üåü",
    "–°–∏—è–µ—Ç –∏ —Ä–∞–¥—É–µ—Ç —Ö–æ–∑—è–π–∫—É!‚ú®",
]
PIPISA_DOWN_REACTIONS = [
    "–ù–∏—á–µ–≥–æ, –∑–∞–≤—Ç—Ä–∞ –≤–µ—Ä–Ω—ë–º –ø–æ–∑–∏—Ü–∏–∏üí™",
    "–ò–Ω–æ–≥–¥–∞ –∏ –≥–µ—Ä–æ—è–º –Ω—É–∂–µ–Ω –æ—Ç–¥—ã—ÖüåßÔ∏è",
    "–û–±–Ω–∏–º–µ–º‚Äî–∏ –≤—Å—ë –ø—Ä–æ–π–¥—ë—Çü´Ç",
    "–°–º–µ–Ω–∏–º –≤–∞–π–±‚Äî–ø–æ–π–¥—ë—Ç –≤–≤–µ—Ä—Öüåà",
]

def _rand_delta():
    d = round(random.uniform(-10.0, 10.0), 1)
    if abs(d) < 0.1:
        d = 0.1 if random.random() > 0.5 else -0.1
    return d

async def pipisa(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store_user(update.effective_user)
    uid = str(update.effective_user.id)
    ensure_user(update.effective_user.id)
    u = state["users"][uid]
    u["username"] = (update.effective_user.username or "").lower()

    if u.get("last_pipisa") == today_str():
        await update.message.reply_text(emo("–ü–∏–ø–∏—Å—É –º–æ–∂–Ω–æ —Ä–∞—Å—Ç–∏—Ç—å/–º–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å!üå±"))
        return

    delta = _rand_delta()
    new_val = round(float(u.get("pipisa", 0.0)) + delta, 1)
    if new_val < -50.0:
        new_val = -50.0

    u["pipisa"] = new_val
    u["last_pipisa"] = today_str()
    save_state()

    if delta > 0:
        phrase = random.choice([
            f"üçÜ–¢–≤–æ—è –ø–∏–ø–∏—Å–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ {delta:.1f} —Å–º!{random.choice(PIPISA_UP_REACTIONS)} –¢–µ–ø–µ—Ä—å: {new_val:.1f} —Å–º.",
            f"üçÜ–û–≥–æ! +{delta:.1f} —Å–º‚Äî–≤–æ—Ç —ç—Ç–æ —Ä–æ—Å—Ç!{random.choice(PIPISA_UP_REACTIONS)} –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {new_val:.1f} —Å–º.",
        ])
    else:
        phrase = random.choice([
            f"üçÜ–û—É‚Ä¶ –ø–∏–ø–∏—Å–∞ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å –Ω–∞ {abs(delta):.1f} —Å–º.{random.choice(PIPISA_DOWN_REACTIONS)} –°–µ–π—á–∞—Å: {new_val:.1f} —Å–º.",
            f"üçÜ–ù–µ–º–Ω–æ–≥–æ –ø—Ä–æ—Å–µ–ª–∞({abs(delta):.1f} —Å–º).{random.choice(PIPISA_DOWN_REACTIONS)} –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {new_val:.1f} —Å–º.",
        ])
    await update.message.reply_text(emo(phrase), parse_mode="HTML")

# ===================== –î–£–≠–õ–¨ (–¥–æ 3/–¥–µ–Ω—å) =====================
def _clamp(v, lo, hi):
    return max(lo, min(hi, v))

async def duel_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store_user(update.effective_user)
    me = update.effective_user
    ensure_user(me.id)
    state["users"][str(me.id)]["username"] = (me.username or "").lower()

    # —Ü–µ–ª—å: reply –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ, –ø–æ—Ç–æ–º @username
    target_id = None
    if update.message and update.message.reply_to_message:
        target_id = update.message.reply_to_message.from_user.id
    elif context.args:
        arg = context.args[0].strip().lstrip("@")
        target_id = find_user_id_by_username(arg)

    if not target_id:
        await update.message.reply_text(emo("–û—Ç–º–µ—Ç—å —Å–æ–ø–µ—Ä–Ω–∏—Ü—É: /duel @username –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /duel."))
        return
    if target_id == me.id:
        await update.message.reply_text(emo("–° —Å–æ–±–æ–π –¥—É—ç–ª–∏—Ç—å—Å—è –Ω–µ–ª—å–∑—èüôÉ"))
        return

    ensure_user(target_id)
    me_u = state["users"][str(me.id)]
    tg_u = state["users"][str(target_id)]

    # –ª–∏–º–∏—Ç 3 –≤ –¥–µ–Ω—å
    if me_u.get("last_duel_date") != today_str():
        me_u["last_duel_date"] = today_str()
        me_u["duel_uses"] = 0
    if me_u["duel_uses"] >= 3:
        await update.message.reply_text(emo("–¢—ã —É–∂–µ –ø—Ä–æ–≤–µ–ª–∞ 3 –¥—É—ç–ª–∏ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞üåô"))
        return

    my_power = int(me_u.get("pipisa_power", 0))
    opp_power = int(tg_u.get("pipisa_power", 0))
    win_chance = 0.50 + 0.05 * (my_power - opp_power)
    win_chance = _clamp(win_chance, 0.20, 0.80)

    amount = round(random.uniform(0.1, 3.0), 1)
    win = (random.random() < win_chance)

    me_size = float(me_u.get("pipisa", 0.0))
    tg_size = float(tg_u.get("pipisa", 0.0))

    if win:
        steal = min(amount, tg_size + 50.0)  # —É —Å–æ–ø–µ—Ä–Ω–∏—Ü—ã –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∏–Ω—É—Å‚Äî–≤–æ—Ä—É–µ–º –¥–æ –ª–æ–≥–∏–∫–∏ —Ä–∞–∑–º–µ—Ä–∞
        me_u["pipisa"] = round(me_size + steal, 1)
        tg_u["pipisa"] = round(tg_size - steal, 1)
        me_u["pipisa_power"] = me_u.get("pipisa_power", 0) + 2
        tg_u["pipisa_power"] = tg_u.get("pipisa_power", 0) + 1
        outcome = (
            f"‚öîÔ∏è {me.mention_html()} –ø–æ–±–µ–¥–∏–ª–∞ –≤ –¥—É—ç–ª–∏ —É {display_user(target_id)}!\n"
            f"üçÜ –ü–µ—Ä–µ—à–ª–æ {steal:.1f} —Å–º‚Üí—Ç–µ–ø–µ—Ä—å —É —Ç–µ–±—è {me_u['pipisa']:.1f} —Å–º, —É —Å–æ–ø–µ—Ä–Ω–∏—Ü—ã {tg_u['pipisa']:.1f} —Å–º."
        )
        tail = random.choice(["–õ–µ–≥–µ–Ω–¥–∞ —É—Å–∏–ª–∏–ª–∞—Å—å!üí™", "–°–∏–ª–∞ —Ä–∞—Å—Ç—ë—Ç‚Äî–±–µ—Ä–µ–≥–∏—Ç–µ—Å—å!‚ú®", "–û—á–µ–Ω—å –æ–ø–∞—Å–Ω–∞—è –±–æ–≥–∏–Ω—è‚Ä¶üëë"])
    else:
        steal = min(amount, me_size + 50.0)
        me_u["pipisa"] = round(me_size - steal, 1)
        tg_u["pipisa"] = round(tg_size + steal, 1)
        me_u["pipisa_power"] = me_u.get("pipisa_power", 0) + 1
        tg_u["pipisa_power"] = tg_u.get("pipisa_power", 0) + 2
        outcome = (
            f"‚öîÔ∏è {me.mention_html()} –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ –¥—É—ç–ª—å {display_user(target_id)}...\n"
            f"üçÜ –£—à–ª–æ {steal:.1f} —Å–º‚Üí—Ç–µ–ø–µ—Ä—å —É —Ç–µ–±—è {me_u['pipisa']:.1f} —Å–º, —É —Å–æ–ø–µ—Ä–Ω–∏—Ü—ã {tg_u['pipisa']:.1f} —Å–º."
        )
        tail = random.choice(["–ù–∏—á–µ–≥–æ, –∑–∞–≤—Ç—Ä–∞ —Ä–µ–≤–∞–Ω—à!ü´∂", "–û–±–Ω–∏–º–∞—à–∫–∏ –∏ –≤–ø–µ—Ä—ë–¥ –∫ –ø–æ–±–µ–¥–∞–ºü§ó", "–û–ø—ã—Ç —Ç–æ–∂–µ —Å–∏–ª–∞!üåü"])

    me_u["duel_uses"] += 1
    save_state()
    await update.message.reply_text(emo(outcome + "\n" + tail), parse_mode="HTML")

# ===================== –†–ï–ô–¢–ò–ù–ì–ò =====================
async def top5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store_user(update.effective_user)
    rows = sorted(state["users"].items(), key=lambda kv: kv[1].get("pipisa", 0.0), reverse=True)[:5]
    if not rows:
        await update.message.reply_text(emo("–†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç. –ü–æ–ª–∏–≤–∞–π –ø–∏–ø–∏—Å—É —á–∞—â–µüå±"))
        return
    text = "üèÜ –¢–û–ü-5 –ø–∏–ø–∏—Å –∫–ª–∞–Ω–∞:\n"
    for i, (uid, u) in enumerate(rows, 1):
        text += f"{i}. {u.get('name') or tg_link_from_id(int(uid), uid)}: {u.get('pipisa', 0.0):.1f} —Å–º\n"
    await update.message.reply_text(emo(text), parse_mode="HTML")

async def rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store_user(update.effective_user)
    rows = sorted(state["users"].items(), key=lambda kv: kv[1].get("pipisa", 0.0), reverse=True)
    if not rows:
        await update.message.reply_text(emo("–†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç. –ü–æ–ª–∏–≤–∞–π –ø–∏–ø–∏—Å—É —á–∞—â–µüå±"))
        return
    text = "üìä –ü–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–∏–ø–∏—Å:\n"
    for i, (uid, u) in enumerate(rows, 1):
        text += f"{i}. {u.get('name') or tg_link_from_id(int(uid), uid)}: {u.get('pipisa', 0.0):.1f} —Å–º\n"
    await update.message.reply_text(emo(text), parse_mode="HTML")

# ===================== –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø (200) =====================
PREDICTIONS = [
    "–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –¥–µ–Ω—å‚Äî–¥–∞–∂–µ –µ—Å–ª–∏ –æ–±–ª–∞—á–Ω–æ‚òÅÔ∏è",
    "–£–ª—ã–±–∫–∞ —Ä–µ—à–∏—Ç –±–æ–ª—å—à–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—èüòä",
    "–î–µ–ª–∞–π –ø–æ –ª—é–±–≤–∏‚Äî–∏ –±—É–¥–µ—Ç –∫–∞–π—Ñüíñ",
    "–í—Å–µ–ª–µ–Ω–Ω–∞—è —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ‚ú®",
    "–¢—ã –≤–∏–¥–∏—à—å –±–æ–ª—å—à–µ, —á–µ–º –¥—Ä—É–≥–∏–µ‚Äî–¥–æ–≤–µ—Ä—å—Å—è —Å–µ–±–µüëÅÔ∏è",
    "–ú–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ —Ç–æ–∂–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥üë£",
    "–°–ª—É—Ö–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Å–ª—É—Ö–∞–º–∏‚Äî–±—É–¥—å –≤—ã—à–µüïäÔ∏è",
    "–ü—É—Å—Ç—å –¥—É—à–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ—Ç–∞–Ω—Ü—É–µ—ÇüíÉ",
    "–¢—ã‚Äî—á—å—ë-—Ç–æ ¬´–ø–æ–≤–µ–∑–ª–æ¬ªüçÄ",
    "–°–∫–∞–∂–∏ —Å–µ–±–µ ¬´–º–æ–ª–æ–¥–µ—Ü¬ª‚Äî—Ç—ã —ç—Ç–æ —É—Å–ª—ã—à–∏—à—åü•∞",
    "–ë—É–¥—å –¥–æ–±—Ä–µ–µ –∫ —Å–µ–±–µ, —Ç—ã —Å—Ç–∞—Ä–∞–µ—à—å—Å—èüíó",
    "–õ—ë–≥–∫–∞—è –º–∞–≥–∏—è —Ä—è–¥–æ–º‚Äî–ø—Ä–æ—Å—Ç–æ –≤–¥–æ—Ö–Ω–∏üå¨Ô∏è",
    "–û–¥–Ω–∞ –∏—Å–∫—Ä–µ–Ω–Ω—è—è —Ñ—Ä–∞–∑–∞ –∏–∑–º–µ–Ω–∏—Ç –¥–µ–Ω—å‚úâÔ∏è",
    "–¢–≤–æ—è –Ω–µ–∂–Ω–æ—Å—Ç—å‚Äî—Ç–≤–æ—è —Å–∏–ª–∞üå∏",
    "–°–º–µ–ª–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è –æ–∫—É–ø–∏—Ç—Å—èüõ°Ô∏è",
    "–°–ª—É—á–∞–π–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ –æ–∫–∞–∂–µ—Ç—Å—è –≤–∞–∂–Ω–æ–πü§ù",
    "–î–∞–π –º–∏—Ä—É —Ç–æ, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—åüåç",
    "–ü—É—Å—Ç—å –±—É–¥–µ—Ç —É—é—Ç–Ω–æ –≤–Ω—É—Ç—Ä–∏ü´∂",
    "–¢–∞–º, –≥–¥–µ –ª—é–±–æ–≤—å‚Äî—Ç–∞–º –∏ –ø—É—Ç—å‚ù§Ô∏è",
    "–í—Å–µ–º—É —Å–≤–æ—ë –≤—Ä–µ–º—è‚Äî—Ç—ã —É—Å–ø–µ–µ—à—å‚è≥",
    "–°–µ–≥–æ–¥–Ω—è –ø–æ–ª—É—á–∏—Ç—Å—è —Ç–æ, —á—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–ª–æ—Å—å –≤—á–µ—Ä–∞üí´",
    "–í–¥–æ—Ö–Ω–æ–≤–ª—è–π—Å—è —Ç–µ–º, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–¥—É–µ—Çüå∑",
    "–¢—ã –∫—Ä–∞—Å–∏–≤–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—åüòå",
    "–õ–µ–≥–∫–æ‚Äî–Ω–µ –∑–Ω–∞—á–∏—Ç –ø—É—Å—Ç–æ, –ø—Ä–æ—Å—Ç–æ –ª–µ–≥–∫–æüåø",
    "–í—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –º—è–≥—á–µ‚Äî–ø–æ–ø—Ä–æ–±—É–πüß∏",
    "–û–±–µ—Ä–Ω–∏—Å—å: —Ç—ã —É–∂–µ –¥–∞–ª–µ–∫–æ –ø—Ä–æ—à–ª–∞üõ§Ô∏è",
    "–ù–µ–±–æ–ª—å—à–∞—è –ø–æ–±–µ–¥–∞‚Äî—Ç–æ–∂–µ –ø–æ–±–µ–¥–∞üèÖ",
    "–¢–µ–ø–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –¥–∞—ë—à—å, –≤–µ—Ä–Ω—ë—Ç—Å—èüîÅ",
    "–ú–∏—Ä –∂–¥—ë—Ç —Ç–≤–æ—é —É–ª—ã–±–∫—ÉüòÅ",
    "–¢—ã‚Äî–≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏üìñ",
    "–î–æ–≤–µ—Ä—è–π –∏–Ω—Ç—É–∏—Ü–∏–∏‚Äî–æ–Ω–∞ –≥—Ä–æ–º–∫–æ —à–µ–ø—á–µ—ÇüîÆ",
    "–°–¥–µ–ª–∞–π –ø–∞—É–∑—É –∏ –≤—ã–ø–µ–π –≤–æ–¥—ãüíß",
    "–ù–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–π‚Äî—Å–∏—è–π —Å–≤–æ–∏–º —Å–≤–µ—Ç–æ–º‚ú®",
    "–°–µ–≥–æ–¥–Ω—è –º–æ–∂–Ω–æ —á—É—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –≤—á–µ—Ä–∞üö™",
    "–¢—ã –¥–æ—Å—Ç–æ–π–Ω–∞ –∏–º–µ–Ω–Ω–æ —Ç–æ–≥–æ, —á–µ–≥–æ —Ö–æ—á–µ—à—åüíç",
    "–ü—Ä–∏–∑–Ω–∞–π —Å–µ–±–µ, —á—Ç–æ –≥–æ—Ä–¥–∏—à—å—Å—è —Å–æ–±–æ–πü™û",
    "–ë–µ—Ä–∏ —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –ø–æ –ª—é–±–≤–∏ü§ç",
    "–°–º–µ—Ö —Å–µ–≥–æ–¥–Ω—è –ª–µ—á–∏—Ç –ª—É—á—à–µ –≤—Å–µ–≥–æüòÇ",
    "–¢—ã‚Äî–¥–µ–≤–æ—á–∫–∞ —Å –∫–æ—Å–º–æ—Å–æ–º –≤ –≥–ª–∞–∑–∞—Öüåå",
    "–ì—Ä–∞–Ω–∏—Ü—ã‚Äî—ç—Ç–æ —Ç–æ–∂–µ –ª—é–±–æ–≤—å –∫ —Å–µ–±–µüß≠",
    "–ü–æ–∑–≤–æ–ª—å —Å–µ–±–µ –±—ã—Ç—å —É—è–∑–≤–∏–º–æ–π‚Äî—ç—Ç–æ –∫—Ä–∞—Å–∏–≤–æüíû",
    "–ü—É—Ç—å —Å—Ç–∞–Ω–µ—Ç —è—Å–Ω–µ–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ü™ú",
    "–¢—ã —É–º–µ–µ—à—å –±–æ–ª—å—à–µ, —á–µ–º –¥—É–º–∞–µ—à—åüß†",
    "–°–∫–∞–∂–∏ ¬´–¥–∞¬ª —Ç–æ–º—É, —á—Ç–æ –∑–æ–≤—ë—ÇüöÄ",
    "–¢—ã –Ω—Ä–∞–≤–∏—à—å—Å—è –ª—é–¥—è–º –±–æ–ª—å—à–µ, —á–µ–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—à—åü´∂",
    "–°–ø—Ä—è—á—å—Å—è –≤ —É—é—Ç –Ω–∞ 15 –º–∏–Ω—É—Ç‚Äî—ç—Ç–æ –∑–∞–∫–æ–Ω–Ω–æ‚òïÔ∏è",
    "–ù–µ–∂–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è –ø–æ–±–µ–¥–∏—Ç –≥—Ä—É–±–æ—Å—Ç—åüåº",
    "–¢—ã –º–æ–∂–µ—à—å –≤—Å—ë, –Ω–æ –Ω–µ –æ–±—è–∑–∞–Ω–∞ –≤—Å—ë —Å—Ä–∞–∑—Éüß©",
    "–í–∞—à–∏ –º–µ—á—Ç—ã —Å–æ–≥–ª–∞—à–∞—é—Ç—Å—è –Ω–∞ –ø–ª–∞–Ω‚úçÔ∏è",
    "–ò—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å‚Äî—Ç–≤–æ—è —Å—É–ø–µ—Ä—Å–∏–ª–∞ü¶∏‚Äç‚ôÄÔ∏è",
    "–ù–µ –Ω—É–∂–Ω–æ —Å–ø–µ—à–∏—Ç—å‚Äî–≤—Å—ë –ø–æ —Ç–≤–æ–µ–º—É —Ç–∞–π–º–∏–Ω–≥—É‚è±",
    "–¢–µ–±—è —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æüíó",
    "–°–≤–µ—Ä–∫–∞–π, –Ω–æ –ø–æ-—Å–≤–æ–µ–º—É‚ú®",
    "–ú–∏—Ä –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—Å—è –ø–æ–¥ —Ç–≤–æ—é –ª—é–±–æ–≤—å –∫ —Å–µ–±–µüíì",
    "–ü—É—Å—Ç—å –±—É–¥–µ—Ç —á—É—Ç—å –±–æ–ª—å—à–µ –ª—ë–≥–∫–æ—Å—Ç–∏üåà",
    "–í–¥–æ—Ö–Ω–∏ –≥–ª—É–±–∂–µ‚Äî–∏ —Å—Ç–∞–Ω–µ—Ç —Ç–∏—à–µ –≤–Ω—É—Ç—Ä–∏ü´Å",
    "–¢—ã‚Äî–ø—Ä–∏—á–∏–Ω–∞ —á—å–µ–π-—Ç–æ –≤–µ—Ä—ã –≤ –¥–æ–±—Ä–æüåü",
    "–°—á–∞—Å—Ç—å–µ –≤ –º–µ–ª–æ—á–∞—Ö‚Äî–Ω–∞–π–¥–∏ —Ç—Ä–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Åüîé",
    "–°–µ–≥–æ–¥–Ω—è —Ç–µ–±—è –∑–∞–º–µ—Ç—è—Ç‚Äî–±—É–¥—å —Å–æ–±–æ–πüëÄ",
    "–ù–µ –∏–¥–µ–∞–ª—å–Ω–æ—Å—Ç—å –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è –∏–¥–µ–∞–ª—å–Ω–æ–πüíê",
    "–¢—ã‚Äî—Ç–∞ —Å–∞–º–∞—è –¥–µ–≤–æ—á–∫–∞-–æ–±–Ω–∏–º–∞—à–∫–∞ü§ó",
    "–ì—Ä—É—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–∞—è, –∞ —Ç—ã‚Äî–Ω–∞–≤—Å–µ–≥–¥–∞üíû",
    "–î–æ–≤–µ—Ä—è–π –ª—é–¥—è–º –≤—ã–±–æ—Ä–æ—á–Ω–æ –∏ —Å–µ–±–µ –±–µ–∑—É—Å–ª–æ–≤–Ω–æüîê",
    "–¢—ã‚Äî–≤–æ–ª—à–µ–±–Ω–∏—Ü–∞ —É—é—Ç–Ω—ã—Ö –≤–µ—á–µ—Ä–æ–≤üåô",
    "–ù–µ –∂–¥–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –∂–∏–≤–∏üí´",
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –¥–æ–±—Ä–æ–π –º—ã—Å–ª–∏üåÖ",
    "–ü—É—Å—Ç—å –≤—Å—ë —Å–ª—É—á–∏—Ç—Å—è –º—è–≥–∫–æ –∏ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æü´ß",
    "–°–¥–µ–ª–∞–π —á—Ç–æ-—Ç–æ –∫—Ä–∞—Å–∏–≤–æ–µ –¥–ª—è —Å–µ–±—èü´∂",
    "–°—á–∞—Å—Ç—å–µ –ª—é–±–∏—Ç —Ç–≤–æ—ë –∏–º—èüíå",
    "–õ—É—á—à–∞—è –≤–µ—Ä—Å–∏—è —Ç–µ–±—è‚Äî—É–∂–µ –∑–¥–µ—Å—åüíé",
    "–¢—ã‚Äî–ø—Ä–∏—á–∏–Ω–∞ –¥–ª—è —Ç–∞–Ω—Ü–∞üíÉ",
    "–£ —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è. –¢–æ—á–∫–∞‚úÖ",
    "–°–µ–≥–æ–¥–Ω—è —Ç—ã –∫–æ–º—É-—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ‚ú®",
    "–û–±–º–∞–Ω–∏ —Ç—Ä–µ–≤–æ–≥—É –æ–±—ä—è—Ç–∏–µ–ºü´Ç",
    "–ü—É—Å—Ç—å —Å–µ—Ä–¥—Ü–µ —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –ª—ë–≥–∫–∏–ºü™Ω",
    "–¢–æ, —á—Ç–æ —Ç–≤–æ—ë‚Äî–Ω–∞–π–¥—ë—Ç —Ç–µ–±—èüß≠",
    "–¢—ã —É–º–µ–µ—à—å –¥–µ–ª–∞—Ç—å —Ç–µ–ø–ª–æ –∏–∑ –Ω–∏—á–µ–≥–æüî•",
    "–ü–æ–ø—Ä–æ—Å–∏ –æ –ø–æ–º–æ—â–∏‚Äî—ç—Ç–æ —Ç–æ–∂–µ —Å–∏–ª–∞ü§ù",
    "–¢–≤–æ—è –Ω–µ–∂–Ω–æ—Å—Ç—å –ª–µ—á–∏—Ç –ª—é–¥–µ–π —Ä—è–¥–æ–ºüíó",
    "–¢—ã‚Äî—Å–∏—è—é—â–∞—è –∑–≤—ë–∑–¥–æ—á–∫–∞‚≠êÔ∏è",
    "–°–º–µ–Ω–∏ –º—É–∑—ã–∫—É‚Äî—Å–º–µ–Ω–∏—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µüéß",
    "–£–ª—ã–±–∞–π—Å—è‚Äî—ç—Ç–æ –∏–¥—ë—Ç —Ç–≤–æ–∏–º –≥–ª–∞–∑–∞–ºüëÅ‚Äçüó®",
    "–ü—É—Å—Ç—å –±—É–¥–µ—Ç –¥–µ–Ω—å –±–µ–∑ —Å–∞–º–æ–∫—Ä–∏—Ç–∏–∫–∏ü™∑",
    "–¢—ã –ª—é–±–∏–º–∞ –±–æ–ª—å—à–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—èüíû",
    "–°–¥–µ–ª–∞–π —à–∞–≥ –Ω–∞–≤—Å—Ç—Ä–µ—á—É —Å–µ–±–µüë£",
    "–î–∞–π —Å–µ–±–µ –º–∏–Ω—É—Ç–∫—É —Ç–∏—à–∏–Ω—ãüîï",
    "–í—Å–µ–ª–µ–Ω–Ω–∞—è —Å–ª—ã—à–∏—Ç —Ç–≤–æ–π —à—ë–ø–æ—Çüåå",
    "–î–æ–±—Ä–æ—Ç–∞‚Äî—ç—Ç–æ —Ç–≤–æ–π –±—Ä–µ–Ω–¥üõç",
    "–ö—Ä–∞—Å–æ—Ç–∞‚Äî—ç—Ç–æ —Ç—ã, –∫–æ–≥–¥–∞ —Å–ø–æ–∫–æ–π–Ω–∞üåä",
    "–°–µ–≥–æ–¥–Ω—è –ª—É—á—à–µ–µ —Å–ª–æ–≤–æ‚Äî¬´–Ω–µ–∂–Ω–æ¬ªüå∏",
    "–¢—ã‚Äî–≥–ª–∞–≤–Ω—ã–π —Ä–µ—Å—É—Ä—Å —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏‚ö°Ô∏è",
    "–°–∏–ª—ã –ø—Ä–∏–¥—É—Ç, –∫–æ–≥–¥–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—à—å —Ä—É–≥–∞—Ç—å —Å–µ–±—èüíó",
    "–î–µ–≤–æ—á–∫–∞, —Ç—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è!üåü",
    "–õ—é–±–æ–≤—å –∫ —Å–µ–±–µ‚Äî–Ω–µ —ç–≥–æ–∏–∑–º, –∞ –≤–æ–∑–¥—É—Öüí®",
    "–°—á–∞—Å—Ç—å–µ‚Äî—ç—Ç–æ –º—è–≥–∫–∏–π –ø–ª–µ–¥ –∏ —Ç—ãüß£",
    "–ë—É–¥—å –±–µ—Ä–µ–∂–Ω–∞ –∫ —Å–µ–±–µ —Å–µ–≥–æ–¥–Ω—èüß¥",
    "–ù–∏–∫—Ç–æ, –∫—Ä–æ–º–µ —Ç–µ–±—è, –Ω–µ —Ä–µ—à–∞–µ—Ç, –∫—Ç–æ —Ç—ãüëë",
    "–¢—ã –¥–æ—Å—Ç–æ–π–Ω–∞ –ª—é–±–≤–∏ –±–µ–∑ —É—Å–ª–æ–≤–∏–πüíù",
    "–°–µ–≥–æ–¥–Ω—è —Ç–µ–±—è –∂–¥—ë—Ç –º–∞–ª–µ–Ω—å–∫–æ–µ —á—É–¥–æ‚ú®",
    "–ü—É—Å—Ç—å –∑–≤–æ–Ω–∫–∏–π —Å–º–µ—Ö –ø—Ä–æ–∑–≤—É—á–∏—Ç —Ö–æ—Ç—è –±—ã —Ä–∞–∑üòÇ",
    "–¢—ã‚Äî—Å–∏–Ω–æ–Ω–∏–º —Å–ª–æ–≤–∞ ¬´–∫—Ä–∞—Å–∏–≤–æ¬ªüíò",
    "–¢–≤–æ—ë —Å–µ—Ä–¥—Ü–µ –∑–Ω–∞–µ—Ç –º–∞—Ä—à—Ä—É—Çüó∫",
    "–°–º–æ—Ç—Ä–∏ –Ω–∞ —Å–µ–±—è –≥–ª–∞–∑–∞–º–∏ –ø–æ–¥—Ä—É–≥–∏‚Äî–∏ —É–ª—ã–±–Ω–∏—Å—åü•∞",
    "–¢—ã‚Äî–∏–º–µ–Ω–Ω–æ —Ç–∞, –∫—Ç–æ –Ω—É–∂–Ω–∞ –º–∏—Ä—É —Å–µ–π—á–∞—Åüåç",
    "–ì—Ä–∞–Ω–∏—Ü—ã‚Äî—ç—Ç–æ —É—é—Ç, –∞ –Ω–µ —Å—Ç–µ–Ω—ãüß±",
    "–°—Ç–∞–Ω–æ–≤–∏—Å—å —Å–æ–±–æ–π, –∞ –Ω–µ —É–¥–æ–±–Ω–æ–πü¶ã",
    "–ù–µ –∑–∞–±—ã–≤–∞–π: —Ç—ã‚Äî–ø–æ–¥–∞—Ä–æ–∫üéÅ",
    "–°–æ–º–Ω–µ–Ω–∏—è‚Äî–ø—Ä–æ—Å—Ç–æ –æ–±–ª–∞–∫–∞, –∞ —Ç—ã‚Äî–Ω–µ–±–æ‚òÅÔ∏è",
    "–¢–≤–æ–∏ –º–µ—á—Ç—ã –∑–∞–∫–æ–Ω–Ω—ãüìù",
    "–ù–∏–∫—Ç–æ –Ω–µ —Å–∏—è–µ—Ç —Ç–≤–æ–∏–º —Å–≤–µ—Ç–æ–º‚Äî–∫—Ä–æ–º–µ —Ç–µ–±—è‚ú®",
    "–ü–æ–º–Ω–∏: —Ç—ã –Ω–µ –æ–±—è–∑–∞–Ω–∞ —Ç–∞—â–∏—Ç—å –≤—Å–µ—Öüß∫",
    "–í—ã–¥–æ—Ö–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è‚Äî–≤–¥–æ—Ö–Ω–∏ –ª—ë–≥–∫–æ—Å—Ç—åüåø",
    "–¢—ã‚Äî—Ö–æ—Ä–æ—à–∞—è. –£–∂–µ. –°–µ–π—á–∞—Å.ü§ç",
    # –µ—â—ë 100
    "–°–µ–≥–æ–¥–Ω—è —É–¥–∞—á–∞ —É–ª—ã–±–Ω—ë—Ç—Å—è –≤ —Å–∞–º–æ–º –º–∏–ª–æ–º –º–µ—Å—Ç–µüòä",
    "–¢—ã —Å–∏–ª—å–Ω–µ–µ –≤—á–µ—Ä–∞—à–Ω–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–πüí™",
    "–í—ã–±–∏—Ä–∞–π –º—è–≥–∫–æ–µ‚Äî—ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Çüß∏",
    "–¢–≤–æ—è —É–ª—ã–±–∫–∞‚Äî–ª–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–ª—è –ø–æ–¥—Ä—É–≥–∏ —Ä—è–¥–æ–ºüíó",
    "–í–Ω—É—Ç—Ä–∏ —Ç–µ–±—è‚Äî–¥–æ–º, –≥–¥–µ —Ç–µ–±—è –ª—é–±—è—Çüè°",
    "–°–¥–µ–ª–∞–π —Å–µ–±–µ —á–∞—ë–∫ –∏ –ø–æ–ª—é–±–∏ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Çüçµ",
    "–°–ª–æ–≤–∞ ¬´—è –º–æ–ª–æ–¥–µ—Ü¬ª —É–∂–µ –º–µ–Ω—è—é—Ç –¥–µ–Ω—å‚ú®",
    "–ë—É–¥—å —Ç–æ–π, –∫—Ç–æ —É—Ç–µ—à–∞–µ—Ç —Å–∞–º—É —Å–µ–±—è –±–µ—Ä–µ–∂–Ω–æü´Ç",
    "–°–∏—è–π —Ç–∞–∫, –∫–∞–∫ —É–º–µ–µ—à—å –∏–º–µ–Ω–Ω–æ —Ç—ã‚ú®",
    "–°–µ–≥–æ–¥–Ω—è —Ö–æ—Ä–æ—à–∏–π –¥–µ–Ω—å –¥–ª—è —Ç—ë–ø–ª–æ–π —Å–º–µ–ª–æ—Å—Ç–∏üåû",
    "–¢—ã‚Äî—á—É–¥–æ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–±—ã–ª–æ, —á—Ç–æ –æ–Ω–æ —á—É–¥–æüåü",
    "–ú–∏—Ä –Ω–µ —Ä—É—à–∏—Ç—Å—è, –µ—Å–ª–∏ —Ç—ã –æ—Ç–¥—ã—Ö–∞–µ—à—åüõå",
    "–ú–∞–ª–µ–Ω—å–∫–∏–µ —Ä–∞–¥–æ—Å—Ç–∏‚Äî–±–æ–ª—å—à–∏–µ —Å–ø–∞—Å–∞—Ç–µ–ª–∏üéà",
    "–ü—É—Å—Ç—å –±—É–¥–µ—Ç –≤—Å—Ç—Ä–µ—á–∞, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–π –ª–µ–≥—á–µü§ç",
    "–¢—ã‚Äî—Ç–∞, —Å –∫–µ–º —Ö–æ—á–µ—Ç—Å—è –º–æ–ª—á–∞—Ç—å –≤ —É—é—Ç–µü§´",
    "–°–∫–∞–∂–∏ ¬´–Ω–µ—Ç¬ª –±–µ–∑ —á—É–≤—Å—Ç–≤–∞ –≤–∏–Ω—ãüö´",
    "–¢–≤–æ—è –∫—Ä–∞—Å–æ—Ç–∞‚Äî–≤ –∂–∏–≤–æ—Å—Ç–∏, –∞ –Ω–µ –≤ —à–∞–±–ª–æ–Ω–∞—Öüå∏",
    "–ü–æ–∑–≤–æ–ª—å —Å–µ–±–µ –Ω–µ –∑–Ω–∞—Ç—å‚Äî–∏ –∏–¥—Ç–∏ –≤—Å—ë —Ä–∞–≤–Ω–æüß≠",
    "–¢—ã‚Äî–¥–µ–≤–æ—á–∫–∞-—Å—é—Ä–ø—Ä–∏–∑, –∏ —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æüéÅ",
    "–ü—É—Å—Ç—å –±—É–¥–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ–±–Ω–∏–º–∞–µ—Çüîó",
    "–ù–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–π –ø—É—Ç—å‚Äî—Å—Ä–∞–≤–Ω–∏–≤–∞–π —É–ª—ã–±–∫–∏üòå",
    "–¢—ã‚Äî—Å–≤–µ—Ç–ª–∞—è –º—ã—Å–ª—å —ç—Ç–æ–≥–æ –¥–Ω—è‚òÄÔ∏è",
    "–ü–æ–∑–≤–æ–Ω–∏ —Ç–æ–π, –∫—Ç–æ –ª—é–±–∏—Ç —Ç–µ–±—è —Ç–∞–∫–æ–πüìû",
    "–í—Ä–µ–º—è –≤—ã–±—Ä–∞—Ç—å —Å–µ–±—è‚Äî–≤—Å–µ–≥–¥–∞ —Å–µ–π—á–∞—Å‚è∞",
    "–ü–æ–º–Ω–∏: —Ç—ã‚Äî–Ω–µ ¬´—Å–ª–∏—à–∫–æ–º¬ª, —Ç—ã‚Äî¬´–≤ —Å–∞–º—ã–π —Ä–∞–∑¬ªü´∂",
    "–°–ø—Ä—è—á—å—Å—è –≤ –ø–ª–µ–¥ –∏ —Å—Ç–∞–Ω—å —Ç–µ–ø–ª–µ–µ –º–∏—Ä—Éüß£",
    "–¢—ã‚Äî–±–æ–≥–∏–Ω—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —à–∞–≥–æ–≤üë£",
    "–ü—É—Å—Ç—å —Ç–≤–æ–π –≤–∑–≥–ª—è–¥ –±—É–¥–µ—Ç –¥–æ–±—Ä –∫ —Å–µ–±–µü™û",
    "–¢–≤–æ—ë —Å–µ—Ä–¥–µ—á–∫–æ –∑–Ω–∞–µ—Ç —Ä–∏—Ç–º —Å—á–∞—Å—Ç—å—èüíì",
    "–°—Ç–∞–Ω—å —Å–µ–±–µ –ª—É—á—à–µ–π –ø–æ–¥—Ä—É–≥–æ–πü§ç",
    "–£–ª—ã–±–Ω–∏—Å—å –≤ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ‚Äî–¥–µ–≤–æ—á–∫–∞ –∏–∑ –Ω–µ–≥–æ –∂–¥—ë—Çüòä",
    "–¢—ã‚Äî—É–ª—ã–±–∫–∞ –≤—Å–µ–ª–µ–Ω–Ω–æ–π —Å–µ–≥–æ–¥–Ω—èüåå",
    "–î–∞–π —Å–µ–±–µ –±—ã—Ç—å –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏ –ª—é–±–∏–º–æ–πüíó",
    "–ü—É—Å—Ç—å –º–∏—Ä —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –º—è–≥–∫–∏–ºüß∂",
    "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å ¬´–ø—Ä–æ—Å—Ç–æ —Ç–∞–∫¬ªüéÄ",
    "–ü—É—Å—Ç—å –±—É–¥–µ—Ç –Ω–æ–≤–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–≥—Ä–µ–µ—Çüì∞",
    "–¢—ã‚Äî—Ä–µ–¥–∫–æ—Å—Ç—å, –∏ —ç—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—Ç—Å—èüíé",
    "–û–±–Ω–∏–º–∞–π —Å–µ–±—è –º—ã—Å–ª–µ–Ω–Ω–æ‚Äî—ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Çü´Ç",
    "–ü—É—Å—Ç—å —Ç—Ä–µ–≤–æ–≥–∏ —Å—Ö–ª–æ–ø–Ω—É—Ç—Å—è –æ—Ç –Ω–µ–∂–Ω–æ—Å—Ç–∏ü´ß",
    "–°–ø–æ–∫–æ–π–Ω–æ‚Äî—Ç—ã –Ω–∞ —Å–≤–æ—ë–º –ø—É—Ç–∏üõ§Ô∏è",
    "–¢–µ–±—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å, –∏ —ç—Ç–æ —Å–∏–ª–∞ü¶ã",
    "–°–¥–µ–ª–∞–π —Ñ–æ—Ç–æ—á–∫—É –∏ –ø–æ–ª—é–±–∏ —Å–µ–±—è –µ—â—ë —Ä–∞–∑üì∏",
    "–¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è —Å–µ–≥–æ–¥–Ω—è —á–∞—Ä—É–µ—Ç‚ú®",
    "–°–∫–∞–∂–∏ ¬´—Å–ø–∞—Å–∏–±–æ¬ª —Å–µ–±–µ –∑–∞ –≤—Å—ë, —á—Ç–æ —É–∂–µ —Å–¥–µ–ª–∞–Ω–æüôè",
    "–¢—ã‚Äî–¥–µ–≤–æ—á–∫–∞-–æ–±–ª–∞–∫–æ –Ω–µ–∂–Ω–æ—Å—Ç–∏‚òÅÔ∏è",
    "–í–Ω—É—Ç—Ä–∏ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç—ãüîë",
    "–°—Ç–∞–Ω—å —á—É—Ç—å –¥–æ–±—Ä–µ–µ –∫ —Å–µ–±–µ, —á–µ–º –≤—á–µ—Ä–∞üíû",
    "–¢—ã —É–º–µ–µ—à—å –±—ã—Ç—å –¥–æ–º–æ–º –¥–ª—è —Å–µ–±—èüè†",
    "–ü—É—Å—Ç—å —Å–µ—Ä–¥—Ü–µ —à–µ–ø—á–µ—Ç, –∞ —Ç—ã —Å–ª—É—à–∞–µ—à—åüíå",
    "–°–µ–≥–æ–¥–Ω—è —Ç—ã –±—É–¥–µ—à—å –∫–æ–º—É-—Ç–æ –æ—á–µ–Ω—å –Ω—É–∂–Ω–∞ü§ç",
    "–¢—ã‚Äî–ø–µ—Å–Ω—è, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—Ç—Å—è —Å–ª—É—à–∞—Ç—åüå∏",
    "–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ —É–∂–µ –∏–¥—ë—Ç –∫ —Ç–µ–±–µ –Ω–∞–≤—Å—Ç—Ä–µ—á—ÉüïäÔ∏è",
    "–í—ã–±–æ—Ä —Å–µ–±—è‚Äî—Å–∞–º—ã–π –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–±–æ—Äüëë",
    "–¢–≤–æ—è —É–ª—ã–±–∫–∞ –¥–µ–ª–∞–µ—Ç –º–∏—Ä –ø—Ä–æ—â–µüòä",
    "–°–æ–º–Ω–µ–Ω–∏—è‚Äî–Ω–µ –∏—Å—Ç–∏–Ω–∞, –∞ –≤–∞—Ä–∏–∞–Ω—Ç—ãü§î",
    "–ü—É—Å—Ç—å –±—É–¥–µ—Ç –æ–¥–∏–Ω —Å–º–µ–ª—ã–π —à–∞–≥üö∂‚Äç‚ôÄÔ∏è",
    "–¢—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞ –∏–º–µ–Ω–Ω–æ —Å–µ–π—á–∞—Åüíê",
    "–ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ —Å–µ–±—è –∏ —Ä–∞—Å—Å–ª–∞–±—å –ø–ª–µ—á–∏–∫–∏üßò‚Äç‚ôÄÔ∏è",
    "–°–≤–µ—Ä–∫–∞–π –ø–æ-—Å–≤–æ–µ–º—É, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π‚ú®",
    "–ü—É—Å—Ç—å —É—Ç—Ä–æ –ø–∞—Ö–Ω–µ—Ç –Ω–∞–¥–µ–∂–¥–æ–πüåÖ",
    "–°–µ–≥–æ–¥–Ω—è —Ç–µ–±—è –∂–¥—ë—Ç –ø—Ä–∏—è—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑üéÅ",
    "–°–ø—Ä–æ—Å–∏ —Å–µ–±—è: ¬´—á–µ–≥–æ —Ö–æ—á–µ—Ç—Å—è?¬ª‚Äî–∏ —Å–¥–µ–ª–∞–πüç∞",
    "–¢—ã‚Äî–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç —ç—Ç–æ–º—É –º–∏—Ä—Éüíñ",
    "–ü—É—Å—Ç—å –¥–µ–Ω—å –±—É–¥–µ—Ç —Å –º—è–≥–∫–∏–º–∏ —É–≥–ª–∞–º–∏üß∏",
    "–¢—ã‚Äî–¥–µ–≤–æ—á–∫–∞ —Å–≤–µ—Ç–∞, –∏ —ç—Ç–æ –≤–∏–¥–Ω–æüåü",
    "–ü—É—Å—Ç—å –ª–∞–¥–æ—à–∫–∏ —Å—Ç–∞–Ω—É—Ç —Ç–µ–ø–ª–µ–µ‚Äî–æ—Ç –¥–æ–±—Ä–∞ü§≤",
    "–ù–µ –æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–π‚Äî—Ç—ã –ø—Ä–∞–≤–¥–∞ –º–æ–ª–æ–¥–µ—Üüíó",
    "–ó–∞–º–µ–¥–ª–∏—Å—å‚Äî–∏ –º–∏—Ä —Å—Ç–∞–Ω–µ—Ç –¥–æ–±—Ä–µ–µüï∞",
    "–¢—ã‚Äî–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ¬´—É—é—Ç¬ªüß£",
    "–°–µ–≥–æ–¥–Ω—è –º–æ–∂–Ω–æ –≥–æ—Ä–¥–∏—Ç—å—Å—è —Å–æ–±–æ–π –±–µ–∑ ¬´–Ω–æ¬ªüèÖ",
    "–ü—É—Å—Ç—å –Ω–∞–π–¥—ë—Ç—Å—è –ø—Ä–∏—á–∏–Ω–∞ –∏—Å–∫—Ä–µ–Ω–Ω–µ —Ä–∞—Å—Å–º–µ—è—Ç—å—Å—èüòÇ",
    "–¢—ã‚Äî—Ç–∞, –∫–æ–≥–æ –∏—â–µ—Ç –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ‚ú®",
    "–î—ã—à–∏ –≥–ª—É–±–∂–µ‚Äî–∏ —Å—Ç–∞–Ω–µ—Ç –ª–µ–≥—á–µü´Å",
    "–¢–≤–æ—è –º—è–≥–∫–æ—Å—Ç—å —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—èüå∏",
    "–ü—É—Å—Ç—å –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è –∫—Ä–∞—Å–∏–≤—ã–º –ø—É—Ç—ë–ºüéÄ",
    "–¢—ã‚Äî—Å–∏—è–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ —Å–ø—Ä—è—Ç–∞—Ç—å‚ú®",
    "–û–±–µ—Ä–Ω–∏—Å—å –∫ —Å–µ–±–µ —Å –ª—é–±–æ–≤—å—é‚Äî–∏ –≤—Å—ë —Å–ª–æ–∂–∏—Ç—Å—è‚ù§Ô∏è",
    "–¢—ã‚Äî–ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –º–∏—Ä–∞üåç",
    "–°–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞–π —á—Ç–æ-—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–±—èüíê",
    "–¢—ã‚Äî–¥–µ–≤–æ—á–∫–∞, –∫–æ—Ç–æ—Ä–æ–π —Ç–æ—á–Ω–æ –º–æ–∂–Ω–æ –¥–æ–≤–µ—Ä—è—Ç—åü§ç",
    "–ü—É—Å—Ç—å –æ—â—É—â–µ–Ω–∏–µ –¥–æ–º–∞ –±—É–¥–µ—Ç —Ä—è–¥–æ–ºüè°",
    "–¢—ã‚Äî–ª—É—á—à–µ–µ, —á—Ç–æ —Å —Ç–æ–±–æ–π —Å–ª—É—á–∞–ª–æ—Å—åüåü",
    "–ú–∏—Ä –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç —Ç–µ–±—è –∑–∞ —Ç–≤–æ—é –¥–æ–±—Ä–æ—Ç—Éüôè",
    "–¢—ã —É–º–µ–µ—à—å –±–µ—Ä–µ—á—å‚Äî–∏ —Ç–µ–±—è –±–µ—Ä–µ–≥—É—Çü´∂",
    "–ü–æ–≤–µ—Ä–Ω–∏—Å—å –∫ —Å–æ–ª–Ω—Ü—É –∏ —Å–æ–≥—Ä–µ–π—Å—è‚òÄÔ∏è",
    "–£ —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–∞–≤–æ –Ω–µ —Å–ø–µ—à–∏—Ç—åüê¢",
    "–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π —Å–≤–µ—Ç —É–≤–∏–¥—è—Ç —Ç–µ, –∫–æ–º—É –Ω—É–∂–Ω–æüî¶",
    "–¢—ã‚Äî–¥–µ–≤–æ—á–∫–∞-–∫—Ä–∞—Å–æ—Ç–∞, –∏ —Ç–æ—á–∫–∞üíó",
    "–ó–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –≤—Å–µ–≥–æ, —á—Ç–æ –ø—Ä–æ—Å–∏—à—å —É –∂–∏–∑–Ω–∏üåà",
    "–¢–≤–æ—è –¥—É—à–∞‚Äî–∫–∞–∫ —Å–∞–¥, –ø–æ–ª–∏–≤–∞–π –ª—é–±–æ–≤—å—éüå∑",
    "–¢—ã‚Äî–º–∞–ª–µ–Ω—å–∫–∞—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è —á—É–¥–µ—Åüåå",
    "–ü—É—Å—Ç—å –≤—Å—ë —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –ø–∞–∑–ªüß©",
    "–¢—ã –¥–µ–ª–∞–µ—à—å –º–∏—Ä –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ —Å–≤–æ–µ–π –Ω–µ–∂–Ω–æ—Å—Ç—å—éüïäÔ∏è",
    "–û–±–Ω–∏–º–∏ —Å–µ–±—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å‚Äî—è —Ä–∞–∑—Ä–µ—à–∞—éü§ó",
    "–¢—ã‚Äî–∏–∑ —Ç–µ—Ö, –∫–æ–≥–æ —Ö–æ—á–µ—Ç—Å—è –±–µ—Ä–µ—á—åüíñ",
    "–°–º–µ–π—Å—è —Å–º–µ–ª–µ–µ‚Äî—ç—Ç–æ –∫—Ä–∞—Å–∏–≤–æüòÇ",
    "–ü—É—Å—Ç—å –±—É–¥–µ—Ç —Å–æ–ª–Ω–µ—á–Ω—ã–π –ª—É—á –≤–Ω—É—Ç—Ä–∏‚òÄÔ∏è",
    "–¢—ã‚Äî–æ—Ç–≤–µ—Ç –Ω–∞ —á—å—é-—Ç–æ –ø—Ä–æ—Å—å–±—É –æ –¥–æ–±—Ä–µü§ç",
    "–ü—Ä–æ—Å—Ç–æ –±—É–¥—å‚Äî–∏ —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æü™∑",
    "–õ—ë–≥–∫–∞—è —Ä–∞–¥–æ—Å—Ç—å —É–∂–µ –±–µ–∂–∏—Ç –∫ —Ç–µ–±–µüêæ",
    "–¢—ã‚Äî–ø—Ä–∏—á–∏–Ω–∞ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–∞–¥–µ–∂–¥–µüåü",
    "–°–¥–µ–ª–∞–π —à–∞–≥ –Ω–∞–≤—Å—Ç—Ä–µ—á—É –Ω–æ–≤–æ–π —Å–µ–±–µüö™",
    "–ü—É—Å—Ç—å —Å–µ—Ä–¥—Ü–µ –±—É–¥–µ—Ç —Å–ø–æ–∫–æ–π–Ω—ã–º –∏ —Ç—ë–ø–ª—ã–ºüî•",
    "–¢—ã‚Äî–≤–¥–æ—Ö, –∫–æ—Ç–æ—Ä—ã–º –¥—ã—à–∏—Ç –¥–æ–±—Ä–æ—Ç–∞üå¨Ô∏è",
    "–°–µ–≥–æ–¥–Ω—è –º–∏—Ä –ø–æ–¥–º–∏–≥–Ω–µ—Ç —Ç–µ–±–µüòâ",
    "–¢—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è, —á–µ—Å—Ç–Ω–æ-—á–µ—Å—Ç–Ω–æüíó",
]

async def predskaz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store_user(update.effective_user)
    uid = str(update.effective_user.id)
    ensure_user(update.effective_user.id)
    u = state["users"][uid]
    u["username"] = (update.effective_user.username or "").lower()
    if u.get("last_prediction") == today_str():
        await update.message.reply_text(emo("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–µ–≥–æ–¥–Ω—è!"))
        return
    u["last_prediction"] = today_str()
    save_state()
    await update.message.reply_text(emo(f"üîÆ {random.choice(PREDICTIONS)}"))

# ===================== HUGS =====================
HUGS_POOL = [
    "ü§ó {a} –∫—Ä–µ–ø–∫–æ –æ–±–Ω—è–ª–∞ {b}‚Äî—Ç–µ–ø–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—Éüß∏",
    "üíû {a} –Ω–µ–∂–Ω–æ –ø—Ä–∏–∂–∞–ª–∞—Å—å –∫ {b}‚Äî–ø—É—Å—Ç—å —Ç—Ä–µ–≤–æ–≥–∏ —Ç–∞—é—Çüå∑",
    "ü•∞ {a} —Å–æ–≥—Ä–µ–ª–∞ {b} —Å–≤–æ–∏–º–∏ –æ–±–Ω–∏–º–∞—à–∫–∞–º–∏‚Äî–∑–∞—Ä—è–¥–∏–ª–∞—Å—å –ª—é–±–æ–≤—å—é!",
    "ü´∂ {a} –∏ {b}‚Äî—Å–µ–≥–æ–¥–Ω—è —Å–∞–º—ã–π –º–∏–ª—ã–π –¥—É—ç—Ç!",
    "–ö—Ç–æ –Ω–µ –æ–±–Ω–∏–º–µ—Ç—Å—è‚Äî—Ç–æ—Ç –Ω–µ –∏–≥—Ä–∞–µ—Ç –≤ –∫–∞—Å—Ç–æ–º–∫–µ!",
    "ü´Ç –¢–æ–∫—Å–∏–∫–æ–≤ —Ç–æ–∂–µ –∏–Ω–æ–≥–¥–∞ –æ–±–Ω–∏–º–∞—é—Ç‚Ä¶ –ø–æ –≥–æ–ª–æ–≤–µ‚Ä¶ —Ç–∞–±—É—Ä–µ—Ç–∫–æ–πüôÉ",
    "–ü–µ—Ä–µ–¥–∞—é –º—è–≥–∫–æ—Å—Ç—å, –∑–∞–±–æ—Ç—É –∏ –ø–µ—á–µ–Ω—å–∫—Éüç™ ‚Äî {a}‚Üí{b}",
    "–ö—Ä–µ–ø–∫–æ-–∫—Ä–µ–ø–∫–æ –∏ –æ—á–µ–Ω—å –Ω–µ–∂–Ω–æ‚Äî—Ç—Ä–µ–ø–µ—â–∏, –≥—Ä—É—Å—Ç—å!ü´Ç {a} –æ–±–Ω—è–ª–∞ {b}",
    "–ü—É—Å—Ç—å —Ç—Ä–µ–≤–æ–≥–∏ —É–º–µ–Ω—å—à–∞—é—Ç—Å—è –Ω–∞ 50% –ø–æ—Å–ª–µ —ç—Ç–∏—Ö –æ–±—ä—è—Ç–∏–πüå∏ {a} –¥–ª—è {b}",
]

async def hugs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store_user(update.effective_user)
    me = update.effective_user

    # –µ—Å–ª–∏ —É–∫–∞–∑–∞–ª–∏ @—é–∑–µ—Ä ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ ID
    if context.args:
        raw = context.args[0]
        uid = find_user_id_by_username(raw)
        if uid:
            a = me.mention_html()
            b = display_user(uid)
            tpl = random.choice(HUGS_POOL)
            text = tpl.format(a=a, b=b) if ("{a}" in tpl or "{b}" in tpl) else f"{a} –æ–±–Ω—è–ª–∞ {b}‚Äî{tpl}"
            await update.message.reply_text(emo(text), parse_mode="HTML")
        else:
            # –∫–∞–∫ –≤–≤–µ–ª–∏
            msg = random.choice([
                f"ü§ó {me.mention_html()} –æ–±–Ω—è–ª–∞ {raw}!–¢–µ–ø–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æüß∏",
                f"üíû {me.mention_html()} –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –æ–±—ä—è—Ç–∏—è {raw}.–í—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æüå∑",
            ])
            await update.message.reply_text(emo(msg), parse_mode="HTML")
        return

    # –∏–Ω–∞—á–µ‚Äî—Ä–∞–Ω–¥–æ–º –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö
    pool = [uid for uid in state.get("known_users", []) if uid != me.id]
    if not pool:
        await update.message.reply_text(emo("–û–±–Ω–∏–º–∞—à–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤ —á–∞—Ç–µ!ü´Ç"))
        return
    target_id = random.choice(pool)
    a = me.mention_html()
    b = display_user(target_id)
    tpl = random.choice(HUGS_POOL)
    text = tpl.format(a=a, b=b) if ("{a}" in tpl or "{b}" in tpl) else f"{a} –æ–±–Ω—è–ª–∞ {b}‚Äî{tpl}"
    await update.message.reply_text(emo(text), parse_mode="HTML")

# ===================== –õ–ï–°–ë–ò-–ü–ê–†–ê =====================
async def lesbi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store_user(update.effective_user)
    pool = list(set(state.get("known_users", [])))
    if len(pool) < 2:
        await update.message.reply_text(emo("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏—Ü –¥–ª—è –ø–∞—Ä—ã"))
        return

    if state["last_lesbi_date"] == today_str() and state.get("last_lesbi_pair"):
        a, b = state["last_lesbi_pair"]
        await update.message.reply_text(
            emo(f"üë≠ –ü–∞—Ä–∞ –¥–Ω—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞: {display_user(a)} + {display_user(b)}üíû"),
            parse_mode="HTML"
        )
        return

    a, b = random.sample(pool, 2)
    state["last_lesbi_date"] = today_str()
    state["last_lesbi_pair"] = [a, b]
    save_state()

    lines = [
        "üåà –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –ª–µ—Å–±–∏-–ø–∞—Ä–∞: {a} –∏ {b}üíã",
        "ü´∂ –ö—Ç–æ –±—ã –º–æ–≥ –ø–æ–¥—É–º–∞—Ç—å! {a} –∏ {b}‚Äî–ø–∞—Ä–∞ –¥–Ω—è!",
        "üíò –ê–º—É—Ä –ø–æ–ø–∞–ª —Ç–æ—á–Ω–æ –≤ —Ü–µ–ª—å! {a} –∏ {b} —Ç–µ–ø–µ—Ä—å –≤–º–µ—Å—Ç–µüòç",
        "üíû –õ—é–±–æ–≤—å –≤–∏—Ç–∞–µ—Ç –≤ –≤–æ–∑–¥—É—Ö–µ: {a} + {b} =‚ù§Ô∏è",
    ]
    msg = random.choice(lines).format(a=display_user(a), b=display_user(b))
    await context.bot.send_message(chat_id=CHAT_ID, text=emo(msg), parse_mode="HTML")

# ===================== –†–û–õ–ò /role =====================
ROLES = [
    "—Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤–æ—á–∫–∞üíñ","—Å–∞–º–∞—è –º–∏–ª–∞—è –∫–∏—Å–∫–∞üò∫","—Å–∞–º–∞—è –Ω–µ–∂–Ω–∞—è –ø—Ä–∏–Ω—Ü–µ—Å—Å–∞üå∏","—Å–∞–º–∞—è –≥—Ä—É—Å—Ç–Ω–∞—è –ø–µ–ª—å–º–µ—à–∫–∞üòî",
    "—Å–∞–º–∞—è —Å–∏—è—é—â–∞—è –∑–≤—ë–∑–¥–æ—á–∫–∞‚ú®","—Å–∞–º–∞—è –∑–ª–∞—è –≤–µ–¥—å–º–æ—á–∫–∞üßô‚Äç‚ôÄÔ∏è","—Å–∞–º–∞—è –º–æ–¥–Ω–∞—è –∏–∫–æ–Ω–∫–∞üë†","—Å–∞–º–∞—è –∑–∞–≥–∞–¥–æ—á–Ω–∞—è –¥—É—à–∞üåÄ",
    "—Å–∞–º–∞—è —Ä–∞–¥—É–∂–Ω–∞—è –±—É–ª–æ—á–∫–∞üåà","—Å–∞–º–∞—è –æ–¥–∏–Ω–æ–∫–∞—è —Ç—É—á–∫–∞üåß","–∫–∞–∫–∞—à–∫–∞ –¥–Ω—èüí©","–±—É–Ω—Ç–∞—Ä–∫–∞ —á–∞—Ç–∞üî•","–ø—Å–∏—Ö–æ–≤–∞–Ω–Ω–∞—è —Ñ–µ—èü§Ø",
    "–ø–ª–∞–∫—Å–∞ –¥–Ω—èüò≠","–¥—Ä–∞–º–∞–∫–≤–∏–Ω –≤–µ—á–µ—Ä–∞üëë","—Å–∞–º–∞—è –≥—Ä–æ–º–∫–∞—è –∂–∞–±–∞üê∏","–∫–∏—Å–∫–∞ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–ºüêæ","–∫–æ—Ä–æ–ª–µ–≤–∞ —Å–ø–∞–º–∞üì±",
    "—Å–∞–º–∞—è –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞—èüé≤","–¥–µ–≤–æ—á–∫–∞ –≤–∞–π–±–∞üéß","—Å–∞–º–∞—è —ç—Å—Ç–µ—Ç–∏—á–Ω–∞—è –Ω–∞ —Ä–∞–π–æ–Ω–µüé®","–∏–Ω—Å—Ç–∞-–¥–∏–≤–∞ –¥–Ω—èüì∏",
    "—Å–∞–º–∞—è –ø–æ—é—â–∞—è –≤ –¥—É—à–µüé§","—Å–∞–º–∞—è —Å–µ–∫—Å–∏ –≤ –ø–∏–∂–∞–º–µüíÉ","–∫–æ—Ä–æ–ª–µ–≤–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–∏üéâ","–¥–µ–≤–æ—á–∫–∞ —Å –∫–æ—Å–º–æ—Å–æ–º –≤ –≥–ª–∞–∑–∞—Öüåå",
    "–±–æ–≥–∏–Ω—è —Ñ–ª–∏—Ä—Ç–∞üíã","–¥–µ–≤–∞ —Ö–∞–æ—Å–∞ü´¶","—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç —á–∞—Ç–∞üïµÔ∏è‚Äç‚ôÄÔ∏è","–ø–µ—Ä—Å–∏–∫ –¥–Ω—èüçë","–∫–æ—à–º–∞—Ä –≤—Å–µ—Ö –±—ã–≤—à–∏—Öüíî",
    "–∫–æ—Ñ–µ–π–Ω–∞—è –±–æ–≥–∏–Ω—è‚òïÔ∏è","—Å–∞–º–∞—è –≥—Ä–æ–º–∫–∞—è —Ä–∂—É–Ω—å–∫–∞üòÇ","–¥–µ–≤–æ—á–∫–∞-—Å—é—Ä–ø—Ä–∏–∑üé≤","—Å–ª—É—á–∞–π–Ω—ã–π –≥–µ–Ω–∏–πüß†",
    "–ª–æ–≤—É—à–∫–∞ –¥–ª—è —Å–µ—Ä–¥–µ—Ü‚ù§Ô∏è‚Äçüî•","–æ–±–Ω–∏–º–∞—à–∫–∞ –Ω–∞ –Ω–æ–∂–∫–∞—Öü§ó","—Å–∞–º–∞—è —Ä–∞–Ω–∏–º–∞—è –¥—É—à–∞ü•∫","–Ω–æ—Å–∏–∫-–∫–Ω–æ–ø–æ—á–∫–∞ –¥–Ω—èüëÉ",
    "–¥–µ–≤–æ—á–∫–∞, –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—Ç—Å—è —á–∞–π –Ω–∞–ª–∏—Ç—åüçµ","—Å–µ—Ä–¥—Ü–µ –Ω–∞ —Ä–∞—Å–ø–∞—à–∫—Éüíò","—Å–ª–∞–¥–æ—Å—Ç—å —Å –Ω–∞—á–∏–Ω–∫–æ–π –∏–∑ –≥—Ä—É—Å—Ç–∏üç¨",
    "–æ–±–ª–∞–∫–æ –Ω–µ–∂–Ω–æ—Å—Ç–∏‚òÅÔ∏è","–º–∏–ª–∞—à–∫–∞ –¥–Ω—èüß∏","—Ç—ë–ø–ª—ã–π –ø–ª–µ–¥ —Å—Ä–µ–¥–∏ —à—Ç–æ—Ä–º–∞ü´Ç","—É–ª—ã–±–∫–∞, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –ø—Ä–æ—â–∞–µ—à—å –≤—Å—ëüòä",
    "–¥–µ–≤–æ—á–∫–∞-–æ–±–Ω–∏–º–∞—à–∫–∞ü§ç","—Å–∞–º–∞—è –¥—Ä–∞–º–∞—Ç–∏—á–Ω–∞—èüé≠","–∫–∞–ø—Ä–∏–∑—É–ª—è –¥–Ω—èüòà","–¥–µ–≤–æ—á–∫–∞ —Å –ø–ª–∞–Ω–æ–º(–∏ –±–∞—Ä—Ç–µ—Ä–æ–º)üìã",
    "–≤—ã—Å—à–∞—è –ª–∏–≥–∞ —Ñ–µ–º–∏–Ω–∏–∑–º–∞üßú‚Äç‚ôÄÔ∏è","—Ç–∞, –∫—Ç–æ –¥–µ–ª–∞–µ—Ç –º–æ–∑–≥–∏ü•¥","—à–∞–ª—å–Ω–∞—è –∏–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞üëë","–≥–ª–∞–≤–Ω–∞—è –∑–≤–µ–∑–¥–∞ —á–∞—Ç–∞üåü",
    "—Å–∞–º–∞—è –∑–∞–Ω—è—Ç–Ω–∞—è –∏–Ω—Ç—Ä–∏–≥–∞–Ω–∫–∞üß©","–¥–µ–≤–æ—á–∫–∞ —Å –∫–æ—Ä–æ–Ω–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—éüë∏","—Ñ–µ—è —Å –±–¥—Å–º-–∫—Ä—ã–ª—å—è–º–∏üßö‚Äç‚ôÄÔ∏è",
    "–∑–∞–∫–æ–ª–¥–æ–≤–∞–Ω–Ω–∞—è –∫–æ—Ç–ª–µ—Ç–∫–∞üçñ","–≤–æ–ª—à–µ–±–Ω–∏—Ü–∞ —É—é—Ç–Ω—ã—Ö –≤–µ—á–µ—Ä–æ–≤üåô","–º–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –±–æ–≥–∏–Ω—è —Å–Ω–∞üò¥","–≤–µ–¥—å–º–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª–∫–∞—Öüßô‚Äç‚ôÄÔ∏è",
    "–≤–µ–¥—å–º–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –≤–∞—Ä–∏—Ç –±–æ—Ä—âüßπ","–¥–µ–≤–æ—á–∫–∞-–∑–µ–ª—å–µüß™","—Ç–∞, —á—Ç–æ —Ç–∞–Ω—Ü—É–µ—Ç –ø–æ–¥ –ª—É–Ω–æ–πüíÉ","–¥–µ–≤–æ—á–∫–∞-–æ–π-–≤—Å—ëüôÑ",
    "–ø–∏–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–±–ª—É–∫–∞—ÖüçÜ","–≥—Ä—É—Å—Ç–Ω—ã–π –∫–æ—Ç–∏–∫ –≤ —Ç–µ–ª–µ —Å—Ç–µ—Ä–≤—ãüòø","—Ç–∞, —á—Ç–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—ÇüôÖ‚Äç‚ôÄÔ∏è","–∫—Ä–∏–Ω–∂-–∫–æ—Ä–æ–ª–µ–≤–∞ü´†",
    "—à–∞—Ä–∏–∫ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏üéà","—Ö–∏—Ç—Ä–∞—è –∂–æ–ø–∫–∞üçë","–ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æüí®","–ø–æ–∑–æ—Ä –∫–ª–∞–Ω–∞ü§°","–æ—à–∏–±–∫–∞ –ø—Ä–∏—Ä–æ–¥—ã‚ö†Ô∏è","—Ñ–∏–∞—Å–∫–æ –¥–Ω—èüìâ",
    "—Ö–æ–¥—è—á–∏–π –∫—Ä–∏–Ω–∂ü´†","–º–∏–Ω—É—Å –≤ –∫–∞—Ä–º—Éüëé","–Ω–µ—É–¥–∞—á–∞ –Ω–µ–¥–µ–ª–∏üíÄ","—Ö–∑ –∫—Ç–æ –∏ –∑–∞—á–µ–º —Ç—É—ÇüôÉ","–ø—Ä–∏—á–∏–Ω–∞ —Å—Ç—ã–¥–∞ —Å–µ–≥–æ–¥–Ω—èüò¨",
    "–±–∞–≥ –≤ –º–∞—Ç—Ä–∏—Ü–µüï≥","–≥–ª–∞–≤–Ω—ã–π –ø–æ–≤–æ–¥ –¥–ª—è —Ñ–µ–π—Å–ø–∞–ª–º–∞ü§¶‚Äç‚ôÄÔ∏è","—Å–∞–º–∞—è –±–µ—Å—è—á–∞—èüßø","—Ñ–µ–π–ª –≤–µ–∫–∞üòµ","–∞–Ω—Ç–∏-–∑–≤–µ–∑–¥–∞ —á–∞—Ç–∞üö´",
    "–ø—Ä–æ–∫–ª—è—Ç–∏–µ –¥–Ω—èüßü‚Äç‚ôÄÔ∏è","–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞ –≤ —é–±–∫–µüå™","–ø–æ–≤–æ–¥ –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞üö™","—Ñ–æ–Ω–æ–≤—ã–π —à—É–ºüîá","–≥–ª—é–∫ —Å–∏—Å—Ç–µ–º—ãüñ•",
    "–Ω–µ–¥–æ—Ä–∞–∑—É–º–µ–Ω–∏–µ —Å –≤–∞–π–±–æ–ºüòµ‚Äçüí´","—Ä–∞–Ω–¥–æ–º–Ω–∞—è npcüíª","–±–∞–≥ —Å –ª–∏—Ü–æ–ºü´•","—É—Ä–æ–Ω –ø–æ –≥–ª–∞–∑–∞–ºüëÅ","—Ç–∞, –∫–æ–≥–æ –ª—É—á—à–µ –Ω–µ –≤—Å–ø–æ–º–∏–Ω–∞—Ç—åüëª",
    "–º–æ—Ä–∞–ª—å–Ω—ã–π –≤–∏—Ä—É—Åü¶†","—Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—åüï≥","–±–∞–Ω –±–µ–∑ —Å—É–¥–∞ –∏ —Å–ª–µ–¥—Å—Ç–≤–∏—èüö∑"
]

async def role_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    store_user(update.effective_user)
    # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: reply ‚Üí @username ‚Üí random
    if update.message and update.message.reply_to_message:
        target = update.message.reply_to_message.from_user
        store_user(target)
        target_html = target.mention_html()
    elif context.args:
        raw = context.args[0].strip()
        uid = find_user_id_by_username(raw)
        if uid:
            target_html = display_user(uid)
        else:
            # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø–æ–∫–∞–∂–µ–º –∫–∞–∫ –Ω–∞–ø–∏—Å–∞–ª–∏
            target_html = raw if raw.startswith("@") else f"@{raw}"
    else:
        pool = [uid for uid in set(state.get("known_users", [])) if uid != update.effective_user.id]
        if not pool:
            await update.message.reply_text(emo("–ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã –¥–≤–µ —É—á–∞—Å—Ç–Ω–∏—Ü—ã –≤ –±–∞–∑–µ‚ú® –°–∫–∞–∂–∏ –¥–µ–≤–æ—á–∫–∞–º –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ —á–∞—Ç."))
            return
        rnd_id = random.choice(pool)
        target_html = display_user(rnd_id)

    role_text = random.choice(ROLES)
    await update.message.reply_text(emo(f"{target_html} —Å–µ–≥–æ–¥–Ω—è {role_text}"), parse_mode="HTML")

# ===================== –î–ï–ù–¨ –†–û–ñ–î–ï–ù–ò–Ø (–µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞) =====================
def _parse_day_month(bday: str):
    if not bday:
        return None
    bday = bday.strip()
    for fmt in ("%d.%m.%Y", "%d.%m"):
        try:
            dt = datetime.strptime(bday, fmt)
            return dt.day, dt.month
        except Exception:
            pass
    return None

async def birthday_job(context: ContextTypes.DEFAULT_TYPE):
    today = date.today()
    for suid, u in state["users"].items():
        dm = _parse_day_month(u.get("bday", ""))
        if not dm:
            continue
        d, m = dm
        if d == today.day and m == today.month:
            name = u.get("name") or tg_link_from_id(int(suid), "–¥–µ–≤–æ—á–∫–∞")
            text = f"üéÇ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {name}!–ü–æ–∂–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è, –ª—é–±–≤–∏ –∏ –ø–æ–±–µ–¥!ü•≥"
            try:
                await context.bot.send_message(chat_id=CHAT_ID, text=emo(text), parse_mode="HTML")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ: {e}")

# ===================== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò –ó–ê–ü–£–°–ö =====================
def build_application():
    app = ApplicationBuilder().token(TOKEN).build()

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è/–ø—Ä–æ—â–∞–Ω–∏—è
    app.add_handler(ChatMemberHandler(greet_new_member, ChatMemberHandler.CHAT_MEMBER))
    app.add_handler(ChatMemberHandler(farewell_member, ChatMemberHandler.CHAT_MEMBER))

    # –ü—Ä–æ—Ñ–∏–ª—å (–ø–æ—à–∞–≥–æ–≤–æ)
    edit_conv = ConversationHandler(
        entry_points=[CommandHandler("editprofile", editprofile)],
        states={
            STEP_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_name)],
            STEP_NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_nick)],
            STEP_UID:  [MessageHandler(filters.TEXT & ~filters.COMMAND, step_uid)],
            STEP_BDAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_bday)],
            STEP_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_city)],
            STEP_TIKTOK: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_tiktok)],
            STEP_QUOTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_quote)],
        },
        fallbacks=[],
    )
    app.add_handler(edit_conv)
    app.add_handler(CommandHandler("profile", profile))

    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("about", about))
    app.add_handler(CommandHandler("rules", rules))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("hide", hide))

    # –§–∞–Ω/–∏–≥—Ä—ã
    app.add_handler(CommandHandler("pipisa", pipisa))
    app.add_handler(CommandHandler("duel", duel_cmd))
    app.add_handler(CommandHandler("top5", top5))
    app.add_handler(CommandHandler("rating", rating))
    app.add_handler(CommandHandler("hugs", hugs))
    app.add_handler(CommandHandler("lesbi", lesbi))
    app.add_handler(CommandHandler("role", role_cmd))

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    app.add_handler(CommandHandler("predskaz", predskaz))

    # JobQueue ‚Äî –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –î–† (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 –ø–æ —Å–µ—Ä–≤–µ—Ä—É)
    app.job_queue.run_daily(birthday_job, time(hour=9, minute=0))

    return app

if __name__ == "__main__":
    application = build_application()
    print("OnlyGirls bot –∑–∞–ø—É—â–µ–Ω‚Ä¶")
    application.run_polling(close_loop=False)
